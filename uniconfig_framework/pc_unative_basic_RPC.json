{
	"info": {
		"_postman_id": "c6d7926c-d58a-415a-bf0f-b2ed422c5f24",
		"name": "pc_unative_basic_RPC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prerequisites",
			"item": [
				{
					"name": "mount xr6 by cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "675b47b4-d90f-4d6b-8738-3bb466b43d85",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"xr6\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"6.1.2\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false,\n      \"uniconfig-config:uniconfig-native-enabled\": true\n    }\n  }",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check if xr6 is connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2be587cb-c666-47e6-a3d3-20208220559d",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check if xr6 is connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "097c3a61-a958-490b-a5c7-4c9d115be9c1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "restore empty config xr6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f8cabfb-05ad-4ec8-8bd5-0e5911c76c9b",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Config replaced\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load disk0:/\"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload disk0:/initial_configuration.txt\ncommit replace\nyes\nend\n\"\n  }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount xr6 cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36f947a2-468a-4f33-8c6a-8f281f711ade",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e75c22ed-8e24-4f43-b56d-aa511b833b98",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5d0651be-b781-444f-a22d-b1e89bc44f49",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount xr6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f62d9077-25f0-4843-85df-37cc317553a6",
								"exec": [
									"pm.test(\"Successful DEL request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19643eee-3a65-4469-a3a1-b493f6436091",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0bea331f-1458-40f7-a076-90000e468b84",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount junos netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f890a6f-cc22-4989-9d8a-4053c2ddac28",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adef1cfb-170e-478d-b43a-2f58a0b53533",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d7a80bc4-296b-4bd9-a023-904e6877f815",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "restore empty config junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15489c13-976b-4159-966b-62570dbeb58a",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Config replaced\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"load complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\"\n  }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount junos cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e7fcb5e-6cac-49a7-9375-2ce4074cdace",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0332d47-9997-40d0-b928-949402bacee2",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7e4c3d2d-1a37-41cf-a51f-12ee1ebabb25",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operational",
								"network-topology:network-topology",
								"topology",
								"{{topology_id_cli}}",
								"node",
								"{{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check xr6 unit installed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4355619-7a31-44a0-a792-65cb4ce33f4b",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"",
									"if (pm.response.code == 200) {",
									"    var jsonData = pm.response.json()[\"units\"][\"unit\"];",
									"    console.log(\"length: \" + jsonData.length);",
									"    if(jsonData.length >= 20){",
									"       tests[\"Installed\"] = true ;",
									"    }",
									"    else{",
									"        console.log(\"Not all features installed yet !  \" );",
									"        setTimeout(function(){}, 10000);",
									"        postman.setNextRequest('check xr6 unit installed');",
									"    }",
									"    //Reset attempt counter",
									"postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > 50) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not installed yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to install\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not installed yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, 10000);",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check xr6 unit installed');",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "59ddf021-373e-4652-8ab6-67205434d581",
								"exec": [
									"if (postman.getEnvironmentVariable(\"env_type\") === \"cisco_xr6\"){",
									"    postman.setEnvironmentVariable(\"version\",\"6.*\");",
									"    ",
									"}",
									"else if(postman.getEnvironmentVariable(\"env_type\") === \"cisco_xr5\"){",
									"        postman.setEnvironmentVariable(\"version\",\"5.*\");",
									"",
									"}",
									"else if(postman.getEnvironmentVariable(\"env_type\") === \"cisco_xr7\"){",
									"        postman.setEnvironmentVariable(\"version\",\"7.*\");",
									"",
									"}",
									"else {",
									"            postman.setEnvironmentVariable(\"version\",\"*\");",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/cli-translate-registry:available-cli-device-translations/available-cli-device-translation=ios xr,{{uri_version_xr}}/units?depth=3",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"cli-translate-registry:available-cli-device-translations",
								"available-cli-device-translation=ios xr,{{uri_version_xr}}",
								"units"
							],
							"query": [
								{
									"key": "depth",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mount xr6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9cb6902-4bbb-415a-a8ac-7fc7ad16da21",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"xr6\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"cisco\",\n      \"netconf-node-topology:password\": \"cisco\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180,\n      \"uniconfig-config:uniconfig-native-enabled\": true,\n      \"uniconfig-config:blacklist\": {\n        \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check xr6ua status connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "711a9acd-f113-4f65-9e4c-224e11f5ab3e",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check xr6ua status connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8ad45e2f-bff8-4cd7-9d70-3ca17e6ceeaa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check xr6ua unified point exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9418bac-3ae7-4625-8eec-159a2b46cea8",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if ( pm.response.code == 200){",
									"    tests[\"Mount point exists\"] = true",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Mount point exists\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check xr6ua unified point exists');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2500b882-ce8a-4919-96d5-8874b4839fbd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check xr6ua uniconfig available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8dc096c-ff3c-49ea-b33c-9e38829ec128",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (pm.response.code === 200) {",
									"    tests[\"Is connected\"] = true;",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check xr6ua uniconfig available');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "56ab0cf2-f427-494a-a07c-a5c3acf65b1c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua unit installed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8c8c09e-58fd-402c-af1b-78defb034afa",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"if (pm.response.code == 200) {",
									"    var jsonData = pm.response.json()[\"available-unitopo-device-translations\"][\"unit\"];",
									"    console.log(\"length: \" + jsonData.length);",
									"    if(jsonData.length >= 29){",
									"       tests[\"Installed\"] = true ;",
									"    }",
									"    else{",
									"        console.log(\"Not all features installed yet !  \" );",
									"        setTimeout(function(){}, 1000);",
									"        postman.setNextRequest('check junos ua unit installed');",
									"    }",
									"    //Reset attempt counter",
									"postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > 40) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not installed yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to install\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not installed yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, 1000);",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua unit installed');",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5051cf01-dd0a-4923-b95e-84ba45957baa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/unitopo-translate-registry:available-unitopo-device-translations?depth=3",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"unitopo-translate-registry:available-unitopo-device-translations"
							],
							"query": [
								{
									"key": "depth",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mount Junos netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5ae7e30-29ee-48a2-acaa-0bb092358717",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{junos_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n      \"netconf-node-topology:dry-run-journal-size\": 100,\n      \"uniconfig-config:uniconfig-native-enabled\": true\n\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d918161-16ef-4e7e-9a94-20e47cb452ee",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eafd3ece-ca22-45fd-809d-a877cf39ce06",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua unified mount point exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13a8f9ea-45b8-403c-9a2a-5a2037b13bb1",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if ( pm.response.code == 200){",
									"    tests[\"Mount point exists\"] = true",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Mount point exists\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua unified mount point exists');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7ee69f56-7b7c-400d-a992-45a425fdc9cb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node={{node_id}}/yang-ext:mount",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id}}",
								"node={{node_id}}",
								"yang-ext:mount"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua uniconfig available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b919ddf-33cc-4fd3-8e46-90def866a71e",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (pm.response.code === 200) {",
									"    tests[\"Is connected\"] = true;",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua uniconfig available');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c619329e-5d26-4b49-88c1-517a8ed4410c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SNAPSHOT",
			"item": [
				{
					"name": "maximum snapshot limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "366f97d3-e95e-43cf-b85c-5809b1185f85",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"limit\": 2\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:maximum-snapshot-limit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:maximum-snapshot-limit"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "create snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7da00b83-760a-4fe6-8809-ad16813ffd15",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e35ebac-4e5b-421a-b097-4c98a52f6441",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"before-demo\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f22bfb2e-9803-455a-98fe-81c0a8b2f0bb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"pm.test(\"no iosxr loopback 1970\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"1970\");",
									"});",
									"",
									"pm.test(\"no junos loopback lo0\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"lo0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=before-demo",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=before-demo"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create interface XR6",
			"item": [
				{
					"name": "show all interfaces xr (blacklisted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19b876d9-a8c7-42f8-884c-2c89a0cbb56e",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show all interfaces xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e66a44c-99ab-4cc5-87ca-052a55d39810",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88b2f395-d2ab-4915-9c72-d2a6555274a6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4efcf69-de85-4d70-ac8a-27cdb10817aa",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback1970\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4241b1d-7516-40a1-90f7-306c565ffedf",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5358de7c-f00c-492a-9440-e721199923f4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4a6d61a-f667-4780-8e8a-8958d9a8ac9e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "265683e6-cc3b-402a-9040-da774f85e6e9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "DRYRUN: dry run commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54f170ec-4779-4543-b746-9dce817547bc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c5774b3-7d11-4457-a94d-a18832bce859",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ac4a6fc-60d8-4a94-8669-b936418ba29c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "613bca7f-e265-44e2-bb6f-65dd75b436dd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c6f8f42-319a-42ca-8092-e9251895482a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d76ed542-eb80-46b7-93c0-68ac122647e3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"loopback 1970 present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-iosxr-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-iosxr-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete interface XR6",
			"item": [
				{
					"name": "delete xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c2f0688-bb8d-4e1e-9e7b-5e58d900a89d",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a63c173e-6a67-4611-bee4-7c427cd3bde0",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45f9e16a-92f9-4d89-84a7-da6a9207dc4d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61495872-a2f8-47b7-8bcf-2a44f473cd31",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dd8acc0-ead8-4688-9a1e-eaf888a9fb2e",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec87cafd-3326-4552-92a3-017ff0434749",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Prepare interface then rollback",
			"item": [
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "699d2b18-9c0f-402c-a90f-839534acb31f",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28dede40-a6e0-4d35-83a6-161e09159f34",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback1970\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8203687d-a69d-47cb-8ecc-9532709884af",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56fa50f2-cd50-4e33-b125-41d07dec1f0e",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a0f5749-02c3-4f6d-bd34-d715ab256027",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						},
						"description": "Syncs device configuration to actual uniconfig node. Input contains list of nodes which to sync from network.\n\nThis should be called after configuration on device was changed manually."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88f44fb7-672c-4404-b910-fa244923b1a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: replace config with operational xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca4ec021-fa6e-4902-a276-d38fef2ac06e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:replace-config-with-operational"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with actual (OPER DS) uniconfig topology.\n\nThis is usually used after RPC sync-from-network so we have same state in CONF DS and OPER DS."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2fad7a27-9792-4dd7-8938-d7aba0a5b78c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0dfcbb8-16f5-4b2d-a7b2-0b6a89aec09e",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9b7fd7f8-f2f4-46b4-b788-bad47eec4fff",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Replace config datastore with snapshot",
			"item": [
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a20cbe90-4c4f-4e7b-919b-5c89f1237b25",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7067e2bd-1d22-4394-b60c-ade36c074840",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9d35b18-8893-4c4e-80b3-08531fe4da6e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33d36b9c-a8de-4c2e-ab8d-08d735ce6d96",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9d8f7e2-e6ce-4571-b4c7-7367dfaf27c2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ed9fcb-cad3-4ed1-9ba4-6a6b44673456",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a34f34ae-05e1-49e4-be57-91859f98cf95",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82554d6f-3086-4102-8454-8da099054c78",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create interface JUNOS",
			"item": [
				{
					"name": "UNICONFIG: actual uniconfig topology junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "854403a2-297e-4637-9d50-df6288683040",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						},
						"description": "Reads actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show all interfaces junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6df6e0a-aee2-4781-aa68-47e9eabf3916",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "209aa479-abae-46be-80af-c4edc350ca2a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c566ebd-9eb3-4628-ac25-d060309fc8e0",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b175dbff-3b59-4441-a71e-f9d607005aec",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"lo0\",\n            \"unit\": [\n                {\n                    \"name\": \"123\",\n                    \"description\": \"foo\"\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "657807a1-c5bf-44ea-9b2c-256a20539598",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4672a887-e5c2-4a86-8e67-4eda7eee08d4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7cad008-79ca-4c30-87f1-d3156ef1a707",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97086085-bdc4-4812-a86c-6d343cf77aac",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12d3e3e7-4678-4f1f-b772-4eeb4221d217",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68cd82df-2bb4-42e5-8673-cf0ed2709dc0",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-lo0-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-lo0-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7328b57a-5f22-44b2-8d51-798da2811ac2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:fail\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
									"});",
									"",
									"pm.test(\"error: Max. no of snapshots exceeded\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"error-message\"]).to.contains(\"Maximum number of snapshots exceeded.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: maximum snapshot limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d93c668-f75c-47be-8440-f12fd1e0fb83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"limit\": 4\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:maximum-snapshot-limit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:maximum-snapshot-limit"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cc7f6b5-8c68-4833-9420-d004958530ad",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02534076-94ca-4af2-baa1-b970e5f00bc6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][2][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4858e7a-ebbc-437b-8620-255e98d9e37e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"created-lo0-loopback\");",
									"});",
									"",
									"pm.test(\"lo0.123 present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-lo0-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-lo0-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0490e907-d869-4dd0-9206-f0751eea4b7c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete interface JUNOS",
			"item": [
				{
					"name": "junos interface add description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfcf0542-ecff-4578-a383-ca9288236583",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f24b5bf-542b-4f9b-83ea-03a8c53fc43e",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f7773d1-51ab-4bae-8f49-3323b63993df",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b86f6939-f61f-46d4-877b-f35545cc806c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "DRYRUN: dry run commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "05427aeb-f866-4220-8e38-294f093b3ca4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34a27b51-d3d4-4804-b757-df88b2d1ccdc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58051b5f-a0a4-4c91-ba29-83def1dca702",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "RPC for both devices",
			"item": [
				{
					"name": "SNAPSHOT: replace config with snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fa8d5ed-9def-4a4d-89fc-813e994d67fd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4378ab79-1da0-4c50-aaa1-4c1f604569d6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7e0fe3e-ed3f-4dc8-9e9e-74c3628ca24c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff XR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8be6e49-9214-41af-9c5f-3d939f2af1cf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a22151e-4055-4aea-a87c-94ffe936ee43",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0a0b4fd-06e9-40e9-9d4d-fb2d32bbb546",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98752adb-6e3f-4a0f-8199-b04c8aee1fba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						},
						"description": "Syncs device configuration to actual uniconfig node. Input contains list of nodes which to sync from network.\n\nThis should be called after configuration on device was changed manually."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5feeba28-2184-44e2-bf35-46180f91dbff",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: replace config with operational JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50143a46-9756-4c2f-8c46-f40612b36b9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:replace-config-with-operational"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with actual (OPER DS) uniconfig topology.\n\nThis is usually used after RPC sync-from-network so we have same state in CONF DS and OPER DS."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5073e09d-81b2-44b5-9cdc-58a367a74cff",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e65b48d-77f4-4cb0-a80a-e108659f3717",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfff767a-605e-4f51-869c-e7da3271875c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ab474e7-5270-408d-aa97-49fcfde12851",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bdd5816-9417-42ef-a2ea-8c592f7f8f6b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "868ac31f-453b-4c27-be05-0d25b704b1fa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"junos deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"junos created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"iosxr created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e405ee32-590c-4e5f-a741-d9293c0f0e3f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9d77d2a-b149-461c-9cfb-193e764bd3ee",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fad62983-7da8-48cf-b827-048cee3ff7e4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "757070df-8a8f-4d3b-b4b2-8e8b69462426",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6678dbf-e590-4f47-83b4-15a98b86826f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9fee1ed-0d91-4aed-ba6f-3ce80662f3f2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"",
									"pm.test(\"junos deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"] == postman.getEnvironmentVariable(\"node_id\")) {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).not.to.exist;",
									"    }",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"] == postman.getEnvironmentVariable(\"node_id\")) {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).not.to.exist;",
									"    }",
									"});",
									"",
									"pm.test(\"iosxr deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"] == \"xr6\") {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(\"xr6\");",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).not.to.exist;",
									"    }",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"] == \"xr6\") {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"]).to.eql(\"xr6\");",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).not.to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e678d00-d1a8-44e1-91f1-ac51a8b7368e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5f2e028-9627-4eca-bf6f-44431a3621ec",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d808af1-8763-45ec-9f6a-bc9edd403ea8",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0d2e2cd-3d4a-4152-975f-bd4643325e40",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][2][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba61dd20-3d60-4a69-8cb6-3116f303254c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\"\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "338e0364-92cf-4224-b1d5-104c74337faf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6495289d-becf-4320-bb07-94f2fcfab643",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=before-demo",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=before-demo"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b350ec2d-ea6b-4c4d-ba51-158904d10485",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\"\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bef1f253-089e-4291-b78f-1f0e96c7e65d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\"\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7283cfa4-a357-4539-8add-de4560380b78",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-iosxr-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-iosxr-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6561962b-d2f5-4a58-86d6-8524f84184e9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data for device junos\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"lo0\");",
									"});",
									"",
									"pm.test(\"no data for device iosxr\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "unmount xr6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36e44606-a8e6-4460-b0a6-a75fb2c98578",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b841c54-2600-4fb5-a991-a90e97f20be7",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f761e3b-4311-431f-a3fb-3229fee8a3cf",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "mount junos cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92ed51f1-2692-4054-8fd1-6aea963b6d91",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{junos_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"junos\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"uniconfig-config:uniconfig-native-enabled\": true\n    }\n  }",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua cli status connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "945636b1-2c22-40cf-aa1a-cccc3f67bcaf",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua cli status connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "99e1312b-5207-41ce-bcab-4bb97195ca64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}