{
	"info": {
		"_postman_id": "c89ee330-2df2-46e2-bd9b-a9ed5b526af3",
		"name": "pc_unified_ospf",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "OSPF CRUD",
					"description": null,
					"item": [
						{
							"name": "OSPF CRUD non-cisco",
							"description": null,
							"item": [
								{
									"name": "Configure ospf NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b5b3c0e-58d3-4c57-a0c2-ff5766144320",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout}},\n                                \"include\": [ \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                    \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                    \n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost}}\n                                        },\n                                        \"interface-ref\": {\n                                            \"config\": {\n                                                \"interface\": \"{{test_interface}}\"\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show ospf process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout\"));",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
													"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update ospf process",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a188258-0352-4266-9d53-d2872d4c9bde",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout2}},\n                                \"include\": [ \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                    \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id2}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id2}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost2}}\n                                        },\n                                        \"interface-ref\": {\n                                            \"config\": {\n                                                \"interface\": \"{{test_interface}}\"\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ospf process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
													"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout2\"));",
													"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
													"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id2\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost2\");",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ospf name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 500\", function () {",
													"  pm.response.to.have.status(500);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"protocol\": [\n    {\n      \"name\": {{ospf_invalid}},\n      \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n      \"config\": {\n        \"name\": {{ospf_invalid}},\n        \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n      },\n      \"ospfv2\": {\n        \"areas\": {\n          \"area\": [\n            {\n              \"identifier\":{{ospf_area_id3}},\n              \"config\": {\n                \"identifier\": {{ospf_area_id3}}\n              },\n              \"interfaces\": {\n                \"interface\": [\n                  {\n                    \"id\": \"{{test_interface}}\",\n                    \"config\": {\n                      \"metric\": {{ospf_cost2}}\n                    }\n                  }\n                ]          \n              }\n            }\n          ]\n        }\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf_invalid}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf_invalid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ospf configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "OSPF CRUD-cisco",
							"description": null,
							"item": [
								{
									"name": "configure ospf native 97",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric-timers\": {\n                            \"max-metric-timer\": [\n                                {\n                                    \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                    \"config\": {\n                                        \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                        \"timeout\": {{ospf_timeout}},\n                                        \"include\": [ \n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                            \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show ospf process 97",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22ef301c-0f22-4aae-bf6c-03814cb6af41",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
													"});",
													"pm.test(\"Validate timeout = \" + pm.environment.get(\"ospf_timeout\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_timeout\")));",
													"});",
													"pm.test(\"Validate interface\", function() {",
													"   pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0]).to.not.have.property(\"interface-ref\");",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_cost\")));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
													"});",
													"pm.test(\"Validate identifier\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id\")));",
													"});",
													"pm.test(\"Validate identifier config \", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ospf process 97",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric-timers\": {\n                            \"max-metric-timer\": [\n                                {\n                                    \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                    \"config\": {\n                                        \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                        \"timeout\": {{ospf_timeout2}},\n                                        \"include\": [ \n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                            \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id2}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id2}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost2}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ospf process 97",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "089ef231-0786-4b7f-9fc8-44775498acb3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
													"});",
													"pm.test(\"Validate timeout = \" + pm.environment.get(\"ospf_timeout2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_timeout2\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_cost2\")));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
													"});",
													"pm.test(\"Validate identifier\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id2\")));",
													"});",
													"pm.test(\"Validate config identifier\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id2\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "configure ospf native 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf2}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf2}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric-timers\": {\n                            \"max-metric-timer\": [\n                                {\n                                    \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                    \"config\": {\n                                        \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                        \"timeout\": {{ospf_timeout}},\n                                        \"include\": [ \n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                            \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id3}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id3}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{ospf_bundle_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost}}\n                                        },\n                                        \"mpls\": {\n                                            \"igp-ldp-sync\": {\n                                                \"config\": {\n                                                    \"enabled\": true\n                                                }\n                                            }\n                                        },\n                                        \"frinx-bfd-extension:enable-bfd\": {\n                                            \"config\": {\n                                                \"enabled\": false\n                                            }\n                                        }\n                                    },\n                                                                    {\n                                        \"id\": \"{{ospf_Giga_interface}}\",\n                                        \"config\": {\n                                        },\n                                        \"mpls\": {\n                                            \"igp-ldp-sync\": {\n                                                \"config\": {\n                                                    \"enabled\": false\n                                                }\n                                            }\n                                        },\n                                        \"frinx-bfd-extension:enable-bfd\": {\n                                            \"config\": {\n                                                \"enabled\": true\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show ospf process 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78cac7e1-3dca-4dce-a3ea-d431bf2b21bf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"ospf2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"ospf2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"ospf2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"ospf2\"));",
													"});",
													"//timeout",
													"pm.test(\"Validate timeout = \" + pm.environment.get(\"ospf_timeout\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_timeout\")));",
													"});",
													"//metric",
													"pm.test(\"Validate metric = \" + pm.environment.get(\"ospf_cost\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_cost\")));",
													"});",
													"//mpls enabled",
													"pm.test(\"Validate enabled mpls= true\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(true);",
													"});",
													"//mpls disabled",
													"pm.test(\"Validate mpls disabled = true\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(false);",
													"});",
													"//bfd disabled",
													"pm.test(\"Validate bfd disabled =true\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(false);",
													"});",
													"//bfd enabled",
													"pm.test(\"Validate bfd enabled = true\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(true);",
													"});",
													"//bundle id",
													"pm.test(\"Validate bundle interface = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"ospf_bundle_interface\"));",
													"});",
													"//gigabit id",
													"pm.test(\"Validate giga interface id = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]).to.eql(pm.environment.get(\"ospf_Giga_interface\"));",
													"});",
													"//identifier",
													"pm.test(\"Validate area identifierr = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id3\")));",
													"});",
													"//identifier",
													"pm.test(\"Validate area config identifier = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id3\")));",
													"});",
													"//mpls enabled",
													"pm.test(\"Validate enabled mpls= true\" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(true);",
													"});",
													"//mpls disabled",
													"pm.test(\"Validate mpls disabled = true\" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(false);",
													"});",
													"",
													"pm.test(\"Validate  = frinx-openconfig-ospf-types\", function() {",
													"    pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"include\"]).contain(\"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\");  ",
													"    pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"include\"]).contain(\"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\");    ",
													"    pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"include\"]).contain(\"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\");",
													"    pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"include\"]).contain(\"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ospf process 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf2}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf2}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric-timers\": {\n                            \"max-metric-timer\": [\n                                {\n                                    \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                    \"config\": {\n                                        \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                        \"timeout\": {{ospf_timeout2}},\n                                        \"include\": [ \n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                            \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                            \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id2}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id2}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{ospf_bundle_interface_upd}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost2}}\n                                        },\n                                        \"mpls\": {\n                                            \"igp-ldp-sync\": {\n                                                \"config\": {\n                                                    \"enabled\": false\n                                                }\n                                            }\n                                        },\n                                        \"frinx-bfd-extension:enable-bfd\": {\n                                            \"config\": {\n                                                \"enabled\": true\n                                            }\n                                        }\n                                    },\n                                                                    {\n                                        \"id\": \"{{ospf_Giga_interface_upd}}\",\n                                        \"config\": {\n                                             \"metric\": {{ospf_cost}}\n                                        },\n                                        \"mpls\": {\n                                            \"igp-ldp-sync\": {\n                                                \"config\": {\n                                                    \"enabled\": true\n                                                }\n                                            }\n                                        },\n                                        \"frinx-bfd-extension:enable-bfd\": {\n                                            \"config\": {\n                                                \"enabled\": false\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ospf process 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efa2bb96-4ac4-4bb4-9a3a-7b6b332d31d4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"ospf2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"ospf2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"ospf2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"ospf2\"));",
													"});",
													"//timeout",
													"pm.test(\"Validate timeout = \" + pm.environment.get(\"ospf_timeout2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_timeout2\")));",
													"});",
													"//metric",
													"pm.test(\"Validate metric = \" + pm.environment.get(\"ospf_cost2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_cost2\")));",
													"});",
													"//mpls enabled",
													"pm.test(\"Validate enabled mpls= true\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(false);",
													"});",
													"//mpls disabled",
													"pm.test(\"Validate mpls disabled = true\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(true);",
													"});",
													"//bfd disabled",
													"pm.test(\"Validate bfd disabled =true\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(true);",
													"});",
													"//bfd enabled",
													"pm.test(\"Validate bfd enabled = true\", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(false);",
													"});",
													"//bundle id",
													"pm.test(\"Validate bundle interface = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"ospf_bundle_interface_upd\"));",
													"});",
													"//gigabit id",
													"pm.test(\"Validate giga interface id = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]).to.eql(pm.environment.get(\"ospf_Giga_interface_upd\"));",
													"});",
													"//identifier",
													"pm.test(\"Validate area identifierr = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id2\")));",
													"});",
													"//identifier",
													"pm.test(\"Validate area config identifier = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id2\")));",
													"});",
													"//mpls enabled",
													"pm.test(\"Validate enabled mpls= true\" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(false);",
													"});",
													"//mpls disabled",
													"pm.test(\"Validate mpls disabled = true\" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(true);",
													"});",
													"",
													"pm.test(\"Validate  = frinx-openconfig-ospf-types\", function() {",
													"    pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"include\"]).contain(\"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\");  ",
													"    pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"include\"]).contain(\"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\");    ",
													"    pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"include\"]).contain(\"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\");",
													"    pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"include\"]).contain(\"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update ospf process 100 interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf2}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf2}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": {{ospf_area_id}},\n                            \"config\": {\n                                    \"identifier\": {{ospf_area_id}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_sub_interface}}\",\n                                       \t\"config\": {\n                                       \t\t \"id\": \"{{test_sub_interface}}\"\n                                        }\n                                    }\n                \t\t\t\t]\n                            }\n                        }\n                \t]\n            \t}\n        \t}\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated ospf process 100 interafce",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d272177-9aae-4e2b-ad6a-7d663eaa5cf9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"test_sub_interface\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}/ospfv2/areas/area/{{ospf_area_id}}/interfaces",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf2}}",
												"ospfv2",
												"areas",
												"area",
												"{{ospf_area_id}}",
												"interfaces"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete previouse ospf configuration 97",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete previouse ospf configuration 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted ospf 97",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted ospf 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{ospf_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid ospf name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6277566-e6dd-4c67-98c4-ba57fa9b0b69",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 500\", function () {",
													"  pm.response.to.have.status(500);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"protocol\": [\n    {\n      \"name\": {{ospf_invalid}},\n      \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n      \"config\": {\n        \"name\": {{ospf_invalid}},\n        \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n      },\n      \"ospfv2\": {\n        \"areas\": {\n          \"area\": [\n            {\n              \"identifier\":{{ospf_area_id3}},\n              \"config\": {\n                \"identifier\": {{ospf_area_id3}}\n              },\n              \"interfaces\": {\n                \"interface\": [\n                  {\n                    \"id\": \"{{test_interface}}\",\n                    \"config\": {\n                      \"metric\": {{ospf_cost2}}\n                    }\n                  }\n                ]          \n              }\n            }\n          ]\n        }\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf_invalid}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"{{ospf_invalid}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR ospf",
			"description": null,
			"item": [
				{
					"name": "XR ospf READERS",
					"description": null,
					"item": [
						{
							"name": "configure ospf NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f58b2110-c01e-4bb6-85a4-cdf09930b313",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf {{ospf}}\nrouter-id {{router2}}\naddress-family ipv4\narea {{area}}\ninterface {{test_interface}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show router ospf type, ID, interfaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb910618-216c-44da-85d6-571224731877",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"ospf\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"ospf\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"ospf\"));",
											"});",
											"pm.test(\"Validate router-id\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"state\"][\"router-id\"]).to.eql(pm.environment.get(\"router2\"));",
											"});",
											"pm.test(\"Validate router-id\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"router2\"));",
											"});",
											"pm.test(\"Validate id\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"pm.test(\"Validate identifier\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(pm.environment.get(\"area\"));",
											"});",
											"pm.test(\"Validate identifier\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"area\"));",
											"});",
											"pm.test(\"Validate identifier\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"state\"][\"identifier\"]).to.eql(pm.environment.get(\"area\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting router ospf type, ID, interfaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/666",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"666"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete ospf NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c0586e6-411f-4068-8cef-5319cdcde774",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router ospf {{ospf}}\nno interface {{test_interface}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 OSPF CRUD-cisco",
			"description": null,
			"item": [
				{
					"name": "XR5 OSPF CRUD-cisco Setup",
					"description": null,
					"item": [
						{
							"name": "delete previouse ospf configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"     pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 OSPF CRUD-cisco READERS",
					"description": null,
					"item": [
						{
							"name": "configure ospf 100 and 65535",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     router ospf {{ospf2}}\n     area {{ospf_area_id3}}\n     interface {{ospf_Giga_interface}}\n     cost {{ospf_cost}}\n     exit\n     exit\n     exit\n     router ospf {{ospf3}}\n     area {{ospf_area_id3}}\n     interface {{ospf_bundle_interface2}}\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show ospf 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb9a722a-4820-4999-89eb-9a2e6d8a85a6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"ospf2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"ospf2\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"ospf2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"ospf2\"));",
											"});",
											"//metric",
											"pm.test(\"Validate metric = \" + pm.environment.get(\"ospf_cost\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_cost\")));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"ospf_Giga_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"ospf_Giga_interface\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"ospf_area_id3\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id3\")));",
											"});",
											"//config identifier",
											"pm.test(\"Validate confg identifier = \" + pm.environment.get(\"ospf_area_id3\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id3\")));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show ospf 65535",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8c5b89a-1316-4619-a9c9-64fef10fac10",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"ospf3\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"ospf3\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"ospf3\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"ospf3\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"ospf_bundle_interface2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"ospf_bundle_interface2\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"ospf_area_id3\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id3\")));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"ospf_area_id3\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id3\")));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/65535",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"65535"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete ospf 100 and 65535",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router ospf {{ospf2}}\n     no router ospf {{ospf3}}\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted ospf 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted ospf 65535",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/65535",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"65535"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure ospf 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf {{ospf2}}\nmax-metric router-lsa on-startup {{qos_group4}}\nmax-metric router-lsa on-switchover {{qos_group4}}\narea {{ospf_area_id3}}\ninterface {{eth_bundle_id}}\nbfd fast-detect disable\ninterface {{rsvp_intf-id}}\nbfd fast-detect disable\ncost {{ospf_cost3}}\nmpls ldp sync disable\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show ospf 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68f44e17-b521-40fc-9186-36f844ec0bee",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"ospf2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"ospf2\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name = \" + pm.environment.get(\"ospf2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"ospf2\"));",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = \" + pm.environment.get(\"ospf_startup\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"trigger\"]).to.eql(pm.environment.get(\"ospf_startup\"));",
											"});",
											"//trigger 2",
											"pm.test(\"Validate trigger 2 = \" + pm.environment.get(\"ospf_startup\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"trigger\"]).to.eql(pm.environment.get(\"ospf_startup\"));",
											"});",
											"//timeout",
											"pm.test(\"Validate timeout = \" + pm.environment.get(\"qos_group4\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"qos_group4\")));",
											"});",
											"//trigger 3",
											"pm.test(\"Validate trigger 3 = \" + pm.environment.get(\"ospf_switchover\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"trigger\"]).to.eql(pm.environment.get(\"ospf_switchover\"));",
											"});",
											"//trigger 4",
											"pm.test(\"Validate trigger 4 = \" + pm.environment.get(\"ospf_switchover\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"config\"][\"trigger\"]).to.eql(pm.environment.get(\"ospf_switchover\"));",
											"});",
											"//timeout 2",
											"pm.test(\"Validate timeout 2 = \" + pm.environment.get(\"qos_group4\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"qos_group4\")));",
											"});",
											"//interface",
											"pm.test(\"Validate interface id = \" + pm.environment.get(\"rsvp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"rsvp_intf-id\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate mpls enabled = \" + pm.environment.get(\"mpls_elig_false\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"mpls_elig_false\")));",
											"});",
											"//metric",
											"pm.test(\"Validate metric = \" + pm.environment.get(\"ospf_cost3\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_cost3\")));",
											"});",
											"//enabled 2",
											"pm.test(\"Validate bfd enabled = \" + pm.environment.get(\"mpls_elig_false\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"mpls_elig_false\")));",
											"});",
											"//interface id",
											"pm.test(\"Validate Bundle interface id = \" + pm.environment.get(\"eth_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]).to.eql(pm.environment.get(\"eth_bundle_id\"));",
											"});",
											"//enabled 3",
											"pm.test(\"Validate bfd-ext enabled = \" + pm.environment.get(\"mpls_elig_false\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"mpls_elig_false\")));",
											"});",
											"//identifier 3",
											"pm.test(\"Validate area identifier = \" + pm.environment.get(\"qos_mpls_topmost_min\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"qos_mpls_topmost_min\")));",
											"});",
											"//identifier 4",
											"pm.test(\"Validate config area= \" + pm.environment.get(\"qos_mpls_topmost_min\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"qos_mpls_topmost_min\")));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "detele ospf 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router ospf {{ospf2}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting ospf 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af7b34bf-ef4c-4b44-a74c-f535771b21f5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf {{ospf}}\nmax-metric router-lsa on-startup {{ospf_timeout}} include-stub summary-lsa external-lsa\narea {{ospf_area_id}}\ninterface {{test_interface}}\ncost {{ospf_cost}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ca400c6-cfbe-4900-8834-817b74fbf425",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//interface",
											"pm.test(\"Validate interface = \" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"//metric",
											"pm.test(\"Validate metric = \" + pm.environment.get(\"ospf_cost\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_cost\")));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"//timeout",
											"pm.test(\"Validate timeout = \" + pm.environment.get(\"ospf_timeout\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_timeout\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"ospf_area_id\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"ospf_area_id\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(pm.environment.get(\"ospf_area_id\")));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{ospf_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82c80f38-8d7a-4e97-a363-2d75075e085a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router ospf {{ospf}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Classic ospf-vrf",
			"description": null,
			"item": [
				{
					"name": "Classic ospf-vrf READERS",
					"description": null,
					"item": [
						{
							"name": "configure ip ospf and vrf NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d2b28f2-397e-4e20-8035-d4b4df14f8fe",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf {{ospf}}\nrouter-id {{router}}\nnetwork {{net}} area {{area}}\ndefault-information originate always\nexit\nrouter ospf {{ospf2}}\nnetwork {{ip41}} {{net2}} area {{area2}}\nexit\ninterface {{test_interface}}\nip address {{ip41}} {{netmask}}\nip ospf {{ospf2}} area {{area2}}\nno shutdown\nexit\nip vrf {{vrf}}\nexit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show ip ospf and vrf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69b506be-ff9a-4ed4-aa22-39dee807b09b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"console.warn(\"// FIXME after fix MU-159 needs be uncommented\")",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ospf\")));",
											"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"router\")));",
											"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"area\")));",
											"//tests[\"04. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ip41\")));",
											"tests[\"05. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"ospf2\")));",
											"tests[\"06. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"area2\")));",
											"tests[\"07. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"vrf\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances"
									]
								}
							},
							"response": []
						},
						{
							"name": "show ip ospf interface brief",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"interfaces\"][\"interface\"][0][\"config\"][\"id\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"//id",
											"pm.test(\"Validate id = \" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}/ospfv2/areas/area/{{area2}}/interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"{{ospf2}}",
										"ospfv2",
										"areas",
										"area",
										"{{area2}}",
										"interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/666",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:OSPF",
										"666"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete ospf and vrf NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5bbef113-2078-4de5-8bde-0c77deed9c7e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router ospf {{ospf}}\nno router ospf {{ospf2}}\nno interface {{test_interface}}\nno ip vrf {{vrf}}\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}