{
	"info": {
		"name": "FRINX Uniconfig",
		"_postman_id": "0fc8f3f8-1fb6-85eb-9674-80870d0196ff",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "IOS XR",
			"item": [
				{
					"name": "XR Mount",
					"item": [
						{
							"name": "Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOSXR\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"safe-command-execution\": false\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/cli/node/IOSXR"
							},
							"response": []
						},
						{
							"name": "Check status connected CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check status connected CLI');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/cli/node/IOSXR"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR Unmount",
					"item": [
						{
							"name": "DELETE Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/cli/node/IOSXR"
							},
							"response": []
						},
						{
							"name": "Check unmounted CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"No data expected\"] = responseCode.code === 404;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/cli/node/IOSXR"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR LACP CRUD",
					"item": [
						{
							"name": "Interface",
							"item": [
								{
									"name": "SETUP: LR0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "LR0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83ed2397-aa98-4edd-bbba-7b028ebe1a8e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"LR0: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "LR0: show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d958b274-26b2-41da-8ab2-932bfb4a4150",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('L0: show created empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: LR1: Configure LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{lacp_intf-id}}\nbundle id {{lacp_bundle_id_nr}} mode {{lacp_mode_xr_active}}\nlacp period short\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "LR1: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "839d62b0-ef6e-4b3c-8401-fc6695ce61e9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"LR1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "LR1: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15163dff-8ce0-4779-9cf8-63721a76331f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"LR1: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								},
								{
									"name": "LR1: show configured lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19ceaa43-0ac1-4553-a2d8-ab19f957f152",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_fast\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"LR1: show configured lacp\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Lacp via interface",
							"item": [
								{
									"name": "SETUP: L0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a42b029-6eb2-4146-a4b5-6e88ef692b23",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"SETUP: L0: Create empty interface\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "L0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3139307-eeb2-4da0-99d8-2ca59023e3ad",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"L0: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "L0: show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f1b973d-3a38-41d1-ae98-547b71769bfa",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - L0: show created empty interface\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('L0: show created empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: L1 Create passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fb2bac0-48a8-4df6-bcf3-b7b1b967f868",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT SETUP: L1 Create passive mode\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },            \"subinterfaces\": {\n            \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "L1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd7bca3e-827f-426d-8fb8-feeeaa24f626",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"L1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "L1 show created passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f29c05a-e425-4440-85c2-e480f85af401",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - L1 show created passive mode\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_passive\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"L1 show created passive mode\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: L2 Update active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3309170a-5830-4606-80da-4720cd5aaa5c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT- SETUP: L2 Update active mode\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "L2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a76e8a1d-3b3c-4656-b00f-1c979036b77f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - L2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "L2 show updated active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a95ce36-a146-4b5d-9705-b6f51cd31ebc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - L2 show updated active mode\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"L2 show updated active mode\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: L3 Update period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ceb292e-88d3-4340-b8b5-7b8bb2f3eccb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - SETUP: L3 Update period fast\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_fast}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "L3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f9b9d21-1bb0-4d5f-b3ba-01eb18ab3ea9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - L3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "L3 show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98591215-a4e3-4082-9795-24b0dcf0e42f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - L3 show updated period fast\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_fast\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"L3 show updated period fast\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: L4 Delete bundle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "484bb56e-05fa-461d-9607-b66b4f72b4f4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"DEL - TEARDOWN: L4 Delete bundle\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "L4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b086089-fd63-414c-ac01-90027477d812",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - L4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "L4: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "142b04a2-2bb2-464c-9d96-c427f952a50c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - L4: show cleaned empty interface\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('L4: show cleaned empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Lacp via eth element",
							"item": [
								{
									"name": "SETUP: LE0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd8dd789-1475-41f4-a190-a3839050101a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - SETUP: LE0: Create empty interface\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "LE0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e8d293d-3e33-48c7-a0ac-966732848596",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LE0: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "LE0: show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd17f398-eef1-411c-9b08-7e0c76e7cd51",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - LE0: show created empty interface\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('LE0: show created empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: LE1 Create passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41871257-5bf5-498a-b232-497b02c117f4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - SETUP: LE1 Create passive mode\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "LE1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a0d8a0b-4c71-47b3-ad92-16678c09646f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LE1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "LE1 show created passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7568748-3cfb-41d9-bf4e-6ef0b8837b64",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - LE1 show created passive mode\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_passive\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"LE1 show created passive mode\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: LE2 Update active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dc60561-c7fe-4390-b6df-9de20948e752",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - SETUP: LE2 Update active mode\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "LE2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0859ee9-ee95-4832-bd06-1215cbe995fe",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LE2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "LE2 show updated active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc11e319-0f65-4e67-844e-a78f09410f1f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - LE2 show updated active mode\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_slow\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"LE2 show updated active mode\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: LE3 Update period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37a0266f-2257-4fa7-b215-39915221dfdc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - SETUP: LE3 Update period fast\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_fast}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "LE3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13c2054e-dfb6-4b70-b7a7-31a172358250",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LE3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "LE3 show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcdfe96b-e4b6-4e47-b22c-bfe509c1592a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - LE3 show updated period fast\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"",
													"    tests[\"Lacp - aggregate id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"lacp_bundle_id\");",
													"    tests[\"Lacp - interval\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"] === postman.getEnvironmentVariable(\"lacp_interval_fast\");",
													"    tests[\"Lacp - mode\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"] === postman.getEnvironmentVariable(\"lacp_mode_active\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"LE3 show updated period fast\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: LE4 Delete bundle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22ca00af-e3b3-4d79-bf14-379a0501f6b3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"DEL - TEARDOWN: LE4 Delete bundle\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "LE4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fdf7c6b-63eb-4c3d-921f-5f5d3f2f6736",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LE4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "LE4: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e70d47fb-a0f6-4b7f-b385-38089f87bb35",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - LE4: show cleaned empty interface\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Lacp - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Lacp - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"lacp_intf-id\");",
													"    tests[\"Lacp - ethernet presence\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('LE4: show cleaned empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR RSVP CRUD",
					"item": [
						{
							"name": "TEARDOWN: Delete previouse rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no rsvp\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "RS0: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59c29bd2-c3b0-4a9d-84a6-65a9924734a7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS0: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show nonexisting rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404 for non existing IP\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"// tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "SETUP Configure rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n rsvp\n interface {{rsvp_intf-id}} \n bandwidth {{rsvp_bandwidth_create}}\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "RS1: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0d861b7-9c43-46f8-b61b-a962fb32f411",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS1: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show configured rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show rsvp created request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Rsvp created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
											"    console.warn(\"// FIXME this does not return bandwidth yet (bug)\")",
											"    //tests[\"Rsvp created - bandwidth\"] = jsonData.interface[0][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === postman.getEnvironmentVariable(\"rsvp_bandwidth_create\");",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Rsvp not created yet ! Too many attempts !\")",
											"        tests[\"Rsvp not created\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Rsvp not created yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show created rsvp');",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "Delete rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"DELETE - Delete rsvp request\"] = responseCode.code === 200;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "RS2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "329b0871-72a0-449e-8a79-eca38b4be928",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6f59792-6206-462e-8e63-d65c5c2d686e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - show deleted rsvp\"] = responseCode.code === 404"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2278b7b9-c7c7-4996-9614-c5829a423190",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "Create rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Create rsvp request\"] = responseCode.code === 201 || responseCode.code === 200"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_create}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "RS3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8dcc5ad-0a50-4d0a-ab02-9344e7015680",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d600d55-d7a7-42c6-bc39-44400ac1758e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show rsvp created request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (\"frinx-openconfig-network-instance:interface\" in jsonData) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Rsvp created\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
											"    tests[\"Rsvp created\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
											"    tests[\"Rsvp created - bandwidth\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === postman.getEnvironmentVariable(\"rsvp_bandwidth_create\");",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Rsvp not created yet ! Too many attempts !\")",
											"        tests[\"Rsvp not created\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Rsvp not created yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show created rsvp');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a1a8373-09d4-4ef0-975e-145c8c2d9de3",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "Update rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"PUT - Update rsvp request\"] = responseCode.code === 200;"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_update}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "RS4: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cf6c473-f5df-4438-bc01-f17f8884787a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS4: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d10c83fb-31f3-496b-8008-4560bb26cb21",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"GET - Show rsvp updated request\"] = responseCode.code === 200",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (\"frinx-openconfig-network-instance:interface\" in jsonData) {",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    tests[\"Rsvp updated\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
											"    tests[\"Rsvp updated - bandwidth\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === postman.getEnvironmentVariable(\"rsvp_bandwidth_update\");",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
											"        // Reset attempt counter",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Rsvp not updated yet ! Too many attempts !\")",
											"        tests[\"Rsvp not updated\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Rsvp not updated yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('show updated rsvp');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3721ed9c-0d65-41de-8aa1-146e999f61fc",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete previouse rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no rsvp\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "RS5: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95bcfdf4-e5e6-4942-8908-b46109077866",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - RS5: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "RS5: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9650dcb3-3cfc-459d-8536-7e4c3aee9998",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"RS5: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR MPLS CRUD",
					"item": [
						{
							"name": "Mpls-te",
							"item": [
								{
									"name": "TEARDOWN: Delete previouse mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no mpls traffic-eng\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TE0: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb670201-64d1-4353-9e13-4eaf39b68d4d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TE0: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show nonexisting mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5eebf86-f557-492f-bdb6-638ad7561e4f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show nonexisting mpls-te\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "SETUP Configure mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n mpls traffic-eng\n interface {{mpls_intf_id}} \n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TE1: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "657894b8-ce39-4eca-97c2-ac35a1d48db3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TE1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show configured mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eab28ad0-69c2-46d6-83e6-dbeacd75ff62",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show mpls-te created request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-network-instance:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Mpls-te created\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
													"    tests[\"Mpls-te created - config intf-id\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Mpls-te not created yet ! Too many attempts !\")",
													"        tests[\"Mpls-te not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Tunnel not created yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created mpls-te');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "TE1: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cad530b4-9db2-495c-bcf9-fe519d40d063",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"TE1: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								},
								{
									"name": "Delete mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"DELETE - Delete mpls-te\"] = responseCode.code === 200;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "TE2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c26716f-0414-4f1d-8757-bd0ed7b94aaf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TE2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a5c8061-8f82-42b7-a436-313b419c3426",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show mpls-te deleted\"] = responseCode.code === 404"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3f7e8407-2060-4cb9-89c1-a3ee0945d209",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "Create mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Create mpls-te\"] = responseCode.code === 201 || responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{mpls_intf_id}}\",\n            \"config\": {\n                \"interface-id\": \"{{mpls_intf_id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "TE3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f2a03aa-ee90-4bf8-bcf1-35bc25875d08",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TE3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dedc68-40b3-42ce-a0ca-d832477c8980",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show mpls-te created request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-network-instance:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Mpls-te created\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
													"    tests[\"Mpls-te created - config intf-id\"] = jsonData[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"mpls_intf_id\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Mpls-te not created yet ! Too many attempts !\")",
													"        tests[\"Mpls-te not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Tunnel not created yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created mpls-te');",
													"    }",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e396d534-0484-4de5-ad08-528b59e53b0e",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no mpls traffic-eng\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TE4: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad82a646-f88d-4bbc-910d-691cb03ddcc0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TE4: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "TE4: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cad530b4-9db2-495c-bcf9-fe519d40d063",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"TE1: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Mpls tunnel",
							"item": [
								{
									"name": "TEARDOWN: Delete previouse tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no interface tunnel-te {{mpls_tunnel_id}}\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TU0: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebe58908-cfb6-461c-9ca0-0249bd795fa5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU0: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show nonexisting tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abf8b66b-b2ce-4cb8-b6be-67ef7dddb3d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show nonexisting tunnel\"] = responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "SETUP Configure tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Status code is 200\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface tunnel-te {{mpls_tunnel_id}}\n autoroute announce\n metric absolute {{mpls_metric_100}}\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TU1: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ebc05f2-1f91-43e1-b7e0-4d8d13cbdcfd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show configured tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef2136f8-a00f-4df3-aa6f-c1d9949ee25d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel created request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"frinx-openconfig-network-instance:tunnel\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Tunnel created\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"    tests[\"Tunnel created - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"    tests[\"Tunnel created - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"    tests[\"Tunnel created - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_100\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Tunnel not created yet ! Too many attempts !\")",
													"        tests[\"Tunnel not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Tunnel not created yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created tunnel');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "TU1: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3d48425-06fe-48d5-b6c2-8a4612daa04c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU1: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								},
								{
									"name": "Delete tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"DELETE - Delete tunnel request\"] = responseCode.code === 200;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "TU2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce35db02-dddf-44c4-86c6-03306b05983d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7edd89e-9fcf-464d-9e38-f13f7fd889a5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel deleted\"] = responseCode.code === 404"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcfd127a-4fc5-4251-bf66-f764a00ead21",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Create tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Create tunnel request\"] = responseCode.code === 201 || responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_100}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "TU3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "217dccce-3f59-464d-8c8a-a0c26e2f67e6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8f0d842-a871-4afa-89c9-01dd9e54e0c0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel created request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"tunnel\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Tunnel created\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"    tests[\"Tunnel created - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"    tests[\"Tunnel created - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"    tests[\"Tunnel created - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_100\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Tunnel not created yet ! Too many attempts !\")",
													"        tests[\"Tunnel not created\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Tunnel not created yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show created tunnel');",
													"    }",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bb7622e1-184e-40d3-ac10-eb5ab02134f0",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Update tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"PUT - Update tunnel request\"] = responseCode.code === 200"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "TU4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "452c39d2-faa3-43ca-9b36-c13e8da87dc8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8201e98a-b75a-43f3-b0c5-ae1aee6ea071",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - Show tunnel updated request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"tunnel\")) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    tests[\"Tunnel updated - name\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"mpls_tunnel_id\");",
													"    tests[\"Tunnel updated - shortcat-eligible\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"] === postman.getEnvironmentVariable(\"mpls_elig_true\");",
													"    tests[\"Tunnel updated - metric-type\"] = jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"] === \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\";",
													"    tests[\"Tunnel updated - metric\"] = \"\"+jsonData[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"] === postman.getEnvironmentVariable(\"mpls_metric_200\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"attempts_3x\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Tunnel not updated yet ! Too many attempts !\")",
													"        tests[\"Tunnel not updated\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Tunnel not updated yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('show updated tunnel');",
													"    }",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "Update tunnel invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"console.warn(\"// FIXME this returns 200 instead of returning 400\")",
													"//tests[\"PUT - Update tunnel invalid request\"] = responseCode.code === 400"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_false}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "TU5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd8d239b-80dc-4e3a-9016-4e7b9c828f65",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LE0: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no interface tunnel-te {{mpls_tunnel_id}}\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TU6: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c76ff461-f7a1-4b86-83fd-f2aa266286fd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LR1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "TU6: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d6a0247-1bcf-45cb-9899-b6c1d74a632a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - TU6: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR BGP CRUD",
					"item": [
						{
							"name": "TEARDOWN: Delete previouse bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no router bgp {{bgp_as}}\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "BG0: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98ff8414-09b1-428e-b54b-33fc288d1962",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG0: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show nonexisting bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3283fc7e-f699-4de8-9977-afe9ef5d1f2d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "SETUP Configure bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n neighbor {{ip1}}\n remote-as {{bgp_peer-as}}\n use neighbor-group {{bgp_group}}\n no shutdown\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "BG1: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "338db9ad-7b33-435e-a89a-8c48dad6fb84",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG1: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show configured bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"neighbor-address\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ip1\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_process-name\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"as\":' + postman.getEnvironmentVariable(\"bgp_as\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"peer-as\":' + postman.getEnvironmentVariable(\"bgp_peer-as\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"peer-group\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_group\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "BG1: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d917f43f-c6fe-4034-8a49-127a1ab5401c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG1: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Delete previouse bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "BG2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9583624-d455-421d-913f-7ce830b0af0c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5279117-ab3d-4804-99d9-1aff0fd0be7d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "SETUP Configure neighbor group",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "BG3: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fefc9ec-19d7-4fb5-a979-0a821bffd2da",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LR1: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "BG3: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81407a55-f932-44ba-9908-22417bb41dbb",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG3: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Configure bgp NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{ip1}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{ip1}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": {{bgp_peer-as}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "BG4: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fac509be-da7e-480a-a908-82a4e45b7c74",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG4: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"neighbor-address\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ip1\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_process-name\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"as\":' + postman.getEnvironmentVariable(\"bgp_as\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"peer-as\":' + postman.getEnvironmentVariable(\"bgp_peer-as\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"peer-group\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_group\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "Update bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as2}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{bgp_ip2}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{bgp_ip2}}\",\n                                \"peer-group\": \"{{bgp_group2}}\",\n                                \"peer-as\": {{bgp_peer-as2}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "BG5: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2dc68a6-8e7c-4ff5-bb5a-b1c1eb8047ac",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG5: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"neighbor-address\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_ip2\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_process-name\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"as\":' + postman.getEnvironmentVariable(\"bgp_as2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"peer-as\":' + postman.getEnvironmentVariable(\"bgp_peer-as2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"peer-group\\\":\\\"\" + String (postman.getEnvironmentVariable(\"bgp_group2\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no router bgp {{bgp_as2}}\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "BG6: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a4b8040-f171-4377-9219-1c1afbb6d28b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG6: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "BG6: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ebd242a-56bf-48ca-b275-a89e5c5688ec",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - BG6: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR ETH IFC CRUD",
					"item": [
						{
							"name": "Interface Full",
							"item": [
								{
									"name": "SETUP: W0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "W0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdccd475-3a6c-45be-af9c-40e79088d1cc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - W0: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "SETUP: W1 Create filled interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n        \t\"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n        \t},\n        \t\"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\"\n\t\t\t\t}\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "W1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f9e15ad-6698-44e5-bd3d-c6f980740a7e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - W1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "W1 show created filled interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
													"    tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"    tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
													"    tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress\");",
													"    tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
													"    tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval\");",
													"    tests[\"Eth - frinx-openconfig-if-ethernet:ethernet load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"eth_bundle_id\");",
													"    ",
													"    tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
													"    tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"    tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
													"    tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress\");",
													"    tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");    ",
													"    tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
													"    tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"W1 show created filled interface\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: W2 Update interface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n        \t\"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_down}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n        \t},\n        \t\"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval_upd}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "W2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dffcf969-fd42-46f7-b4e6-b4d371448dc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - W2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "W2 show updated interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
													"    tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"    tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
													"    tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress\");",
													"    tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
													"    tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval\");",
													"        tests[\"Eth - subinterface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"    tests[\"Eth - subinterface ip\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"] === postman.getEnvironmentVariable(\"eth_ifc_ip\");",
													"    tests[\"Eth - subinterface pref length\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"] === postman.getEnvironmentVariable(\"eth_ifc_pref_length\");",
													"",
													"    tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
													"    tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"    tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
													"    tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress_upd\");",
													"    tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");    ",
													"    tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
													"    tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
													"    tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval_upd\");",
													"",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"W2 show updated filled interface\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Interface Via Part Url",
							"item": [
								{
									"name": "SETUP: P0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "P0: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7548c654-3648-447a-85b2-a6898c0b2905",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P0: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P0: show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('P0: show created empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P1: Create subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "P1a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27d90a1a-9d69-4209-9324-110b77f0ac61",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P1a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P1: show created subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - subinterface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"    tests[\"Eth - subinterface ip\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"] === postman.getEnvironmentVariable(\"eth_ifc_ip\");",
													"    tests[\"Eth - subinterface pref length\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"] === postman.getEnvironmentVariable(\"eth_ifc_pref_length\");",
													"",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P1: show created subinterface\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P1: Update subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "P1b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d878311-e732-47f4-8726-d57516f7ef19",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P1b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P1: show updated subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - subinterface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"    tests[\"Eth - subinterface ip\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"] === postman.getEnvironmentVariable(\"eth_ifc_ip2\");",
													"    tests[\"Eth - subinterface pref length\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"] === postman.getEnvironmentVariable(\"eth_ifc_pref_length\");",
													"",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P1: show updated subinterface\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P1: Update empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "P1c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb17afa1-0d5c-4486-be13-5e69062e0ba4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P1c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P1: show empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - subinterface lenght\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"    tests[\"Eth - subinterface ip not present\"] = !(\"frinx-openconfig-if-ip:ipv4\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0])",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P1: show empty subinterface\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P2: Create hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "P2a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c90f1526-2058-4996-a609-ad87b56b1961",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P2a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P2: show created hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfbf02da-27ae-4b3a-933e-ced45e71e99a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P2: show created hold-time\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P2: Update hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_up}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "P2b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ac3f3d2-9ea4-494f-a20a-7e6e50fa4691",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P2b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P2: show updated hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7015cf36-edd9-45fa-b2b8-04a9536c0b31",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P2: show updated hold-time\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P2: Delete hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "P2c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fca7ef1-4332-4581-8485-300fc6ae2409",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P2c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P2: show deleted hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0940196e-154b-4a82-af5e-58a6dac27643",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P2: show deleted hold-time\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P3: Create frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "P3a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae60b503-badd-4b0b-8688-8a4887addff7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P3a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P3: show created frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
													"    tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"    tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
													"    tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress\");",
													"    tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P3: show created frinx-damping\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P3: Update frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "P3b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cccfb2fe-0049-4ce7-ab07-a0a356a349dc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P3b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P3: show updated frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
													"    tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"    tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse_upd\");",
													"    tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress_upd\");",
													"    tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P3: show updated frinx-damping\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P3: Delete frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "P3c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f74c6bd-fd3c-4bc9-ba9e-f201e3b968fd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P3c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P3: show deleted frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51170ed9-ec4e-488e-a22e-9aed42a95033",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P3: show deleted frinx-damping\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P4: Create frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "P4a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eef06b6f-5873-43ab-86a0-b8582dea2b2f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P4a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P4: show created frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a883e2a4-46f4-4140-8305-b3b61b2383fe",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P4: show created frinx-stats\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P4: Update frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval_upd}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "P4b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98410744-ca59-4698-bb82-5237162e74d7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P4b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P4: show updated frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adc37e83-db2f-406f-a0b6-4f4d4e7d35cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval_upd\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P4: show updated frinx-stats\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P4: Delete frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "P4c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "160109ea-abea-473a-8b2f-0304b893fe6a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P4c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P4: show deleted frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b53bf0db-1a59-4811-af6f-59569e7c0bdd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P4: show deleted frinx-stats\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P5: Create frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "P5a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65955d26-5ad5-4b73-987f-3e61cf1191b0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P5a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P5: show created frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71b462de-8f02-495b-97f8-4e1139cc34c3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-openconfig-if-ethernet:ethernet eth_bundle_id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"eth_bundle_id\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P5: show created frinx-eth\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: P5: Update frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "P5b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d9c83d2-30bd-4e26-af01-5ae777a8a399",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P5b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P5: show updated frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53d1075b-a311-4efc-b094-039c1ff59cdb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-openconfig-if-ethernet:ethernet eth_bundle_id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"eth_bundle_id_upd\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P5: show updated frinx-eth\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P5: Delete frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "P5c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15a567ca-2e3f-4324-8dde-feb84e434d7b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P5c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P5: show deleted frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8a41a72-b46d-4b84-89b1-b9d0635be08d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"P5: show deleted frinx-eth\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: P0: Make interface empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "P0t: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e976798-fd1e-4318-9d79-698f0aa5321c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - P0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "P0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('P0: show cleaned empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Interface Blocks",
							"item": [
								{
									"name": "SETUP: B0: Create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B0s: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d5a08f0-1d23-4fa7-adde-f51f91a11718",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0s: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B0: show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('B0: show created empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B1: Create subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B1a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "710c3333-a3b0-43a1-ab69-dbcbfef7b9bd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B1a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B1: show created subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - subinterface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"    tests[\"Eth - subinterface ip\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"] === postman.getEnvironmentVariable(\"eth_ifc_ip\");",
													"    tests[\"Eth - subinterface pref length\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"] === postman.getEnvironmentVariable(\"eth_ifc_pref_length\");",
													"",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B1: show created subinterface\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B1: Update subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B1b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a658f967-95bc-47ea-a65b-cd74172896e8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B1b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B1: show updated subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - subinterface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"    tests[\"Eth - subinterface ip\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"] === postman.getEnvironmentVariable(\"eth_ifc_ip2\");",
													"    tests[\"Eth - subinterface pref length\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"] === postman.getEnvironmentVariable(\"eth_ifc_pref_length\");",
													"",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B1: show updated subinterface\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: B1: Update empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "B1c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e59647cf-fa97-4a9b-bfdd-29b8bd5aeac9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B1c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B1: show empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - subinterface lenght\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"].length === 1",
													"    tests[\"Eth - subinterface ip not present\"] = !(\"frinx-openconfig-if-ip:ipv4\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0])",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B1: show empty subinterface\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B2: Create hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \n\t\"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B2a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc3364bf-68ce-4c1f-b5f2-b92e2c6bc801",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B2a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B2: show created hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a462653-081c-4153-9044-97980f917c11",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_down\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B2: show created hold-time\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B2: Update hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_up}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B2b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16e51503-df69-47a5-a1d6-01f9a92e4103",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B2b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B2: show updated hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3855c4b-c057-4cc3-b6d6-ad8d483e4eb2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - hold-time up\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    tests[\"Eth - hold-time down\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"] === postman.getEnvironmentVariable(\"eth_hold_time_up\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B2: show updated hold-time\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: B2: Delete hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "B2c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e05cb5e-d525-4f75-8c2c-f64d1c8b5812",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B2c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B2: show deleted hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2672913-aaa3-4992-94dc-2d94235a0432",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B2: show deleted hold-time\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B3: Create frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B3a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b02116e3-edb8-4692-b7ef-a98572e68282",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B3a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B3: show created frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
													"    tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"    tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse\");",
													"    tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress\");",
													"    tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B3: show created frinx-damping\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B3: Update frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B3b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4dfb679-9d5c-4a49-98f2-ee5ede7cdd22",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B3b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B3: show updated frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-damping:damping enabled\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"] === true",
													"    tests[\"Eth - frinx-damping:damping half-life\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"] === postman.getEnvironmentVariable(\"eth_half-time\");",
													"    tests[\"Eth - frinx-damping:damping reuse\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"] === postman.getEnvironmentVariable(\"eth_reuse_upd\");",
													"    tests[\"Eth - frinx-damping:damping suppress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"] === postman.getEnvironmentVariable(\"eth_suppress_upd\");",
													"    tests[\"Eth - frinx-damping:damping max-supress\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"] === postman.getEnvironmentVariable(\"eth_max-suppress\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B3: show updated frinx-damping\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: B3: Delete frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "B3c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ed8100f-75ba-4547-b7f6-68b6c58a8c94",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B3c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B3: show deleted frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57a24522-3e01-4543-a513-e4db42e9d032",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B3: show deleted frinx-damping\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B4: Create frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B4a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e9b99e9-ba99-42b0-bba9-4b11c83a6758",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B4a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B4: show created frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2e68eff-0ee0-4f69-9d16-9b660bcfa00b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B4: show created frinx-stats\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B4: Update frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval_upd}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B4b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd13b8ce-dbe8-47c9-9319-91f32143c045",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B4b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B4: show updated frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcc5030d-eb88-418e-927c-d40aa74ce499",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-cisco-if-extension:statistics load-interval\"] = \"\"+jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"] === postman.getEnvironmentVariable(\"eth_load_interval_upd\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B4: show updated frinx-stats\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: B4: Delete frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "B4c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "141e77eb-7614-44b2-861d-1ea49249a505",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B4c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B4: show deleted frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2817290b-3114-4d22-bedf-ad9d6cbfcf20",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B4: show deleted frinx-stats\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B5: Create frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B5a: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3604a66-24ba-4093-b236-cef6bcf11e40",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B5a: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B5: show created frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75095019-dfe3-48b9-a35e-9bfb05547143",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-openconfig-if-ethernet:ethernet eth_bundle_id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"eth_bundle_id\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B5: show created frinx-eth\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: B5: Update frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B5b: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f740856-0f3e-46a5-9103-5c499dd16dc8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B5b: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B5: show updated frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "299ac044-8dc2-4e89-9f9d-84d04bc7ec98",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"    tests[\"Eth - frinx-openconfig-if-ethernet:ethernet eth_bundle_id\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"] === postman.getEnvironmentVariable(\"eth_bundle_id_upd\");",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B5: show updated frinx-eth\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: B5: Delete frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{eth_bundle_id_upd}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "B5c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b4cd194-ac20-4753-9ca8-45ab026f55f6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B5c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B5: show deleted frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddd925b6-03a0-4f06-81a1-c896515ad0e7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of name\"] = \"name\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of config\"] = \"config\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of hold-time\"] = \"hold-time\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of subinterfaces\"] = \"subinterfaces\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === true",
													"    tests[\"Eth - presence of frinx-damping:damping\"] = \"frinx-damping:damping\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    ",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest(\"B5: show deleted frinx-eth\");",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: B0: Make interface empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": true\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "B0t: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f0bfa3-65d0-46bc-8d6f-8b0bf74c6c81",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - B0t: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "B0: show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Eth - number of tested interfaces\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Eth - presence of frinx-cisco-if-extension:statistics\"] = \"frinx-cisco-if-extension:statistics\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - presence of frinx-openconfig-if-ethernet:ethernet\"] = \"frinx-openconfig-if-ethernet:ethernet\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Eth - name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"    tests[\"Eth - config name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"] === postman.getEnvironmentVariable(\"eth_intf-id\");",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Interface not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('B0: show cleaned empty interface');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR 5 LAG without BFD",
					"item": [
						{
							"name": "Readers Tests",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// temporarily - this step is to remove subinterface\")",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}.0\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SETUP: Create LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nno shutdown\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "LR1: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bf25090-cff4-4003-9a56-b7666c2d6853",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LR1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show LAG instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// temporarily - this step is to remove subinterface\")",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}.0\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "LR2: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ef79d3f-46b9-4829-acfe-1cab2708d356",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LR2: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show deleted LAG instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "LR3: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48a58520-7968-4941-a31d-2b40e8bbaf3b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LR3: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create LAG interface without BFD",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58eb8a7a-4a80-4e3d-b551-f3b983b4f387",
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "LG1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "807f6b5f-1d13-40b2-84e8-13bbb5bc9f20",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LG1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "Create LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LG2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "759e6ac7-a6ff-47a2-aec2-3ec4e439bf0e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LG2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"//tests[\"Rsvp created\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"rsvp_intf-id\");",
													"//tests[\"Rsvp created - bandwidth\"] = jsonData.interface[0][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"] === postman.getEnvironmentVariable(\"rsvp_bandwidth_create\");",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"/*",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(postman.getEnvironmentVariable(\"response_body_string\"));",
													"});",
													"*/    ",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update LAG by variables",
							"item": [
								{
									"name": "1. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LU1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38915d97-ff64-49cf-9883-794ea0a628b4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"/*",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(postman.getEnvironmentVariable(\"response_body_string\"));",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "2. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_reuse\"));",
													"pm.environment.set(\"lag_damp_reuse\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_damp_reuse"
									},
									"response": []
								},
								{
									"name": "LU2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "058222b8-d27a-4fbd-9f3e-f959ebb65c29",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_reuse\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "3. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_load-interval\"));",
													"pm.environment.set(\"lag_load-interval\", parseInt(pm.environment.get(\"original_value\")) + 30);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_load-interval"
									},
									"response": []
								},
								{
									"name": "LU3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c607425-e123-45ce-969f-46cd777c46a4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_load-interval\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "4. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_half-life\"));",
													"pm.environment.set(\"lag_damp_half-life\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_damp_half-life"
									},
									"response": []
								},
								{
									"name": "LU4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e775049b-5b4e-497d-ad5b-cea4a7e522ba",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_half-life\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "5. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_suppress\"));",
													"pm.environment.set(\"lag_damp_suppress\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_damp_suppress"
									},
									"response": []
								},
								{
									"name": "LU5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e57ffbf-121a-4681-a6c4-8d445c143821",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_suppress\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "6. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_max-supress\"));",
													"pm.environment.set(\"lag_damp_max-supress\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_damp_max-supress"
									},
									"response": []
								},
								{
									"name": "LU6: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a90c6c32-34d9-4886-9df9-c6120460814f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU6: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_max-supress\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "7. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_min-links\"));",
													"pm.environment.set(\"lag_min-links\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_min-links"
									},
									"response": []
								},
								{
									"name": "LU7: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "020b8749-bdbf-415b-99aa-1875eab536ba",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU7: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_min-links\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "8. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_description\"));",
													"pm.environment.set(\"lag_description\", pm.environment.get(\"original_value\") + \" xxx\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_description"
									},
									"response": []
								},
								{
									"name": "LU8: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50dcf4dc-6b0a-4896-9f3b-0ca43f7bff4c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU8: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_description\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "9. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_mtu\"));",
													"pm.environment.set(\"lag_mtu\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_mtu"
									},
									"response": []
								},
								{
									"name": "LU9: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9dff5773-de27-4b97-91b4-75c6245517fb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU9: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// Changing MTU fail - MU-127\")",
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_mtu\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "10. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_ip\"));",
													"pm.environment.set(\"lag_ip\", \"1\" + /*parseInt(*/pm.environment.get(\"original_value\")/*) + 1*/);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_ip"
									},
									"response": []
								},
								{
									"name": "LU10: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49623f6e-0fdf-4ccf-ae57-02963f10fdaf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU10: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_ip\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "11. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_prefix-length\"));",
													"pm.environment.set(\"lag_prefix-length\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_prefix-length"
									},
									"response": []
								},
								{
									"name": "LU11: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c6c29ad-0ba2-4d27-9005-cc1689383922",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LU11: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_prefix-length\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update LAG by logical blocks",
							"item": [
								{
									"name": "B1. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n       }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Only basic config"
									},
									"response": []
								},
								{
									"name": "LB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d017012a-6d4a-43f0-b602-1c488882a513",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "B2. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + subinterfaces"
									},
									"response": []
								},
								{
									"name": "LB2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42e1aa95-ee0a-4abc-9ba4-350bc13426f1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LB2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "B3. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "LB3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b296c13-d6b0-4d7b-824c-02d945f05191",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LB3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "B4. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + load-interval"
									},
									"response": []
								},
								{
									"name": "LB4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9b270d1-ecc5-4f15-8bc3-d162c0bba660",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LB4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "B5. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n           \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + min-links"
									},
									"response": []
								},
								{
									"name": "LB5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39227937-e924-4c4a-beef-9e5738cee29a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LB5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update LAG by containers",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "CT1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bf40270-8f51-4380-976e-d1b3d2c95de3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "C1. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n       }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "C1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c00f9d8-dd39-468f-bb6d-2188d42d9dbb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "C2. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        }\n    }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "C2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "566f2697-a910-4b6a-8a66-8669cbd9fbda",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "DELETE LAG aggregation config",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "CT2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d576546-91e5-4238-8912-5625f6472ffc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "C3. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/statistics"
									},
									"response": []
								},
								{
									"name": "C3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40c21270-5e85-47a9-bb97-dcf6d7d235cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "DELETE LAG statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/statistics"
									},
									"response": []
								},
								{
									"name": "CT3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "391aac42-14a3-4718-80df-aa7a45a7cf18",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "C4. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n           \"damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/damping"
									},
									"response": []
								},
								{
									"name": "C4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9609fade-c4bb-4506-a2cb-556fcfed0a04",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "DELETE LAG damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/damping"
									},
									"response": []
								},
								{
									"name": "CT4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f1bc477-cf9b-4f1f-ae13-11b03ead0be1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "C5. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
									},
									"response": []
								},
								{
									"name": "C5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "943e0dc7-0515-46ce-a2c1-423b072a69c0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - C5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
									},
									"response": []
								},
								{
									"name": "DELETE LAG ip address",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
									},
									"response": []
								},
								{
									"name": "CT5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd11d1dd-9373-4cba-bcad-119125851c6f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - CT5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 404\"] = responseCode.code === 404;",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "TEARDOWN: Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "LT: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94c7ac87-e3a4-4ca9-ac57-c4c66a459ac7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LT: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
											"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3473b338-b4e9-4200-b8be-dafd303d1f30",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR 5 LAG with BFD",
					"item": [
						{
							"name": "Readers Tests",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// temporarily - this step is to remove subinterface\")",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}.0\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SETUP: Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nbfd mode ietf\nbfd address-family ipv4 destination {{lag_bfd_destination-address}}\nbfd address-family ipv4 fast-detect\nbfd address-family ipv4 minimum-interval {{lag_bfd_min-interval}}\nbfd address-family ipv4 multiplier {{lag_bfd_multiplier}}\nno shutdown\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "LRB1: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60ada423-7d57-4302-bab5-665209f8d840",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LRB1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show LAG instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete LAG subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// temporarily - this step is to remove subinterface\")",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}.0\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "LRB2: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4e40326-803e-485a-b497-3c25e091d4f4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LRB2: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show deleted LAG instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "LRB3: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c548c8c-94af-41b4-b4b0-0503badc84e0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LRB3: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Create LAG interface with BFD",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c73ef575-f313-47a6-90ce-3e452d4b0c15",
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 404;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "LIB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d221d8-70a2-4551-822b-2fbff67fd6ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LIB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LIB2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbc3c447-7277-4a26-bfb5-2d6bee49ff4b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LIB2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"//this should not fail at non physical devices",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"response_body_string\", responseBody);",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update LAG by variables",
							"item": [
								{
									"name": "1. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "LUB1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4103467b-3072-44f5-9f24-49ed50674c8f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LUB1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(postman.getEnvironmentVariable(\"response_body_string\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "2. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_destination-address\"));",
													"pm.environment.set(\"lag_bfd_destination-address\", \"1\" + /*parseInt(*/pm.environment.get(\"original_value\")/*) + 1*/);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_bfd_destination-address"
									},
									"response": []
								},
								{
									"name": "LUB2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1da11d9-6f7f-4302-8f7d-455595f9a3e3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LUB2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_destination-address\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "3. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_multiplier\"));",
													"pm.environment.set(\"lag_bfd_multiplier\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_bfd_multiplier"
									},
									"response": []
								},
								{
									"name": "LUB3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ca4a955-714f-45c4-9958-1503b436dd9f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LUB3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_multiplier\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "4. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_min-interval\"));",
													"pm.environment.set(\"lag_bfd_min-interval\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Changing lag_bfd_min-interva"
									},
									"response": []
								},
								{
									"name": "LUB4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21a3052d-0f7e-47b6-98f6-a2b80a282fe6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LUB4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_min-interval\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update LAG by logical block",
							"item": [
								{
									"name": "B5. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n           \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
										"description": "Basic config + BFD block"
									},
									"response": []
								},
								{
									"name": "LUB5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d4df58a-f880-4885-b749-8852c1c3095a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LUB5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update LAG by containers",
							"item": [
								{
									"name": "B5. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                \"bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation/bfd",
										"description": "Basic config + BFD block"
									},
									"response": []
								},
								{
									"name": "LBI5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02f7465-42a9-48a4-8404-6ced79b82e28",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LBI5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "TEARDOWN: Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "LBT: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3dbc6145-b4a8-4ec0-b025-02d129c88307",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - LBT: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
											"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.warn(\"// FIXME this returns data instead of returning 404 for non existing network instance\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"// tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR OSPF CRUD",
					"item": [
						{
							"name": "TEARDOWN: Delete previouse ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no router ospf {{ospf}}\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "OS1: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ab63eda-7e26-4294-805f-d88ab660cb30",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS1: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show nonexisting ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa1d6c37-fb22-4382-b82a-a8da9f2ffb85",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "SETUP Configure ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf {{ospf}}\nmax-metric router-lsa on-startup {{ospf_timeout}} include-stub summary-lsa external-lsa\narea {{ospf_area_id}}\ninterface {{test_interface}}\ncost {{ospf_cost}}\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "OS2: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67918184-9925-46e5-8239-9a8b40f1276c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS2: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show configured ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout\"));",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "OS2: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cf16915-29e6-4af7-88f8-6977be94e02e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS2: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Delete previouse ospf configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "OS1: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ac25881-1c38-4335-bdbb-475dc9bbfbf4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS1: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84ff20bb-c0ef-49dc-ba80-79de23a455f3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "Configure ospf NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout}},\n                                \"include\": [ \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                    \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                    \n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost}}\n                                        },\n                                        \"interface-ref\": {\n                                            \"config\": {\n                                                \"interface\": \"{{test_interface}}\"\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "OS2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0691d609-988f-4c56-a156-716a65d2b5a5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout\"));",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "Update ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout2}},\n                                \"include\": [ \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_STUB\", \n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE_TYPE2_EXTERNAL\",\n                                    \"frinx-openconfig-ospf-types:MAX_METRIC_INCLUDE\",\n                                    \"frinx-cisco-ospf-extension:MAX_METRIC_SUMMARY_LSA\"\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id2}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id2}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost2}}\n                                        },\n                                        \"interface-ref\": {\n                                            \"config\": {\n                                                \"interface\": \"{{test_interface}}\"\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "OS3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca71202f-aec1-4d29-a5ac-4920cb3d14db",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = \"\\\"name\\\":\\\"\" + String (postman.getEnvironmentVariable(\"ospf\"))+\"\\\"\";",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring);",
											"var mystring = \"\\\"timeout\\\":\" + String (postman.getEnvironmentVariable(\"ospf_timeout2\"));",
											"tests[\"Body matches string\" + mystring] = responseBody.has(mystring); ",
											"var mystring = '\"identifier\":' + postman.getEnvironmentVariable(\"ospf_area_id2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"id\":\"' + postman.getEnvironmentVariable(\"test_interface\")+\"\\\"\";",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											"var mystring = '\"metric\":' + postman.getEnvironmentVariable(\"ospf_cost2\");",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no router ospf {{ospf}}\n commit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "OS3: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7abcc7d-d2f1-4145-9b8b-286fe7aca380",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS3: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "OS3: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2e7469d-273f-4510-9844-7ff313b0660c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - OS3: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR PF IFC CRUD",
					"item": [
						{
							"name": "SETUP Configure policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map {{output_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{output_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\n commit\n end\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "SETUP Configure Bundle interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{policy_interface}}\n commit\n end\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete previouse policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface {{policy_interface}}\n no service-policy output {{output_policy}}\n no service-policy input {{input_policy}}\n commit\n end\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "PF1: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8af60016-5bae-4ab9-97e3-77d1b4aff891",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - PF1: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show nonexisting policy on interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6031d0e-ba5b-4c5f-b6fb-232fe05f1ed9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "SETUP Configure interface policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface {{policy_interface}}\n service-policy output {{output_policy}}\n service-policy input {{input_policy}}\n commit\n end\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "PF2: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0fe6877-c317-4ad3-aab3-921105a97614",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - PF1: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show configured interface policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"policy_interface\")));",
											"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"output_policy\")));",
											"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"input_policy\")));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "PF1: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ebb22f5-bb52-4be4-bf5f-a2dd6a306ae6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - PF1: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Delete interface policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "PF1: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84c22380-fa3b-42b8-a9a0-8b5177e5fdca",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - PF1: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f3ebdad7-1bd8-4c18-963e-c1e88598cd04",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "Create interface policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n\n{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"{{input_policy}}\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"{{output_policy}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "PF2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "416c8962-5b84-49bc-8a8b-f21f436cbd38",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - PF2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show policy on interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"policy_interface\")));",
											"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"output_policy\")));",
											"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"input_policy\")));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "Update interface policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n\n{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"{{input_policy2}}\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"{{output_policy2}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "PF3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34e75319-3ea9-4b81-a7f1-3f29cee394ac",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - PF3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"01. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"policy_interface\")));",
											"tests[\"02. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"output_policy2\")));",
											"tests[\"03. Body matches string\"] = responseBody.has(String(postman.getEnvironmentVariable(\"input_policy2\")));"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete interface  policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface {{policy_interface}}\n no service-policy output {{output_policy2}}\n no service-policy input {{input_policy2}}\n commit\n end\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete Bundle interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface {{policy_interface}}\n commit\n end\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Status code is 200\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map {{output_policy}}\nno policy-map {{input_policy}}\nno policy-map {{output_policy2}}\nno policy-map {{input_policy2}}\n commit\n end\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "PF3: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55d1962b-3605-4bdf-bfce-838f5ed66c21",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - PF3: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "PF3: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "209e9537-bf15-4736-8077-08879420f0ae",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - PF3: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR SYSLOG CRUD",
					"item": [
						{
							"name": "TEARDOWN: Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}\ncommit\nend\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "SETUP: Create LAG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\ncommit\nend\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "SETUP: Configure SYSLOG for LAG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\nlogging events link-status\ncommit\nend\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "SY1: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1c37bfb-9ff6-45ff-b7a0-c17b5c9ae1e3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY1: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show configured SYSLOG for LAG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"1. SYSLOG created\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"tests[\"2. SYSLOG created\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"",
											"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY1: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dfbd674d-c8cd-4f18-85dd-6d70b9950b80",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY1: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Delete SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY1: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fce876ee-03cb-4335-a588-32d92f1d6c35",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY1: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "Create SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY2: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25a47821-fa58-4625-8e31-e43e108aa6fd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY2: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"tests[\"1. SYSLOG interface created\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"tests[\"2. SYSLOG interface created\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
											"",
											"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
											"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "Update SYSLOG => Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY3: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "228f72ed-0542-4ca6-995d-05c5273ad72f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY3: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\nno logging events link-status\ncommit\nend\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "TEARDOWN: Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}\ncommit\nend\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "SY2: sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f914f72-201a-433e-8d5b-8949ed927de3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY2: sync-from-network\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData) {",
											"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
											"} else {",
											"        tests[\"Sync went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "show deleted SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "show deleted SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
											"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces"
							},
							"response": []
						},
						{
							"name": "SY2: replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2eec5023-15f8-451f-a8c5-24908ab07c68",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY2: replace-config-with-operational\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"} else {",
											"        tests[\"Repalce went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "NEG Create SYSLOG on nonexisting interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"//Cannot configure logging on non-existent interface Bundle-Ether7029",
											"//It should be returned status  4xx - problem on side client",
											"console.warn(\"// FIXME this returns 500 server error instead of returning 4xx for case cannot configure logging on non-existent interface.\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"// tests[\"Status code is 4xx\"] = responseCode.code === 4xx;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY4: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36294308-6e81-45f2-b068-32dab3778903",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY4: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "NEG Delete SYSLOG on nonexisting interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "SY5: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "515cfab0-b0ba-467f-ae46-699768dbe00c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY5: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted SYSLOG",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"Status code is 404\"] = responseCode.code === 404;"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "NEG Create SYSLOG on physical interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"//Cannot configure logging on ethernet interface ...",
											"//It should be returned status  4xx - problem on side client",
											"console.warn(\"// FIXME this returns 500 server error instead of returning 4xx for case cannot configure logging on ethernet interface ...\")",
											"",
											"// console.log(\"Response: \" + responseBody)",
											"// tests[\"Status code is 4xx\"] = responseCode.code === 4xx;"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{snmp_url_inf_id_physical}}"
							},
							"response": []
						},
						{
							"name": "SY6: commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c99c5a4-158f-4546-b319-ea6ac999bb6d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"tests[\"POST - SY5: commit\"] = responseCode.code === 200",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( \"output\" in jsonData ) {",
											"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
											"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
											"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
											"    }",
											"} else {",
											"        tests[\"Commit went wrong\"] = false",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR IFC ACL CRUD",
					"item": [
						{
							"name": "ifc acl full",
							"item": [
								{
									"name": "SETUP: IA0: Create ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv4 access-list {{iacl_in-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_in-acl-name2}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name2}} 10 deny ipv4 any any\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "IA0s: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1159f85-7c23-4899-b287-a747a817d1de",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0s: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "IA0s: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "750ce385-2177-42b6-b59f-5ca982602ab5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0s: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								},
								{
									"name": "SETUP: IA1: Create acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA1c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "069e2177-767a-49be-9187-a1740371cad9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA1c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA1: show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA1: show created acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA1: Update acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA1u: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd44dda4-7702-4718-adb9-390c2d95d0ab",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA1u: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA1: show updated acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA1: show updated acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA1: Delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA1d: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "084294ab-cce9-4b39-ac37-31a430b8e94f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA1d: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA1: show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA1: show updated acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: IA0: Delete ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv4 access-list {{iacl_in-acl-name1}}\nno ipv4 access-list {{iacl_in-acl-name2}}\nno ipv4 access-list {{iacl_out-acl-name1}}\nno ipv4 access-list {{iacl_out-acl-name2}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "IA0t: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "729e6096-1a75-44f1-a340-b7119f9a643b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0t: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "IA0t: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25916234-2f85-4fd4-8efa-f91efe61d7cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA0t: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "ifc acl parts",
							"item": [
								{
									"name": "SETUP: IAP0: Create ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv4 access-list {{iacl_in-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_in-acl-name2}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name2}} 10 deny ipv4 any any\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "IAP0s: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4eff7bf7-5212-4d75-b0f0-58608657f8d4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IAP0s: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "IAP0s: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "877ce7fb-a674-42ab-8cd4-1d7488fb8148",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IAP0s: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								},
								{
									"name": "SETUP: IA2: Create acl ingress egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA2c: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37e020cf-39aa-444d-949c-48af1f415cd0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA2c: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA2: show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name1\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA2: show created acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA2: Update acl egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/egress-acl-sets"
									},
									"response": []
								},
								{
									"name": "IA2u: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51c03465-2d8b-4df4-8171-d7bb6090ad38",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA2u: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA2: show updated egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name1\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA2: show updated egress');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA2 Update acl ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/ingress-acl-sets"
									},
									"response": []
								},
								{
									"name": "IA2ui: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30b4b761-1718-4f39-922b-25acad07e334",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA2ui: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA2: show updated ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"    tests[\"Ifc acl - ingress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_in-acl-name2\")",
													"",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0]",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"    tests[\"Ifc acl - egress acl name\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"] === postman.getEnvironmentVariable(\"iacl_out-acl-name2\")",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA2: show updated ingress');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: IA2: Delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "IA2d: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e032b83-d905-47e8-9c7c-643ca5867872",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IA2d: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "IA2: show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"GET - show created interface request\"] = responseCode.code === 200",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (\"frinx-openconfig-interfaces:interface\" in jsonData) {",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    // asserts",
													"    tests[\"Ifc acl - interface\"] = jsonData[\"frinx-openconfig-interfaces:interface\"].length === 1",
													"    tests[\"Ifc acl - interface name1\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"    tests[\"Ifc acl - interface name2\"] = jsonData[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"id\"] === postman.getEnvironmentVariable(\"iacl_intf-id\")",
													"",
													"    tests[\"Ifc acl - ingress acl presence\"] = \"ingress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"    tests[\"Ifc acl - egress acl presence\"] = \"egress-acl-sets\" in jsonData[\"frinx-openconfig-interfaces:interface\"][0] === false",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"show_attempts_count\"))) {",
													"        // Reset attempt counter",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Expected content not received yet ! Too many attempts !\")",
													"        tests[\"Ifc acl not created/updated/deleted\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Data not received yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('IA1: show updated acl');",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: IAP0: Delete ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv4 access-list {{iacl_in-acl-name1}}\nno ipv4 access-list {{iacl_in-acl-name2}}\nno ipv4 access-list {{iacl_out-acl-name1}}\nno ipv4 access-list {{iacl_out-acl-name2}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "IAP0t: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ceb6031-aa67-440e-a252-243d6bd99fd0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IAP0t: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "IAP0t: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c6e0f64-b882-4f29-b73f-ab7cf6903020",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - IAP0t: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR SNMP",
					"item": [
						{
							"name": "SNMP on GigabitEthernet",
							"item": [
								{
									"name": "SETUP: Configure disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nsnmp-server interface {{snmp_inf_id_physical}}\nnotification linkupdown disable\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SN0: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7af1ea33-e073-464b-96de-c7dc0c408f28",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SN0: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show configured SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SETUP: Configure enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nsnmp-server interface {{snmp_inf_id_physical}}\nno notification linkupdown disable\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SN1: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "812e2038-68ac-4626-aaf6-3aebb6a9af6a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LR1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show configured SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN1: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c77b190-5c6e-489a-8fb3-b16d3cb2ba3b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SN1: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								},
								{
									"name": "Delete SNMP => Disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4b2dce3-fc32-45cb-a98d-3febfc3b90cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SN1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"",
													"var mystring = '\"event-name\": \"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "Create SNMP => Enable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f9408a7-0d63-4be1-ae3f-1d6b538eda1b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SN2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "Update SNMP => disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "SN3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aee1ee9a-6e79-4111-92c3-98665bea60d4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SN3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === postman.getEnvironmentVariable(\"snmp_inf_id_physical\");",
													"",
													"var mystring = '\"event-name\": \"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SNMP on LAG",
							"item": [
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno interface bundle-ether {{lag_inf-id}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SETUP: Create LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nno shutdown\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SETUP: Configure disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nsnmp-server interface Bundle-Ether{{lag_inf-id}}\nnotification linkupdown disable\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SNL1: sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0275c1d-5968-44c3-8f79-881c40b7fc0b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - LR1: sync-from-network\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData) {",
													"    tests[\"Sync node\"] = jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"    tests[\"Sync node error\"] = \"error-type\" in jsonData[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0] === false",
													"} else {",
													"        tests[\"Sync went wrong\"] = false",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show configured SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SETUP: Configure enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nsnmp-server interface Bundle-Ether{{lag_inf-id}}\nno notification linkupdown disable\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/IOSXR/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "SNL2: sync-from-network",
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"node-to-sync\": [\n\t\t\t{\n\t\t\t\t\"node-id\": \"IOSXR\"\n\t\t\t}\n\t\t]\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show configured SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL2: replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd421e13-4ed4-49c8-a96b-821971343b17",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL2: replace-config-with-operational\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Replace status complete\"] = jsonData[\"output\"][\"result\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"} else {",
													"        tests[\"Repalce went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								},
								{
									"name": "Delete  SNMP => Disable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL1: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de593f67-a8dc-4e67-b041-cd8d98041b8b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL1: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "Create SNMP => Enable SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL2: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29d99848-9c25-4915-8ede-f834f82378bd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL2: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show enabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"3. SNMP enabled for interface\"] = jsonData.interface[0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"] === \"frinx-event-types:LINK_UP_DOWN\";",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body matches string \" + mystring] = responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "TEARDOWN: Delete LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL3: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2ffe761-507c-4e98-86ad-96a451120aee",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL3: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "NEG configure SNMP while interface does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200;"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL4: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efa21ac4-4c84-41c6-9ba8-b72ff6a99521",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL4: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "NEG Create SNMP - while no interface is present",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "SNL5: commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b182b8c-58f5-4281-a367-19e9b1f754be",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"tests[\"POST - SNL5: commit\"] = responseCode.code === 200",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( \"output\" in jsonData ) {",
													"    tests[\"Commit status complete\"] = jsonData[\"output\"][\"overall-configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    if ( \"node-config-results\" in jsonData[\"output\"] ){",
													"        tests[\"Commit status complete node name\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"] === postman.getEnvironmentVariable(\"nodeCliXr\")",
													"        tests[\"Commit status complete node status\"] = jsonData[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"] === postman.getEnvironmentVariable(\"operations_result_complete\")",
													"    }",
													"} else {",
													"        tests[\"Commit went wrong\"] = false",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled SNMP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"tests[\"1. SNMP present on interface\"] = jsonData.interface[0][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"tests[\"2. SNMP present on interface\"] = jsonData.interface[0][\"config\"][\"interface-id\"] === 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\");",
													"",
													"var mystring = '\"event-name\":\"frinx-event-types:LINK_UP_DOWN\"';",
													"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/IOSXR/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/Bundle-Ether{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}