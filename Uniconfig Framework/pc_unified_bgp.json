{
	"info": {
		"_postman_id": "b7f88a45-a077-4336-856c-4ddd2f431dbd",
		"name": "PC_Unified_BGP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR5 BGP instance CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 BGP instance CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "show deleted bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure neighbor group",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n commit\n end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previouse bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 BGP CRUD READERS",
					"description": null,
					"item": [
						{
							"name": "delete previous bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b6b7050-4803-4487-9ba0-7c9e92e0e7e2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp {{bgp_as}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure neighbor group before bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n neighbor {{ip1}}\n remote-as {{bgp_peer-as}}\n use neighbor-group {{bgp_group}}\n no shutdown\n commit\n end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fc2cb2d-9803-467d-bd7e-7c5d7a0679b3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"ip1\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"ip1\"));",
											"});",
											"//peer-group",
											"pm.test(\"Validate peer-group = \" + pm.environment.get(\"bgp_group\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_group\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as\")));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"ip1\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"ip1\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as\")));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99ec49c7-e6aa-4759-8252-bbd59182be39",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
											"setTimeout(function(){}, 10000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b408d60e-cf99-4280-be3e-9b7b8ded982c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp {{bgp_as}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "BGP instance CRUD",
					"description": null,
					"item": [
						{
							"name": "BGP instance CRUD global",
							"description": null,
							"item": [
								{
									"name": "create BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bd53e6d-8c7a-481a-a46e-e2e554e49552",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c947c098-463a-4195-b6e8-b3100dbfa30b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06838967-278c-4a35-b183-916f881491ad",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//config neighbor-address",
													"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//config prefix",
													"pm.test(\"Validate config prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "update BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76fc3497-013f-4d0e-ac8c-6c0538c79198",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75a57832-fbb9-4958-ac6b-26e3b33deb5c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"protocol\":[\n      {\n         \"name\":\"default\",\n         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n         \"config\":{\n            \"name\":\"default\",\n            \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n            \"enabled\":true\n         },\n         \"local-aggregates\":{\n            \"aggregate\":[\n               {\n                  \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n                  \"config\":{\n                     \"prefix\":\"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n                  }\n               }\n            ]\n         },\n         \"bgp\":{\n            \"global\":{\n               \"config\":{\n                  \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n                  \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n               },\n               \"afi-safis\":{\n                  \"afi-safi\":[\n                     {\n                        \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\":{\n                           \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                           \"enabled\":true\n                        }\n                     }\n                  ]\n               }\n            },\n            \"neighbors\":{\n               \"neighbor\":[\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                     },\n                     \"transport\":{\n                        \"config\":{\n                           \"local-address\":\"{{l3_vpn_bgp_global_neighbor_transport}}\"\n                        }\n                     },\n                     \"apply-policy\":{\n                        \"config\":{\n                           \"import-policy\":[\n                              \"policy1\"\n                           ]\n                        }\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  },\n                  {\n                     \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address2}}\",\n                     \"config\":{\n                        \"neighbor-address\":\"{{l3_vpn_bgp_global_neighbor_address2}}\",\n                        \"enabled\":true,\n                        \"peer-as\":\"{{l3_vpn_bgp_global_remote_as_decimal}}1\"\n                     },\n                     \"apply-policy\":{\n                        \"config\":{\n                           \"import-policy\":[\n                              \"policyExport1\"\n                           ],\n                           \"export-policy\":[\n                              \"policyExport2\"\n                           ]\n                        }\n                     },\n                     \"afi-safis\":{\n                        \"afi-safi\":[\n                           {\n                              \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                              \"config\":{\n                                 \"afi-safi-name\":\"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                 \"enabled\":true\n                              }\n                           }\n                        ]\n                     }\n                  }\n               ]\n            }\n         }\n      }\n   ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5b69ff7-18f8-4642-ad64-5d7e199d1366",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address2\"));",
													"});",
													"//config neighbor-address",
													"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address2\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(100011);",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//config neighbor-address",
													"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_neighbor_address\"));",
													"});",
													"//config peer-as",
													"pm.test(\"Validate config peer-as = \" + pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_global_remote_as_decimal\")));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"l3_vpn_bgp_as_number_decimal\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"l3_vpn_bgp_as_number_decimal\")));",
													"});",
													"//router-id",
													"pm.test(\"Validate router-id = \" + pm.environment.get(\"l3_vpn_bgp_global_router_id\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_router_id\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//prefix",
													"pm.test(\"Validate prefix = \" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_global_network_prefix\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_global_network_prefix_mask2\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
													"});",
													"//name",
													"pm.test(\"Validate name = \", function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(\"default\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"protocol\": [  \n\t   {  \n\t      \"name\":\"default\",\n\t      \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t      \"config\":{  \n\t         \"name\":\"default\",\n\t         \"identifier\":\"frinx-openconfig-policy-types:BGP\",\n\t         \"enabled\": true\n\t      },\n\t      \"local-aggregates\": {\n\t    \t\t\"aggregate\": [\n\t        \t\t{\n\t        \t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\",\n\t        \t\t\t\"config\": {\n\t        \t\t\t\t\"prefix\": \"{{l3_vpn_bgp_global_network_prefix}}/{{l3_vpn_bgp_global_network_prefix_mask2}}\"\n\t        \t\t\t}\n\t        \t\t}\n\t        \t]\n\t        },\n\t      \"bgp\":{  \n\t         \"global\":{  \n\t            \"config\":{  \n\t               \"as\":\"{{l3_vpn_bgp_as_number_decimal}}\",\n\t               \"router-id\":\"{{l3_vpn_bgp_global_router_id}}\"\n\t            },\n\t            \"afi-safis\": {\n\t                \"afi-safi\": [\n\t                 {\n\t                  \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                     \"config\": {\n\t                         \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n\t                         \"enabled\": true\n\t                     }\n\t                 }\n\t              ]\n\t            }\n\t         },\n\t         \"neighbors\": {\n                \"neighbor\": [\n                  {\n                  \"neighbor-address\"  : \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                    \"config\": {\n                      \"neighbor-address\": \"{{l3_vpn_bgp_global_neighbor_address}}\",\n                      \"enabled\": true,\n                      \"peer-as\": \"{{l3_vpn_bgp_global_remote_as_decimal}}\"\n                    }\n                  }\n                ]\n              }\n\t      }\n\t   }\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete BGP",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"default"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "BGP instance CRUD basic",
							"description": null,
							"item": [
								{
									"name": "configure bgp NATIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcfc1f27-90aa-4a0a-ad96-b79c53d2b1bb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{ip1}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{ip1}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": {{bgp_peer-as}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{bgp_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"{{bgp_process-name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show bgp process type/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "603ca61e-7760-48cc-86c4-e32167c2c9b8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"ip1\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"ip1\"));",
													"});",
													"//peer-group",
													"pm.test(\"Validate peer-group = \" + pm.environment.get(\"bgp_group\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_group\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as\")));",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"ip1\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"ip1\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as\")));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f702deb7-2bfe-43bc-be1c-e4e623ac14a8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 10000);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{bgp_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"{{bgp_process-name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete bgp configuration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "008cd308-fe0f-4a44-a0fa-647a058b0163",
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{bgp_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"{{bgp_process-name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated bgp process type/ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c76b7814-b64b-41c8-981e-a1c83aed218d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//neighbor-address",
													"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"bgp_ip2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"bgp_ip2\"));",
													"});",
													"//peer-group",
													"pm.test(\"Validate peer-group = \" + pm.environment.get(\"bgp_group2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_group2\"));",
													"});",
													"//peer-as",
													"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as2\")));",
													"});",
													"//config neighbor-address",
													"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"bgp_ip2\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"bgp_ip2\"));",
													"});",
													"//as",
													"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as\")));",
													"});",
													"//state name",
													"pm.test(\"Validate state name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"state\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
													"  pm.expect(pm.response.json()[\"protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "35d9b1d9-d25b-4dc9-b796-137c44ac96ac",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
													"setTimeout(function(){}, 10000);"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{bgp_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"{{bgp_process-name}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update bgp process",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{bgp_ip2}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{bgp_ip2}}\",\n                                \"peer-group\": \"{{bgp_group2}}\",\n                                \"peer-as\": {{bgp_peer-as2}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"{{bgp_ni-name}}",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:BGP",
												"{{bgp_process-name}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR BGP instance CRUD",
			"description": null,
			"item": [
				{
					"name": "XR BGP instance CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "delete BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f0407cb-16e8-4889-af1a-1bff5ccf556f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     route-policy policyExport1\n     end-policy\n     route-policy policyExport2\n     end-policy\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR BGP instance CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "deconfigure policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy policyExport1\n     no route-policy policyExport2\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR BGP summary READERS",
					"description": null,
					"item": [
						{
							"name": "Configure bgp NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp {{bgp}}\nbgp router-id {{router}}\naddress-family ipv4 unicast\nexit\naddress-family vpnv4 unicast\nexit\nneighbor {{neighbor}}\nremote-as {{bgp}}\nupdate-source {{test_interface}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61b725d0-8dbd-47db-9e73-148c2f6ab391",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate state as\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"state\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"pm.test(\"Validate config as\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"pm.test(\"Validate state router-id\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"state\"][\"router-id\"]).to.eql(pm.environment.get(\"router\"));",
											"});",
											"pm.test(\"Validate router-id\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"router-id\"]).to.eql(pm.environment.get(\"router\"));",
											"});",
											"pm.test(\"Validate state peer-as\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"state\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"pm.test(\"Validate peer-as\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"pm.test(\"Validate state neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"state\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"pm.test(\"Validate config  neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"pm.test(\"Validate local-address\", function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4aab10cd-32ce-4998-a1ba-18ca63522342",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_nonexisting-process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_nonexisting-process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete bgp NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{bgp}}\nno interface {{test_interface}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Classic BGP instance CRUD",
			"description": null,
			"item": [
				{
					"name": "Classic BGP instance CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "delete BGP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cca5ba00-0919-4009-8762-30764b70b2de",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Classic BGP summary READERS",
					"description": null,
					"item": [
						{
							"name": "Configure bgp NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n interface {{test_interface}}\n router bgp {{bgp}}\n bgp log-neighbor-changes\n no bgp default ipv4-unicast\n neighbor {{neighbor}} remote-as {{bgp}}\n neighbor {{neighbor}} update-source {{test_interface}}\n address-family ipv4\n network {{net3}} mask {{mask}}\n neighbor {{neighbor}} activate\n neighbor {{neighbor}} send-community both\n exit-address-family\n exit\n exit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show ip bgp summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ba2ec2a-b77d-4176-b083-a7a8f58d073d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"neighbor\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"//config neighbor-address",
											"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"neighbor\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"state\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"//config as",
											"pm.test(\"Validate config as = \" + pm.environment.get(\"bgp\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp\")));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"net3\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"net3\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											"//config prefix",
											"pm.test(\"Validate config prefix = \" + pm.environment.get(\"net3\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"), function() {",
											"  pm.expect(pm.response.json()[\"protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"net3\") + \"/\" + pm.environment.get(\"l3_vpn_bgp_network_prefix_mask2\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_nonexisting-process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_nonexisting-process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete bgp NATIVE",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp {{bgp}}\nno interface {{test_interface}}\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}