{
	"info": {
		"_postman_id": "57fff099-34e3-4625-b122-39457e59d294",
		"name": "FRINX Uniconfig Unsorted",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "FRHD-196",
					"item": [
						{
							"name": "configure route policy regex",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nas-path-set 2\n  ios-regex '^$'\nend-set\n!\nas-path-set 11\n  ios-regex '^(2914_)+$'\nend-set\n!\nas-path-set 12\n  ios-regex '_27699$',\n  ios-regex '_9506$'\nend-set\n!\nas-path-set 99\n  ios-regex '_16509$',\n  ios-regex '^(2914_)+(703_)+$'\nend-set\ncommit\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ec5a73c-37b0-44ec-a2b4-71811936a0ad",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99a27a3a-d348-4fc5-8e72-f53c862320e6",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "558ad545-6d10-4f94-ba6c-2b692f8af302",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var response = pm.response.json()[\"frinx-openconfig-routing-policy:routing-policy\"][\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"as-path-sets\"][\"as-path-set\"];",
											"var array = [];",
											"for(var i = 0; i < response.length;i++){",
											"        array[i] = response[i][\"as-path-set-name\"];",
											"    ",
											"}",
											"",
											"//as-path-set-name 12",
											"pm.test(\"Validate as-path-set-name = 12 \" , function() {",
											"    for(var i = 0; i < response.length;i++){",
											"        if(array[i] == \"12\"){",
											"        pm.expect(array[i]).to.eql(\"12\");",
											"        ",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '_27699$'\");",
											"         pm.expect(response[i][\"config\"][\"as-path-set-member\"][1]).to.eql(\"ios-regex '_9506$'\");",
											"        break;",
											"        }",
											"    }",
											"});",
											"",
											"//as-path-set-name 2",
											"pm.test(\"Validate as-path-set-name = 2 \" , function() {",
											"    for(var i = 0; i < response.length;i++){",
											"        if(array[i] == \"2\"){",
											"        pm.expect(array[i]).to.eql(\"2\");",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '^$'\");",
											"",
											"        break;",
											"        }",
											"    }",
											"});",
											"",
											"//as-path-set-name 11",
											"pm.test(\"Validate as-path-set-name = 11 \" , function() {",
											"    for(var i = 0; i < response.length;i++){",
											"        if(array[i] == \"11\"){",
											"        pm.expect(array[i]).to.eql(\"11\");",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '^(2914_)+$'\");",
											"        break;",
											"        }",
											"    }",
											"});",
											"//as-path-set-name 99",
											"pm.test(\"Validate as-path-set-name = 99 \" , function() {",
											"    for(var i = 0; i < response.length;i++){",
											"        if(array[i] == \"99\"){",
											"        pm.expect(array[i]).to.eql(\"99\");",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '_16509$'\");",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][1]).to.eql(\"ios-regex '^(2914_)+(703_)+$'\");",
											"",
											"        break;",
											"        }",
											"    }",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "deconfigure route policy regex",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno as-path-set 2\nno as-path-set 11\nno as-path-set 12\nno as-path-set 99\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "ilegal ping command",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nping 10.1.7.101 co\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87c31b79-508d-46d9-b208-1ac0d5b2dabd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f2639b3-32d0-4aa2-8d85-a83d14426dd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-202",
					"item": [
						{
							"name": "create empty interface with nonexisting node",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b60eaab8-3af7-4b0b-b253-b10bd1c758fa",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/kristina/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"kristina",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dry-run commit on nonexisting node",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ae22034-c550-42fe-8687-530c8639b2c3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status ignored\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_ignored\"));",
											"    });",
											"}",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(\"kristina\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"error-message\"]).to.eql(\"Node doesn't support dry-run or cannot be found.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_ignored\"));",
											"  }",
											"});",
											"  }",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-status fail\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"    });",
											"}",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(\"kristina\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-message\"]).to.eql(\"Node has not been mounted yet.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"no-connection\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"  }",
											"});",
											"  }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \"node\": [\"kristina\"]\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount node kristina",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/kristina",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"kristina"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87c31b79-508d-46d9-b208-1ac0d5b2dabd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f2639b3-32d0-4aa2-8d85-a83d14426dd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FI-154",
					"item": [
						{
							"name": "reconnect session by change interface ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1765ac7-305f-492e-a7cf-4c4bb54215d6",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     interface {{mgn_interface}} ipv4 address 192.168.1.229 255.255.255.0\n     commit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status reconnecting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1eca527f-718c-4a38-9160-86e2f0719930",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connected-message'] === \"Attemp: [0] Reconnecting due to Keepalive timeout\") {",
											"    tests[\"Is reconnecting\"] = jsonData.node[0]['cli-topology:connected-message'] === \"Attemp: [0] Reconnecting due to Keepalive timeout\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status reconnecting');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9bd28152-22aa-4956-b007-e8c50bf76970",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount IOS XR with new ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ff6cfde-641a-43e6-8b4e-8818e9b821c1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}1\",\n      \n      \"cli-topology:host\" : \"192.168.1.229\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr5uc status connected with new ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "831705a1-870b-4859-be29-1fa2451b7f6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr5uc status connected with new ip');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}1"
									]
								}
							},
							"response": []
						},
						{
							"name": "change ip back to original",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1765ac7-305f-492e-a7cf-4c4bb54215d6",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     interface {{mgn_interface}} ipv4 address {{xr_ip}} 255.255.255.0\n     commit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}1/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}1",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87c31b79-508d-46d9-b208-1ac0d5b2dabd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f2639b3-32d0-4aa2-8d85-a83d14426dd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-124",
					"item": [
						{
							"name": "case1",
							"item": [
								{
									"name": "check default error patterns in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67dedd90-9c1d-4da6-a38d-b6d4e33369e9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "create error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6d443d5-1280-4b1b-b1d0-09fe16f429d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                    \t\"\\\\% (?i)Invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                    \t\"\\\\% (?i)Invalid input(?-i).*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Ambigious command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"xe wildcard error\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b922c28a-67f0-4158-86bd-9191d4961af3",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 1');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d8ee786-69ec-443f-b558-6a6f2a3b409f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uniconfig available 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59dd0651-03ac-4f8d-a867-964f72916241",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uniconfig available 1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6a9889b3-07f5-43de-af08-2d9d08a1757c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check created error patterns in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e4d1538-924e-464f-a4b7-a9ed919d3945",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var found;",
													"",
													"pm.test(\"Check error pattern xr5\", function () {",
													"    found=false;",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"5.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Ambigious command(?-i).*\");",
													"            found=true;",
													"            }",
													"    }",
													"    pm.expect(found).to.be.true;",
													"});",
													"  pm.test(\"Check error pattern xr5.3.4 \", function () {",
													"    found=false;",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"5.3.4\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Invalid input(?-i).*\");",
													"            found=true;",
													"",
													"        }   ",
													"    }",
													"        pm.expect(found).to.be.true;",
													"",
													"});",
													"pm.test(\"Check error pattern xr6\" , function () {",
													"    found = false;",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"6.*\"){",
													"           var errorpattern=patterns[i][\"default-error-patterns\"][\"error-pattern\"];",
													"           console.log(errorpattern)",
													"           pm.expect(errorpattern).to.be.an('array').that.includes(\"\\\\% (?i)Invalid input(?-i).*\")",
													"           pm.expect(errorpattern).to.be.an('array').that.includes(\"\\\\% (?i)Incomplete command(?-i).*\")",
													"           found=true;",
													"",
													"       }",
													"    }",
													"   pm.expect(found).to.be.true;",
													"});",
													"   ",
													"",
													"    pm.test(\"Check error pattern classic \" + (postman.getEnvironmentVariable(\"node_id\")), function () {",
													"    found=false;",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"15.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"xe wildcard error\");",
													"            found=true;",
													"",
													"            }",
													"        }",
													"",
													"        pm.expect(found).to.be.true;",
													"",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e98f44d2-01a7-4fac-b276-8c8c3436e92b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a10e3c7c-50f0-4910-8d9f-3041a74251fb",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error-type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate rollback-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error-type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate rollback-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update existing error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "925a8535-4b6a-4284-8cf8-e9bc1839e5d6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"error\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ea372d1-71fd-464b-b564-275bbabe4aad",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ca86886-6f32-4ffe-aba7-688f2fa7f0bf",
												"type": "text/javascript",
												"exec": [
													"if(pm.environment.get(\"node_id\") === \"xr6\"){",
													"    pm.environment.set(\"error_pattern_version\",\"6.4.3\")",
													"}",
													"if(pm.environment.get(\"node_id\") === \"xr5\"){",
													"    pm.environment.set(\"error_pattern_version\",\"5.4.3\")",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{error_pattern_version}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2506b935-e1a7-4091-beec-9f7f97413d40",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b083b787-7cc1-4c0c-8f9c-bad44b0be69b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uniconfig available 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77b83a7e-4f3f-4d1b-b673-780edd7bdcda",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uniconfig available 2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "67418334-4489-451d-b03f-00dfc6ad77de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "check updated error patterns in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15ad9b5f-0d17-4d2c-8a56-92f0c5925b02",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"",
													"",
													"pm.test(\"Check error pattern xr5\", function () {",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"5.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Incomplete command(?-i).*\");",
													"            }",
													"    }",
													"        ",
													"});",
													"  pm.test(\"Check error pattern xr5.3.4 \", function () {",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"5.3.4\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Incomplete command(?-i).*\");",
													"        }   ",
													"    }",
													"});",
													"",
													"pm.test(\"Check error pattern xr6\" , function () {",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"6.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Incomplete command(?-i).*\");",
													"            }",
													"    }",
													"});",
													"   ",
													"",
													"    pm.test(\"Check error pattern classic \" + (postman.getEnvironmentVariable(\"node_id\")), function () {",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"15.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"error\");",
													"            }",
													"        }",
													"    });",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input match patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a8f76cf-fff0-41ab-9326-956605049638",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5db6e6fc-54f2-4f98-b9bd-ddea91db0ed3",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete  error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91cb2082-7080-406c-9456-f6a0196f417c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "put back default error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a901a2e-ef51-4009-8162-cb1d28318c8f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n            {\n                \"device-type\": \"ironware\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"vrp\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"nexus\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"^\\\\s+\\\\^.*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\",\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"12.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"*\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"junos\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"4.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default patterns CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67dedd90-9c1d-4da6-a38d-b6d4e33369e9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case2",
							"item": [
								{
									"name": "check default error patterns in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdd0667d-4999-4ae7-a208-16a0652671a6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "create error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4949bce0-2fb8-481f-b73b-aa87dbfc07b1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"xe wildcard error\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3494919-a4e7-4063-9a44-56cb35a7e22d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e5b9dd91-ea3b-40f9-bcc6-333a5f70197f",
												"type": "text/javascript",
												"exec": [
													"if(pm.environment.get(\"node_id\") === \"xr6\"){",
													"    pm.environment.set(\"error_pattern_version\",\"6.3.4\")",
													"}",
													"if(pm.environment.get(\"node_id\") === \"xr5\"){",
													"    pm.environment.set(\"error_pattern_version\",\"5.3.4\")",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "193a3131-9378-4e57-8905-53d6ff08793b",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 3');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c6ef17bb-0195-4edc-99af-881aeb25457a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uniconfig available 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41c9d508-0394-4e9a-a620-780e00c9a4b5",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uniconfig available 3');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "18cb3b87-9d64-4839-8750-da7a7b6b9ada",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "573fa1f1-5bb6-41b0-9e23-db34a31fcc54",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "188aee30-c53a-4094-8e38-c2672fe50ced",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error-type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate rollback-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error-type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate rollback-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update nonexisting error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "925a8535-4b6a-4284-8cf8-e9bc1839e5d6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38eec853-dcfe-41b6-94f9-e28e23102285",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 4');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6191eb6a-df65-448a-987d-056c76f00915",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uniconfig available 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95df48ec-0d7f-4c48-9920-c16c8789d650",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uniconfig available 4');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5eb26049-2b1a-409a-9048-ead3b8e8c18d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input match patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62a87f5b-e430-4d7f-a2b4-b6456bcc44a2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a1f353c-b4d2-4ae2-bc37-5fe36216ddc0",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete  error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39e957f7-bf0b-4bd7-93c2-102c52515356",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "put back default error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd0a39c8-fbab-4bc6-bc97-8ffddd9317be",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n            {\n                \"device-type\": \"ironware\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"vrp\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"nexus\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"^\\\\s+\\\\^.*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\",\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"12.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"*\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"junos\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"4.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default patterns CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67dedd90-9c1d-4da6-a38d-b6d4e33369e9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case3",
							"item": [
								{
									"name": "create error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d29020c-c8aa-4d55-8721-939f1d5d2394",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"xe wildcard error\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2f0ae38-ddac-4eca-b2a9-cebe74f8bc0a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_xe_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2f0ae38-ddac-4eca-b2a9-cebe74f8bc0a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_xe_id}}\",\n      \n      \"cli-topology:host\" : \"{{xe4_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"15.2\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 180,\n      \n      \"cli-topology:keepalive-delay\" : 45,\n      \"cli-topology:keepalive-timeout\" : 45\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_xe_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e66b8e41-9726-4f76-8030-e73acfb7b73f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 5');",
													"    }",
													"}",
													"",
													"if((postman.getEnvironmentVariable(\"node_id\")) == \"xe4\" ){",
													"    pm.test(\"Check error pattern \" + (postman.getEnvironmentVariable(\"node_id\")), function () {",
													"       if(postman.getEnvironmentVariable(\"version_device\") == \"15.*\"){",
													"            pm.expect(jsonData.node[0][\"cli-topology:connection-status\"]).to.eql(\"connected\");",
													"            pm.expect(jsonData.node[0][\"cli-topology:connected-message\"]).to.eql(\"Success\");",
													"            pm.expect(jsonData.node[0][\"cli-topology:default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"xe wildcard error\");",
													"            pm.expect(jsonData.node[0][ \"cli-topology:default-commit-error-patterns\"]).to.be.empty;",
													"            } else {",
													"                ",
													"            }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51057be8-1f13-4e6c-a1ed-0a6756735861",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_xe_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0e00fd1-b62f-49f5-8091-50d243c506a7",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90922371-2c17-40f2-afa7-c327e59b36ee",
												"exec": [
													"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
													"setTimeout(function(){}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet1I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet1I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_xe_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_xe_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "923471a1-d6b8-4ad3-93a1-01b44fc0ee12",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
													"    for(var i=0;i<jstring.length;i++){",
													"        if(jstring[i][\"node-id\"]===\"xe4\"){",
													"            pm.expect(jstring[i][\"node-id\"]).to.eql(\"xe4\");",
													"            pm.expect(jstring[i][\"error-message\"]).to.include(\"Interface: GigabitEthernet1I cannot be in OSPF router: 100, not in the same VRF\");",
													"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
													"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(\"complete\");",
													"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"fail\");",
													"        }",
													"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
													"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"complete\");",
													"        }",
													"    }",
													"});",
													"tests[\"Body matches string: xe4\"] = responseBody.has(\"xe4\");",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
													"    for(var i=0;i<jstring.length;i++){",
													"        if(jstring[i][\"node-id\"]===\"xe4\"){",
													"            pm.expect(jstring[i][\"node-id\"]).to.eql(\"xe4\");",
													"            pm.expect(jstring[i][\"error-message\"]).to.include(\"Interface: GigabitEthernet1I cannot be in OSPF router: 100, not in the same VRF\");",
													"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
													"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(\"complete\");",
													"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"fail\");",
													"        }",
													"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
													"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(\"complete\");",
													"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"complete\");",
													"        }",
													"    }",
													"});",
													"tests[\"Body matches string: xe4\"] = responseBody.has(\"xe4\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "137bb36f-37d6-4e4c-aff6-b1f0f4259932",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\",\"{{node_xe_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount xe4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4dfb397-f7fc-40ab-8c55-24feedf541f6",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_xe_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete  error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8844a099-b320-45ee-b5d2-de9aae71b1cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "put back default error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a58686b-4bb0-4b79-adda-b296df5401b4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n            {\n                \"device-type\": \"ironware\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"vrp\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"nexus\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"^\\\\s+\\\\^.*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\",\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"12.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"*\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"junos\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"4.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default patterns CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67dedd90-9c1d-4da6-a38d-b6d4e33369e9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87c31b79-508d-46d9-b208-1ac0d5b2dabd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f2639b3-32d0-4aa2-8d85-a83d14426dd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-220",
					"item": [
						{
							"name": "create error patterns",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"{{error_pattern_version}}\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n\t        \t\t\t \"\\\\% (?i)Failed to commit(?-i).*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2382c69-968d-4556-9847-2c9bf55dddf6",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected 6');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6191eb6a-df65-448a-987d-056c76f00915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd63c903-aebe-4c90-b5d0-4dde77bb28cb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available 6');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5eb26049-2b1a-409a-9048-ead3b8e8c18d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "check created error patterns in CONFDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f419821f-e345-4103-8485-dc2616a6a8ae",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
											"",
											"",
											"pm.test(\"Check error pattern xr5\", function () {",
											"    for(var i = 0 ; i < patterns.length; i++){",
											"       if(patterns[i][\"device-version\"] == \"5.*\"){",
											"            pm.expect(patterns[i][\"default-commit-error-patterns\"][\"commit-error-pattern\"][0]).to.eql(\"\\\\% (?i)Ambigious command(?-i).*\");",
											"            }",
											"    }",
											"        ",
											"});",
											"",
											"  pm.test(\"Check error pattern xr5.3.4 \", function () {",
											"    for(var i = 0 ; i < patterns.length; i++){",
											"       if(patterns[i][\"device-version\"] == \"5.3.4\"){",
											"            pm.expect(patterns[i][\"default-commit-error-patterns\"][\"commit-error-pattern\"][0]).to.eql(\"\\\\% (?i)Failed to commit(?-i).*\");",
											"        }   ",
											"    }",
											"});",
											"",
											"pm.test(\"Check error pattern xr6\" , function () {",
											"    for(var i = 0 ; i < patterns.length; i++){",
											"       if(patterns[i][\"device-version\"] == \"6.3.4\"){",
											"            pm.expect(patterns[i][\"default-commit-error-patterns\"][\"commit-error-pattern\"][0]).to.eql(\"\\\\% (?i)Failed to commit(?-i).*\");",
											"            }",
											"    }",
											"});",
											"   ",
											"",
											"    pm.test(\"Check error pattern classic \" + (postman.getEnvironmentVariable(\"node_id\")), function () {",
											"    for(var i = 0 ; i < patterns.length; i++){",
											"       if(patterns[i][\"device-version\"] == \"15.*\"){",
											"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"xe wildcard error\");",
											"            }",
											"        }",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"second-default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"second-default\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n                        \n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n                        \"prefix\": \"2010:AB8:2::/48\",\n                        \"config\": {\n                            \"prefix\": \"2010:AB8:2::/48\",\n                            \"frinx-cisco-bgp-extension:apply-policy\":[ \"policy2\" ]\n                        }\n                    }\n                ]\n            },\n            \n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": \"666\"\n                    },\n                                        \"afi-safis\": {\n                    \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"99.0.0.99\",\n                            \"config\": {\n                                \"neighbor-address\": \"99.0.0.99\",\n                                \"peer-as\": \"1\",\n                                \"auth-password\": \"frinx18$%\",\n                                \"description\": \"some text\",\n                                \"send-community\": \"BOTH\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"enabled\": false\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"Loopback97\"\n                                }\n                            },\n                            \"ebgp-multihop\": {\n                                \"config\": {\n                                    \"enabled\": true,\n                                    \"multihop-ttl\": \"1\"\n                                }\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                    \"config\": {\n                                        \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                            \"always\": true\n                                        },\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                    },\n                                    \"apply-policy\": {\n                                        \"config\": {\n                                            \"import-policy\": [ \"policy2\" ],\n                                            \"export-policy\": [ \"nexthopself\" ]\n                                        }\n                                    },\n                                     \"ipv6-unicast\": {\n                                        \"config\": {\n                                            \"send-default-route\": \"true\"\n                                        },\n                                        \"prefix-limit\": {\n                                            \"config\": {\n                                                \"max-prefixes\": \"25\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/second-default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"second-default"
									]
								}
							},
							"response": []
						},
						{
							"name": "failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9eb00cdc-aa70-4fae-9b60-7d3c528d210d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "218c38ae-dae8-42ab-879c-ce4444334c60",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "undefined",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational after failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faeebd1d-b2ea-48fc-9c12-289d662cce32",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "valid configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_create_default}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{rsvp_ni_name}}",
										"mpls",
										"signaling-protocols",
										"rsvp-te",
										"interface-attributes",
										"interface",
										"{{rsvp_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "success commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1ab13f7-b360-4a8b-a398-5a7bb6a8fc0e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "218c38ae-dae8-42ab-879c-ce4444334c60",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "undefined",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete valid configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5f31128-f0d3-4c20-a0c9-bef8221f34d7",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58a1d3af-6f1c-4101-bbbf-0f715d6744b0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{rsvp_ni_name}}",
										"mpls",
										"signaling-protocols",
										"rsvp-te",
										"interface-attributes",
										"interface",
										"{{rsvp_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1ab13f7-b360-4a8b-a398-5a7bb6a8fc0e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "218c38ae-dae8-42ab-879c-ce4444334c60",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "undefined",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete  error patterns",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67f1e4cc-d89e-4fec-a995-0cae12fef40d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						},
						{
							"name": "put back default patterns CONFDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e96a8865-8cca-4d9c-b22d-2351e557e07d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n            {\n                \"device-type\": \"ironware\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"vrp\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"nexus\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"^\\\\s+\\\\^.*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\",\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"12.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"*\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"junos\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"4.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						},
						{
							"name": "check default patterns CONFDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67dedd90-9c1d-4da6-a38d-b6d4e33369e9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
											"var save;",
											"//ironware",
											"pm.test(\"Check existing pattern \", function () {",
											"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-207",
					"item": [
						{
							"name": "unmount XR5 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b7387d9-5833-4d52-b39a-972788e0a439",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount IOS XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc95b895-6ae8-4224-9d25-4861d13f8f36",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_xe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount XR5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr5uc status connected XR5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe70a92e-33e1-48ff-be2f-708f6b744c74",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr5uc status connected XR5');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80c6b0be-2c7d-44c2-8df5-38b44c5f7322",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_xe_id}}\",\n      \n      \"cli-topology:host\" : \"{{xe4_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"15.2\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 180,\n      \n      \"cli-topology:keepalive-delay\" : 45,\n      \"cli-topology:keepalive-timeout\" : 45\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_xe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xe uc status connected XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8950a132-f049-4ecf-9f17-4f037d93dc80",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xe uc status connected XE');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6177712c-ce12-4d3f-a3cd-337e4d20e17e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_xe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "put config on XR5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b60eaab8-3af7-4b0b-b253-b10bd1c758fa",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": true,\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n\t\t\t\t\"description\":\"AS15169-OS-3-BE16-2\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "dry run commit on XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb0bb00e-2655-4418-baa1-b61812c9bc25",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"}",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - configuraton status complete\", function() {",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - configuraton empty\", function() {",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.eql(\"\");",
											"    });",
											"}",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_xe_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb7095c9-b3fe-4161-96eb-8b9b6276d656",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_xe_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87c31b79-508d-46d9-b208-1ac0d5b2dabd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f2639b3-32d0-4aa2-8d85-a83d14426dd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-209",
					"item": [
						{
							"name": "set abnormal value min links",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"   pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"interface\": [\n\t{\"name\": \"ae4091\",\n\t\"config\": \n\t\t{\"type\": \"iana-if-type:ieee8023adLag\",\n\t\t\"enabled\": true,\n\t\t\"mtu\": 1500,\n\t\t\"description\": \"TEST\",\n\t\t\"name\": \"ae4091\"},\n\t\t\"frinx-openconfig-if-aggregate:aggregation\": {\n\t\t\t\"config\": {\n\t\t\t\t\"min-links\": 65\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/ae4091",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"ae4091"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c95ad388-0b4d-4214-8780-0cf1b5969043",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate error-type\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");  ",
											"}); ",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-message\"]).to.include(\"Unexpected content in response of rpc\");",
											"  ",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate error-type\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");  ",
											"}); ",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-message\"]).to.include(\"Unexpected content in response of rpc\");",
											"  ",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show interafce",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c1673b3-75a3-4c59-948c-0ac6da77e7c8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"ae4091\");",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"ae4091\");",
											"});",
											"",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(1500);",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"TEST\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/ae4091",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"ae4091"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FI-228",
					"item": [
						{
							"name": "check blank space not failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n     set interfaces ge-0/0/0 description check-blank-space\n     commit\n     exit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove configuration used blank space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n     delete interfaces ge-0/0/0 description\n     commit\n     exit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-433",
					"item": [
						{
							"name": "configure device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ntelnet vrf default ipv4 server max-servers 10\nlacp system mac 0123.0123.0123\ncall-home\n service active\n contact smart-licensing\n profile CiscoTAC-1\n  active\n  destination transport-method http\n !\n!\nipv6 access-list D300000000_Ipv6_out\n 10 permit udp any any eq 3784\n!\nipv4 access-list BFD\n 10 permit udp any any eq 3784\n!\nclass-map match-any class_qos_group\n match qos-group 4 60 \n end-class-map\n! \nclass-map match-any class_qos_group2\n match qos-group 4 50 \n end-class-map\n! \npolicy-map policy1\n class class_qos_group\n  set dscp af31\n ! \n class class-default\n !        \n end-policy-map\n! \npolicy-map policy2\n class class_qos_group2\n  set dscp af32\n ! \n class class-default\n ! \n end-policy-map\n! \ninterface Bundle-Ether60\n!\ninterface Bundle-Ether60.70\n description desc_test\n vrf THU\n ipv4 address 10.1.2.3 255.255.255.248\n load-interval 30\n encapsulation dot1q 70\n logging events link-status\n carrier-delay up 500\n!\ninterface Bundle-Ether200\n description TB-002XRV-02-aaaaaaa\n!\ninterface Bundle-Ether200.1\n description 200.1\n!\ninterface Bundle-Ether3133\n!\nexit\n!\nprefix-set CUST_D300000000_in\nend-set\n!\nprefix-set CUST_D300000000_BH_in\n  2400:a140::/32 eq 128\nend-set\n!\nprefix-set CUST_IPv6_D300000000_in\nend-set\n!\nas-path-set 100\n  ios-regex '^(23816_)+$',\n  ios-regex '^(23816_)'\nend-set\n!\ncommunity-set CUST-LP-40\n  no-export\nend-set\n!\ncommunity-set CUST-LP-700\n  no-export\nend-set\n!\ncommunity-set DDosS-CUST-BH\n  17676:1088\nend-set\n!\nroute-policy TESTTEST\n  set med 70\n  pass\nend-policy\n!\nroute-policy ZR-SET-MED\n  pass\nend-policy\n!\nroute-policy SET-COMMUNITY-THU\n  done\nend-policy\n!\nroute-policy CUST_D300000001_in\n  if as-path length ge 75 then\n    drop\n  elseif not as-path in 100 then\n    set med +50\n    set next-hop 2001::\n    pass\n  elseif community matches-any DDosS-CUST-BH and destination in CUST_D300000000_BH_in then\n    set community (17676:2089)\n    set next-hop 169.254.255.254\n  elseif destination in CUST_D300000000_in then\n    set med 100\n  elseif community matches-any CUST-LP-40 then\n    set local-preference 40\n    set community (17676:330) additive\n  elseif community matches-any CUST-LP-700 then\n    set local-preference 700\n    set community (17676:330) additive\n  else\n    set local-preference 1200\n    set community (17676:330) additive\n  endif\nend-policy\n!\nroute-policy POLICY-PEER-GROUP-IN\n  pass\nend-policy\n!\nroute-policy ISIS-REDISTRIBUTE-001\n  done\nend-policy\n!\nroute-policy ISIS-REDISTRIBUTE-002\n  done\nend-policy\n!\nroute-policy POLICY-PEER-GROUP-OUT\n  pass\nend-policy\n!\nroute-policy POLICY-PEER-GROUP-IN-UPDATE\n  pass\nend-policy\n!\nroute-policy POLICY-PEER-GROUP-OUT-UPDATE\n  pass\nend-policy\n!\nroute-policy policy_CUST_BGP-Default_Originate\n  drop\nend-policy\n!\nrouter isis 200\n!\nrouter isis 300\n!\nrouter isis 400\n address-family ipv6 unicast\n !\n!\nrouter ospf 100\n vrf THU\n  max-metric router-lsa include-stub summary-lsa external-lsa\n !\n!\nrouter ospf default\n!\nrouter ospfv3 default\n!\nrouter bgp 20101 instance aaa\n neighbor 2400:2020:40:ff::1\n  remote-as 17676\n  shutdown\n !\n vrf iups\n !\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-441",
					"item": [
						{
							"name": "retransmit interval configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n!\nrouter isis 300\n interface Bundle-Ether3133\n  retransmit-interval 200\n !\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a27ca57e-4f04-439e-8dab-047d160fb417",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete retransmit interval",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:ISIS/300/isis/interfaces/interface/Bundle-Ether3133/timers/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:ISIS",
										"300",
										"isis",
										"interfaces",
										"interface",
										"Bundle-Ether3133",
										"timers",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3875fbc-a1ea-4a47-b953-8aeab8b5a7f0",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check removed retransmit interval unified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:neighbor\": [\n        {\n            \"config\": {\n                \"auth-password\": \"Encrypted[11323A2543400E5B02782E76]\",\n                \"description\": \"TESTUPDATE\",\n                \"enabled\": true,\n                \"neighbor-address\": \"10.1.1.1\",\n                \"peer-as\": 65534\n            },\n            \"neighbor-address\": \"10.1.1.1\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:ISIS/300/isis/interfaces/interface/Bundle-Ether3133/timers/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:ISIS",
										"300",
										"isis",
										"interfaces",
										"interface",
										"Bundle-Ether3133",
										"timers",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-453",
					"item": [
						{
							"name": "configure bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 65535\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"10.1.1.1\",\n                            \"config\": {\n                                \"enabled\": true,\n                                \"auth-password\": \"Encrypted[104B0F1C121103]\",\n                                \"neighbor-address\": \"10.1.1.1\",\n                                \"peer-as\": 65534,\n                                \"description\": \"TESTUPDATE\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"GigabitEthernet0/0/0/0\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3875fbc-a1ea-4a47-b953-8aeab8b5a7f0",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove description and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:neighbor\": [\n        {\n            \"neighbor-address\": \"10.1.1.1\",\n            \"config\": {\n                \"enabled\": true,\n                \"neighbor-address\": \"10.1.1.1\",\n                \"peer-as\": 65534\n            },\n            \"afi-safis\": {\n                \"afi-safi\": [\n                    {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\": {\n                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                        }\n                    }\n                ]\n            },\n            \"transport\": {\n                \"config\": {\n                    \"local-address\": \"GigabitEthernet0/0/0/0\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/10.1.1.1/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"10.1.1.1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3875fbc-a1ea-4a47-b953-8aeab8b5a7f0",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check removed description and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = 10.1.1.1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"neighbor-address\"]).to.eql(\"10.1.1.1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = 10.1.1.1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"10.1.1.1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = 65534\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(\"65534\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(\"true\"));",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"",
											"//removed description",
											"pm.test(\"Validate removed description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"]).to.not.have.property(\"description\");",
											"});",
											"//removed password",
											"pm.test(\"Validate removed password\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"]).to.not.have.property(\"auth-password\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:neighbor\": [\n        {\n            \"config\": {\n                \"auth-password\": \"Encrypted[11323A2543400E5B02782E76]\",\n                \"description\": \"TESTUPDATE\",\n                \"enabled\": true,\n                \"neighbor-address\": \"10.1.1.1\",\n                \"peer-as\": 65534\n            },\n            \"neighbor-address\": \"10.1.1.1\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/10.1.1.1/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"10.1.1.1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "check removed description and password unified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = 10.1.1.1\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"10.1.1.1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = 10.1.1.1\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"10.1.1.1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = 65534\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(\"65534\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = true\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(\"true\"));",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"",
											"//removed description",
											"pm.test(\"Validate removed description\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"]).to.not.have.property(\"description\");",
											"});",
											"//removed password",
											"pm.test(\"Validate removed password\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"]).to.not.have.property(\"auth-password\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:neighbor\": [\n        {\n            \"config\": {\n                \"auth-password\": \"Encrypted[11323A2543400E5B02782E76]\",\n                \"description\": \"TESTUPDATE\",\n                \"enabled\": true,\n                \"neighbor-address\": \"10.1.1.1\",\n                \"peer-as\": 65534\n            },\n            \"neighbor-address\": \"10.1.1.1\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/10.1.1.1/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"10.1.1.1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-417",
					"item": [
						{
							"name": "configure device 6.6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ninterface Bundle-Ether60\n!\ninterface Bundle-Ether60.70\n description desc_test\n encapsulation dot1q 70\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount device 6.2 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec3403a2-4086-459a-9f27-578e60aa530c",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"xr62\",\n      \"netconf-node-topology:host\": \"192.168.1.216\",\n      \"netconf-node-topology:port\": 830,\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"cisco\",\n      \"netconf-node-topology:password\": \"cisco\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "check netconf connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check netconf connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount device 6.2 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b65facd5-2413-46cc-b457-bcfda6beb73b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"xr62\",\n      \n      \"cli-topology:host\" : \"192.168.1.216\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "check cli connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "42f77c6d-a0cf-475e-8676-3df0e0f4bb15",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check cli connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure device 6.2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ninterface Bundle-Ether60\n!\ninterface Bundle-Ether60.70\n description desc_test\n encapsulation dot1q 70\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/xr62/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"xr62",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-result\" in pm.response.json()[\"output\"][\"node-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\",\"xr62\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore 6.2 configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e46c4a61-b0e5-4116-a51b-0c0b98d3b0cc",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"xr62",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount device 6.2 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77c5f64c-ae8b-4def-894f-0c7e4c96cf59",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount device 6.2 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c33d274d-6257-4577-be58-06a2430f678f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-458",
					"item": [
						{
							"name": "configure with embedded sections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n ipv4 access-list 190\n 10 deny ipv4 any any\n!\nipv4 access-list Ingress_Acl\n 10 deny ipv4 any any\n!\ninterface Bundle-Ether103\n description cede\n!\ninterface Bundle-Ether103.100\n description TOOL_TEST\n service-policy input REWRITE_TOS2_in\n service-policy output 100M-Policing-BE\n ipv4 address 1.1.1.1 255.255.255.252\n arp timeout 300\n shutdown\n load-interval 30\n ethernet cfm\n  mep domain DML3 service 500 mep-id 1\n   cos 6\n  !\n !\n encapsulation dot1q 100\n ipv4 access-group Ingress_Acl ingress\n ipv4 access-group 190 egress\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd21eb05-cbc5-4900-a894-ed6984e9134a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "check acl list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//set-name",
											"pm.test(\"Validate set-name = Ingress_Acl\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"Ingress_Acl\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//set-name",
											"pm.test(\"Validate set-name = Ingress_Acl\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(\"Ingress_Acl\");",
											"});",
											"",
											"//id",
											"pm.test(\"Validate id = Bundle-Ether103.100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"]).to.eql(\"Bundle-Ether103.100\");",
											"});",
											"",
											"//id",
											"pm.test(\"Validate id = Bundle-Ether103.100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(\"Bundle-Ether103.100\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//set-name",
											"pm.test(\"Validate set-name = 190\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"190\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//set-name",
											"pm.test(\"Validate set-name = 190\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(\"190\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether103.100",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"interfaces",
										"interface",
										"Bundle-Ether103.100"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore 6.6 configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e46c4a61-b0e5-4116-a51b-0c0b98d3b0cc",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-455",
					"item": [
						{
							"name": "configure acl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset chassis fpc 0 lite-mode\nset chassis auto-image-upgrade\nset protocols ospf overload\nset protocols ospf area 192.168.10.1 interface ge-0/0/1.0\nset firewall family inet filter management-filter term APTN-VS from source-address 10.10.33.0/24\nset firewall family inet filter management-filter term APTN-VS from destination-port 22\nset firewall family inet filter management-filter term APTN-VS then accept\ncommit\nexit\"\n  }\n}\n\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd21eb05-cbc5-4900-a894-ed6984e9134a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "check acl parsing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//frinx-acl-extension:term-name",
											"pm.test(\"Validate frinx-acl-extension:term-name = APTN-VS\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"frinx-acl-extension:term-name\"]).to.eql(\"APTN-VS\");",
											"});",
											"",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(1);",
											"});",
											"",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(1);",
											"});",
											"",
											"//destination-address",
											"pm.test(\"Validate destination-address = 0.0.0.0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"",
											"//source-address",
											"pm.test(\"Validate source-address = 10.10.33.0/24\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"10.10.33.0/24\");",
											"});",
											"",
											"//destination-port",
											"pm.test(\"Validate destination-port = 22\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(22);",
											"});",
											"",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = management-filter\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"management-filter\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = management-filter\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"management-filter\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config junos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc7469df-e2dc-4dce-a857-80daf834273e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"root# load override \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UNI-678",
					"item": [
						{
							"name": "configure device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     ipv6 access-list Protect-Router-IPV6-CI111-LAN-IN\n permit tcp host 2001:111:111:111::2 host 2001:111:111:111::1 eq bgp sequence 10\n   permit tcp host 2001:111:111:111::2 eq bgp host 2001:111:111:111::1 sequence 20\n   deny ipv6 any any fragments sequence 30\n   permit icmp any FF02::1:FF00:0/104 nd-ns sequence 40\n   permit icmp host :: host FF02::1 nd-ns sequence 50\n   permit icmp host FF02::1 host FF02::1 nd-ns sequence 60\n   permit icmp host FF02::1 host FF02::1 nd-na sequence 70\n   permit icmp any any echo-request sequence 80\n   permit icmp any any echo-reply sequence 90\n   permit icmp any any packet-too-big sequence 100\n   permit icmp any any time-exceeded sequence 110\n   deny udp any any eq 0 sequence 120\n   deny tcp any any eq 0 sequence 130\n   deny sctp any any eq 0 sequence 140\n   deny ipv6 any host 2001:111:111:111::1 sequence 150\n   deny ipv6 any host 2001:11:11:11::3 sequence 160\n   permit ipv6 any any sequence 170\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37bbe255-871e-4b42-8030-89e68e85ffcd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"configure replace nvram:startup-config\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Rollback Done\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure replace nvram:startup-config\nyes\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-443",
					"item": [
						{
							"name": "configure description and alias interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset interfaces ae2192 unit 0 description kristina\nset interfaces ae2192 unit 0 alias kristina\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for output timer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12ee97b1-18c6-4ffe-a48d-700498273ad7",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"show configuration interfaces ae2192 unit 0 | display set\",\n     \"wait-for-output-timer\" : 2\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37bbe255-871e-4b42-8030-89e68e85ffcd",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"root# load override \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-347",
					"item": [
						{
							"name": "set enabled interface without description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"   pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"frinx-openconfig-interfaces:interface\": [\n   {\n     \"name\": \"{{eth_intf-id}}\",\n     \"config\": {\n       \"name\": \"{{eth_intf-id}}\",\n       \"type\": \"iana-if-type:ethernetCsmacd\",\n       \"enabled\": true,\n       \"frinx-openconfig-vlan:tpid\": \"frinx-openconfig-vlan-types:TPID_0X8100\"\n     }\n   }\n ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c95ad388-0b4d-4214-8780-0cf1b5969043",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show enabled interface without description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c1673b3-75a3-4c59-948c-0ac6da77e7c8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate vlan\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"frinx-openconfig-vlan:tpid\"]).to.eql(\"frinx-openconfig-vlan-types:TPID_0X8100\");",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "disable interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"   pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"frinx-openconfig-interfaces:interface\": [\n   {\n     \"name\": \"{{eth_intf-id}}\",\n     \"config\": {\n       \"name\": \"{{eth_intf-id}}\",\n       \"type\": \"iana-if-type:ethernetCsmacd\",\n       \"enabled\": false\n     }\n   }\n ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c95ad388-0b4d-4214-8780-0cf1b5969043",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show disabled interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c1673b3-75a3-4c59-948c-0ac6da77e7c8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-276",
					"item": [
						{
							"name": "configure bgp ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ecc9113-3ea2-4344-ab68-dceb1706a4a1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Configured data\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"router bgp 17676\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"address-family ipv6 unicast\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"bgp attribute-download\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"neighbor 10.64.2.100\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"remote-as 17676\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"description TB100-007RR-02\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"update-source Loopback0\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"address-family ipv6 labeled-unicast\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.not.contain(\"Invalid input detected at '^' marker\");",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"conf t\nrouter bgp 17676\n address-family ipv6 unicast\n  bgp attribute-download\n !\n neighbor 10.64.2.100\n  remote-as 17676\n  description TB100-007RR-02\n  update-source Loopback0\n  address-family ipv6 labeled-unicast\n  !\n !\n!\ncommit\nend\n\t\"}\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mount IOS XR again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c872800-58d3-4e56-bd8c-88d47bfd7bcd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check xr5uc status connected after unsupported command",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4695df12-1878-47ef-a56c-98055e57fb99",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check xr5uc status connected after unsupported command');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check xr5uc unified mount point exists after unsupported command",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "846959ab-9d24-480b-b0a8-e942e82acb9a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check xr5uc unified mount point exists after unsupported command');",
											"    }",
											"}",
											"if(pm.response.code == 500){",
											"        tests[\"Failed to mount \"] = false",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check xr5uc uniconfig available after unsupported command",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d3ed607-c06d-4465-b5da-0ad043b2f496",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check xr5uc uniconfig available after unsupported command');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "153ff007-f9c3-4a4f-ad15-d274741182d9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete configuration bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3575e4c4-4eed-485e-a5e3-95f35fb10243",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Configured data\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"no router bgp 17676\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.not.contain(\"Invalid input detected at '^' marker\");",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"conf t\nno router bgp 17676\ncommit\nend\n\t\"}\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted configuration bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34536cd5-5c54-4978-8d3b-ab124c37fe17",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Deleted data check\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.not.contain(\"router bgp 17676\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config\n\t\"}\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-257",
					"item": [
						{
							"name": "case1",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2ad16a3-b3cd-4e5e-891f-e1b60dac9920",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c872800-58d3-4e56-bd8c-88d47bfd7bcd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4616747-b7fd-415d-ab37-a9325c6d4b3b",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d64c555-84f9-41b4-b962-0389df8642ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebc32e14-369b-4f5a-ace8-3bb69aad234c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fea41a8-3af3-4dfe-97d5-c9c6e0d6b15f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": true\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2963169-18fc-4fba-8e2e-6ce19ee3342f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e4e7f66-dbef-42d5-96ef-993618b89806",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"mpls traffic-eng\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface GigabitEthernet0/0/0/0\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "418f1b04-c6e5-4ed1-8a47-c3aafe118fb6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "748810e9-2d90-4e2d-9006-49af80f4d453",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65086552-c228-41e4-ba0b-20033a869494",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "412f7c8c-4e7f-4f9b-91ed-cf40ff2103cf",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show empty mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "383f22a2-01fb-4ca6-8284-4ca5dfe12969",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29c74cef-c70f-4a8b-a27d-2053cfefcf65",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a7f708b-aeb8-4494-b107-98eca28ea9eb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6828ca09-293a-497b-b557-e1999d5c6513",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case2",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2ad16a3-b3cd-4e5e-891f-e1b60dac9920",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c872800-58d3-4e56-bd8c-88d47bfd7bcd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63065e8e-505c-4ff4-9800-7dac14a30243",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d64c555-84f9-41b4-b962-0389df8642ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "759e495e-6bbe-431f-a3b3-1f2231f02dbb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4390b45-43e8-4f76-8a64-9fb4652e4ab6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": true\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2963169-18fc-4fba-8e2e-6ce19ee3342f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e4e7f66-dbef-42d5-96ef-993618b89806",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"mpls traffic-eng\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface GigabitEthernet0/0/0/0\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "418f1b04-c6e5-4ed1-8a47-c3aafe118fb6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "748810e9-2d90-4e2d-9006-49af80f4d453",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77fb78b0-87b6-40e8-b9d6-121693cea594",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": true\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2e85169-2129-4976-b74a-a788294e8cb3",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5aa863d-1ab2-41a5-be68-4f649f4a4a38",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a9010ba-df62-4e07-bf08-c5755258cb65",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65086552-c228-41e4-ba0b-20033a869494",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9259c3e-ba13-4b26-a7c4-a7f2395ec079",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "383f22a2-01fb-4ca6-8284-4ca5dfe12969",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29c74cef-c70f-4a8b-a27d-2053cfefcf65",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a7f708b-aeb8-4494-b107-98eca28ea9eb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e2ad0fa-d903-4c13-bfa6-07feb9aa03d5",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case3",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a92a771-8242-4e23-a04e-6cdde6f62a2a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c872800-58d3-4e56-bd8c-88d47bfd7bcd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7340463-3b75-45b8-a731-712e6b109dd2",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case3');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d64c555-84f9-41b4-b962-0389df8642ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e93d1d63-cd39-485b-a258-5a5eb108073c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put invalid mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "069fc519-d829-4e60-b3a1-49157564f199",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": false\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54f906a7-1027-40b3-bb6b-1eb6c9e53736",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdb06bda-ce0f-43bb-b095-082fb244a1e5",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a9010ba-df62-4e07-bf08-c5755258cb65",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6058e15-6bbe-485c-a030-d283181d9da2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d975f806-9a40-4a8f-b7d2-77e7383d572d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7867f8ff-f5fe-44ed-84e2-1e7d20c194da",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65086552-c228-41e4-ba0b-20033a869494",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8472b58f-75e8-4ff2-8395-86738ab2106e",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "383f22a2-01fb-4ca6-8284-4ca5dfe12969",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29c74cef-c70f-4a8b-a27d-2053cfefcf65",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a7f708b-aeb8-4494-b107-98eca28ea9eb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f7038f8-cbd7-470e-abcb-5bb26fbabb3a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"description": "putting interface with enable false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b7ae63b7-6d0d-49bf-823e-070d9d6de5ea",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "acc89b84-a763-4fd0-8794-6976de8ae7ba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case4",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2ad16a3-b3cd-4e5e-891f-e1b60dac9920",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c872800-58d3-4e56-bd8c-88d47bfd7bcd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cecee1c6-b2bc-4dbc-9cd1-961ab3cf74cc",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case4');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d64c555-84f9-41b4-b962-0389df8642ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d5412c9-ad0c-4251-8ae6-a8667ea6fc87",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put invalid mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff934eea-491e-4b50-8595-464f004b49a6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"interface\": [\n\t\t{\n\t\t\"interface-id\": \"GigabitEthernet0/0/0/0\",\n\t\t\"config\": {\n\t\t\t\"interface-id\": \"GigabitEthernet0/0/0/0\"\n\t\t\t\n\t\t\t}\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/frinx-openconfig-network-instance:mpls/frinx-openconfig-network-instance:te-interface-attributes/frinx-openconfig-network-instance:interface/GigabitEthernet0%2f0%2f0%2f0",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"frinx-openconfig-network-instance:mpls",
												"frinx-openconfig-network-instance:te-interface-attributes",
												"frinx-openconfig-network-instance:interface",
												"GigabitEthernet0%2f0%2f0%2f0"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e67f13ea-f81f-4c7d-a151-58f7a9583801",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3897a30f-ec01-450b-9080-84ea4c3503fb",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a9010ba-df62-4e07-bf08-c5755258cb65",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c774af5-06ed-41e5-a0df-4fd2e27dd8ff",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08aa3b3e-af8e-4104-a9e7-9a851dba5707",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "351d55aa-00da-4aea-b288-03c25a7a73e7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65086552-c228-41e4-ba0b-20033a869494",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8451802f-bc7d-4125-abd3-1c9292d51a7d",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "383f22a2-01fb-4ca6-8284-4ca5dfe12969",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29c74cef-c70f-4a8b-a27d-2053cfefcf65",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a7f708b-aeb8-4494-b107-98eca28ea9eb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f7038f8-cbd7-470e-abcb-5bb26fbabb3a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"description": "putting interface with enable false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b7ae63b7-6d0d-49bf-823e-070d9d6de5ea",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "acc89b84-a763-4fd0-8794-6976de8ae7ba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case5",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2ad16a3-b3cd-4e5e-891f-e1b60dac9920",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c872800-58d3-4e56-bd8c-88d47bfd7bcd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2522d192-b1d8-41c7-9604-9a2825f5d0d2",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case5');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d64c555-84f9-41b4-b962-0389df8642ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22f71bb2-39b1-4919-a523-8b8fae6d6c90",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "270f0eff-3c6a-4229-a984-5320cd1b4087",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": true\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2963169-18fc-4fba-8e2e-6ce19ee3342f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e4e7f66-dbef-42d5-96ef-993618b89806",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"mpls traffic-eng\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface GigabitEthernet0/0/0/0\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "748810e9-2d90-4e2d-9006-49af80f4d453",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "418f1b04-c6e5-4ed1-8a47-c3aafe118fb6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update mpls-te to false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83d2aef9-64e0-46ce-b9cc-5b9f734c2e19",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": false\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04e91c56-6f50-442c-8431-b151555ffe3d",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9e8db9e-0c4a-4f66-96d1-5bb03d457642",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a9010ba-df62-4e07-bf08-c5755258cb65",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e4e7f66-dbef-42d5-96ef-993618b89806",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"mpls traffic-eng\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface GigabitEthernet0/0/0/0\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "341c2067-3a62-48fc-8a29-6bbbffd3d3bb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "418f1b04-c6e5-4ed1-8a47-c3aafe118fb6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65086552-c228-41e4-ba0b-20033a869494",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f4f38b0-7809-4744-81ff-bc1f15f1fa34",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "383f22a2-01fb-4ca6-8284-4ca5dfe12969",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29c74cef-c70f-4a8b-a27d-2053cfefcf65",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a7f708b-aeb8-4494-b107-98eca28ea9eb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "put false attributes mpls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c25daa0b-57f9-4b8c-bd94-d8a4ada47bca",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": false\n            }\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d92fb97d-c436-4648-bb93-6620ce7383dc",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e74ea4d-27d6-48d8-b399-7a1ea0ede60c",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a9010ba-df62-4e07-bf08-c5755258cb65",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5bf98f8-9c19-4456-9e09-d438f54611bc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b4b7235-b4f5-46ec-9a18-7efa1eaa6eff",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.false;",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5800c214-1457-452a-a52d-d33c6deff4e4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.false;",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65086552-c228-41e4-ba0b-20033a869494",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f4f38b0-7809-4744-81ff-bc1f15f1fa34",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "383f22a2-01fb-4ca6-8284-4ca5dfe12969",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29c74cef-c70f-4a8b-a27d-2053cfefcf65",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a7f708b-aeb8-4494-b107-98eca28ea9eb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f7038f8-cbd7-470e-abcb-5bb26fbabb3a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"description": "case1 + change enable to false\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a1d7b527-0c01-4f2f-b8ca-2d427bdb44b6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2980e1c9-6927-42e0-a223-901c4d9c02d2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-439",
					"item": [
						{
							"name": "configure invalid interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdfdf2a9-0dc5-4628-91af-49eb08a40056",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"frinx-openconfig-interfaces:interface\": [\n     {\n       \"name\": \"Bundle-Ether65535aaa\",\n       \"config\": {\n         \"name\": \"Bundle-Ether65535aaa\",\n         \"enabled\": true,\n         \"description\": \"aaa\",\n         \"type\": \"iana-if-type:ieee8023adLag\"\n       }\n     }\n   ]\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether65535aaa",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether65535aaa"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7008e362-d608-4a4f-9983-4c207b97e48a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"            pm.expect(jstring[i][\"error-message\"]).to.include(\"YANG framework' detected the 'fatal' condition 'Invalid value\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"            pm.expect(jstring[i][\"error-message\"]).to.include(\"YANG framework' detected the 'fatal' condition 'Invalid value\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"{{node_id}}\"]\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit failed again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7008e362-d608-4a4f-9983-4c207b97e48a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"           // UNI-748",
											"          //  pm.expect(jstring[i][\"error-type\"]).to.eql(\"This operation is not supported\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"      //       UNI-748",
											"      //      pm.expect(jstring[i][\"error-type\"]).to.eql(\"This operation is not supported\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"{{node_id}}\"]\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational after failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "faeebd1d-b2ea-48fc-9c12-289d662cce32",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-442",
					"item": [
						{
							"name": "unmount 6.6.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32632326-c9a8-4e7a-b5d7-bc659497ebbb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/661",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"661"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount 6.2.3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72cdee7d-93ee-4f52-9249-e25795ef5ecf",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/623",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"623"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount 6.2.3 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec3403a2-4086-459a-9f27-578e60aa530c",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"623\",\n      \"netconf-node-topology:host\": \"192.168.1.216\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"cisco\",\n      \"netconf-node-topology:password\": \"cisco\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/623",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"623"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 6.2.3 connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check 6.2.3 connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/623",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"623"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 6.2.3 unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    pm.test(\"Interface container exists\", function () {",
											"        pm.expect(pm.response.json()).to.have.any.keys('frinx-openconfig-interfaces:interfaces'); ",
											"    });",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check 6.2.3 unified point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/623/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"623",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount 6.6.1 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ec3403a2-4086-459a-9f27-578e60aa530c",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"661\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/661",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"661"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 6.6.1 connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check 6.6.1 connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/661",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"661"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 6.6.1 unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    ",
											"    pm.test(\"Interface container exists\", function () {",
											"         pm.expect(pm.response.json()).to.have.any.keys('frinx-openconfig-interfaces:interfaces'); ",
											"    });",
											"",
											"",
											"",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check 6.6.1 unified point exists');",
											"    }",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/661/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"661",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount 6.2.3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72cdee7d-93ee-4f52-9249-e25795ef5ecf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/623",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"623"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount 6.6.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32632326-c9a8-4e7a-b5d7-bc659497ebbb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/661",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"661"
									]
								}
							},
							"response": []
						}
					],
					"description": "Mounting devices IOS XR 6.2.3 and 6.6.1 through netconf",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "952a7154-9184-4236-8011-7c74db16f927",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aad68625-a172-410b-a557-a694c565df14",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-486",
					"item": [
						{
							"name": "configure service policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether101\ninterface Bundle-Ether101.1999\nservice-policy input AAA\nservice-policy output BBB\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81c97e72-24fb-42a0-92ae-08bc9d2118c5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "update output policy BBB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"frinx-openconfig-network-instance:interface\": [\n    {\n      \"interface-id\": \"Bundle-Ether101.1999\",\n      \"config\": {\n        \"interface-id\": \"Bundle-Ether101.1999\",\n        \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"AAA\",\n        \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"CCC\"\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether101.1999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether101.1999"
									]
								}
							},
							"response": []
						},
						{
							"name": "dry run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29c941d5-e065-4075-986f-4ae694468803",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no service-policy output BBB', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no service-policy output BBB\");",
											"    });",
											"    pm.test('dryrun - not contains no service-policy input', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.include(\"no service-policy input\");",
											"    });",
											"    pm.test('dryrun - not contains service-policy input AAA', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.include(\"service-policy input AAA\");",
											"    });",
											"}",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no service-policy output BBB', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.include(\"no service-policy output BBB\");",
											"    });",
											"    pm.test('dryrun - not contains no service-policy input', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.include(\"no service-policy input\");",
											"    });",
											"    pm.test('dryrun - not contains service-policy input AAA', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.include(\"service-policy input AAA\");",
											"    });",
											"}",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c95ad388-0b4d-4214-8780-0cf1b5969043",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show service policy output",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c1673b3-75a3-4c59-948c-0ac6da77e7c8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"Bundle-Ether101.1999\");",
											"});",
											"pm.test(\"Validate config interface name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"Bundle-Ether101.1999\");",
											"});",
											"",
											"pm.test(\"Validate input policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"AAA\");",
											"});",
											"pm.test(\"Validate output policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"CCC\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether101.1999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether101.1999"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure service policy again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether101\ninterface Bundle-Ether101.1999\nservice-policy input AAA\nservice-policy output BBB\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "81c97e72-24fb-42a0-92ae-08bc9d2118c5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "update input policy AAA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"frinx-openconfig-network-instance:interface\": [\n    {\n      \"interface-id\": \"Bundle-Ether101.1999\",\n      \"config\": {\n        \"interface-id\": \"Bundle-Ether101.1999\",\n        \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"CCC\",\n        \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"BBB\"\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether101.1999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether101.1999"
									]
								}
							},
							"response": []
						},
						{
							"name": "dry run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29c941d5-e065-4075-986f-4ae694468803",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no service-policy input AAA', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no service-policy input AAA\");",
											"    });",
											"    pm.test('dryrun - not contains no service-policy output', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.include(\"no service-policy output\");",
											"    });",
											"    pm.test('dryrun - not contains service-policy output BBB', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.include(\"service-policy output BBB\");",
											"    });",
											"}",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no service-policy input AAA', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.include(\"no service-policy input AAA\");",
											"    });",
											"    pm.test('dryrun - not contains no service-policy output', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.include(\"no service-policy output\");",
											"    });",
											"    pm.test('dryrun - not contains service-policy output BBB', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.include(\"service-policy output BBB\");",
											"    });",
											"}",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c95ad388-0b4d-4214-8780-0cf1b5969043",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show service policy input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c1673b3-75a3-4c59-948c-0ac6da77e7c8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"Bundle-Ether101.1999\");",
											"});",
											"pm.test(\"Validate config interface name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"Bundle-Ether101.1999\");",
											"});",
											"",
											"pm.test(\"Validate input policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"CCC\");",
											"});",
											"pm.test(\"Validate output policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"BBB\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether101.1999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether101.1999"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-450",
					"item": [
						{
							"name": "delete netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f888468-3b1e-46a7-be79-34b74808b58b",
										"exec": [
											"pm.test(\"Successful request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26b00f56-376c-48fd-87dd-bc48f61e247a",
										"exec": [
											"pm.test(\"Successful request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63c92334-8b9c-4476-8a0b-30a87af8175a",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05824efb-c68f-403b-933b-1eb8ab8e2c2d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check if connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0d62aad-ff11-4fe8-9c68-9824e5fcb015",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840cf0f2-4352-47f2-99f5-d7183468402f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether11\n shutdown\n!\ninterface Bundle-Ether11.2637\n description IMPHR08-IuPC\n service-policy input SET_PREC_4\n vrf Tcell-GRT\n ipv4 address 10.180.188.58 255.255.255.248\n proxy-arp\n encapsulation dot1q 2637\n!\ninterface Bundle-Ether11.2980\n description IMPHR08-Iu-PS_Control_Plane\n service-policy input SET_PREC_4\n vrf Tcell-GRT\n ipv4 address 10.195.129.2 255.255.255.248\n proxy-arp\n encapsulation dot1q 2980\n!\ninterface Bundle-Ether11.2981\n description IMPHR08-Iu-PS_Control_Plane_2\n service-policy input SET_PREC_4\n vrf Tcell-GRT\n ipv4 address 10.195.129.10 255.255.255.248\n proxy-arp\n encapsulation dot1q 2981\n!\ninterface Bundle-Ether11.2982\n description IMPHR08-Iu-PS_User_Plane\n service-policy input SET_PREC_3\n vrf IUPS\n ipv4 address 10.195.129.18 255.255.255.248\n proxy-arp\n encapsulation dot1q 2982\n!\ninterface Bundle-Ether11.2983\n description IMPHR08-Iu-PS_User_Plane_2\n service-policy input SET_PREC_3\n vrf IUPS\n ipv4 address 10.195.129.26 255.255.255.248\n proxy-arp\n encapsulation dot1q 2983\n!\ninterface Bundle-Ether11.2984\n description IMPHR08-IuR\n service-policy input set_prec_5\n vrf Tcell-GRT\n ipv4 address 10.195.129.34 255.255.255.248\n proxy-arp\n encapsulation dot1q 2984\n!\ninterface Bundle-Ether11.2987\n description IMPHR08-IuCS_User_Plane\n service-policy input set_prec_5\n vrf Tcell-GRT\n ipv4 address 10.195.129.58 255.255.255.248\n proxy-arp\n encapsulation dot1q 2987\n!\ninterface Bundle-Ether11.2988\n description IMPHR08-IuCS_Control_Plane\n service-policy input SET_PREC_4\n vrf Tcell-GRT\n ipv4 address 10.195.129.66 255.255.255.248\n proxy-arp\n encapsulation dot1q 2988\n!\ninterface GigabitEthernet0/0/0/0\n shutdown\n!\ninterface GigabitEthernet0/0/0/1\n shutdown\n!\ninterface GigabitEthernet0/0/0/2\n shutdown\n!\nroute-policy policyExport1\nend-policy\n!\nroute-policy policyExport2\nend-policy\n!\nrouter static\n vrf IUPS\n  address-family ipv4 unicast\n   10.195.129.101/32 Bundle-Ether11.2983 10.195.129.28\n  !\n !\n vrf Tcell-GRT\n  address-family ipv4 unicast\n   10.180.188.206/32 Bundle-Ether11.2637 10.180.188.60\n   10.180.188.207/32 Bundle-Ether11.2637 10.180.188.60\n   10.195.129.96/32 Bundle-Ether11.2980 10.195.129.4\n   10.195.129.97/32 Bundle-Ether11.2980 10.195.129.4\n   10.195.129.98/32 Bundle-Ether11.2981 10.195.129.12\n   10.195.129.99/32 Bundle-Ether11.2981 10.195.129.12\n   10.195.129.102/32 Bundle-Ether11.2984 10.195.129.36\n   10.195.129.105/32 Bundle-Ether11.2987 10.195.129.60\n   10.195.129.106/32 Bundle-Ether11.2988 10.195.129.68\n   10.195.129.107/32 Bundle-Ether11.2988 10.195.129.68\n  !\n !\n!\nrouter hsrp\n interface Bundle-Ether11.2637\n  address-family ipv4\n   hsrp 109\n    timers 1 3\n    preempt\n    priority 110\n    address 10.180.188.57\n   !\n  !\n !\n interface Bundle-Ether11.2980\n  address-family ipv4\n   hsrp 102\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.1\n   !\n  !\n !\n interface Bundle-Ether11.2981\n  address-family ipv4\n   hsrp 103\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.9\n   !\n  !\n !\n interface Bundle-Ether11.2982\n  address-family ipv4\n   hsrp 104\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.17\n   !\n  !\n !\n interface Bundle-Ether11.2983\n  address-family ipv4\n   hsrp 105\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.25\n   !\n  !\n !\n interface Bundle-Ether11.2984\n  address-family ipv4\n   hsrp 106\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.33\n   !\n  !\n !\n interface Bundle-Ether11.2987\n  address-family ipv4\n   hsrp 107\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.57\n   !\n  !\n !\n interface Bundle-Ether11.2988\n  address-family ipv4\n   hsrp 108\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.65\n   !\n  !\n !\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d38abc08-5f4a-4f84-b5a0-09a587d71b76",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli with invalid device version",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63c92334-8b9c-4476-8a0b-30a87af8175a",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"8.1.2\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false,\n      \"cli-topology:keepalive-timeout\": 60,\n      \"cli-topology:keepalive-initial-delay\": 60,\n      \"cli-topology:keepalive-delay\": 30\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound cli status connected when invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05824efb-c68f-403b-933b-1eb8ab8e2c2d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound cli status connected when invalid');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0d62aad-ff11-4fe8-9c68-9824e5fcb015",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for cli  failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"failed\") {",
											"    tests[\"Unified FAILED\"] = jsonData.node[0]['unified-topology:connection-status'] === \"failed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for cli failed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for cli  failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"failed\") {",
											"    tests[\"Uniconfig FAILED\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"failed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for cli failed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete cli invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4736a9c-7362-4814-ab6b-55e808d50fd4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63c92334-8b9c-4476-8a0b-30a87af8175a",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound cli status connecting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05824efb-c68f-403b-933b-1eb8ab8e2c2d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connecting\") {",
											"    tests[\"Is connecting\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connecting\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound cli status connecting');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0d62aad-ff11-4fe8-9c68-9824e5fcb015",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for cli  installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"installing\") {",
											"    tests[\"Unified installing\"] = jsonData.node[0]['unified-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for cli installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for cli  installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\") {",
											"    tests[\"Uniconfig installing\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for cli installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound cli status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05824efb-c68f-403b-933b-1eb8ab8e2c2d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound cli status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0d62aad-ff11-4fe8-9c68-9824e5fcb015",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for cli  installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"installed\") {",
											"    tests[\"Unified installed\"] = jsonData.node[0]['unified-topology:connection-status'] === \"installed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for cli installed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for cli  installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installed\") {",
											"    tests[\"Uniconfig installed\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for cli installed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4736a9c-7362-4814-ab6b-55e808d50fd4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount netconf with wrong passwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bc57501-215d-427a-b2b1-7b74c0dc8669",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}4\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180,\n\t  \"netconf-node-topology:max-connection-attempts\": 1,\n      \"netconf-node-topology:connection-timeout-millis\": 5000\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound netconf status unable to connect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"unable-to-connect\") {",
											"    tests[\"Is unable-to-connect\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"unable-to-connect\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound netconf status unable to connect');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for netconf failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"failed\") {",
											"    tests[\"unified FAILED\"] = jsonData.node[0]['unified-topology:connection-status'] === \"failed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for netconf failed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for netconf failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"failed\") {",
											"    tests[\"uniconfig FAILED\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"failed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for netconf failed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete netconf invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount netconf valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bc57501-215d-427a-b2b1-7b74c0dc8669",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound netconf status connecting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\") {",
											"    tests[\"Is connecting\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound netconf status connecting');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for netconf installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"installing\") {",
											"    tests[\"unified installing\"] = jsonData.node[0]['unified-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for netconf installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for netconf installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\") {",
											"    tests[\"uniconfig installing\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for netconf installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound netconf status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound netconf status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for netconf installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"installed\") {",
											"    tests[\"unified installed\"] = jsonData.node[0]['unified-topology:connection-status'] === \"installed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for netconf installed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for netconf installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\") {",
											"    tests[\"uniconfig installing\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for netconf installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for netconf installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c325e95-65b4-438d-8091-b106d209f734",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installed\") {",
											"    tests[\"uniconfig installed\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for netconf installed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed1f4afe-5479-4e45-bb4a-30485e52aae3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli for restore configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63c92334-8b9c-4476-8a0b-30a87af8175a",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05824efb-c68f-403b-933b-1eb8ab8e2c2d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a0d62aad-ff11-4fe8-9c68-9824e5fcb015",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87c31b79-508d-46d9-b208-1ac0d5b2dabd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f2639b3-32d0-4aa2-8d85-a83d14426dd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UNI-744",
					"item": [
						{
							"name": "netconf",
							"item": [
								{
									"name": "unmount ASR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "725c5980-508f-4d29-9a69-9128ce3f8bb1",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec3403a2-4086-459a-9f27-578e60aa530c",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{topology_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check ASR status connected netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check ASR status connected netconf');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR netconf with same parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bc57501-215d-427a-b2b1-7b74c0dc8669",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{topology_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check if device tried to reconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// Store the response in variable",
													"var jsonData = JSON.parse(responseBody);",
													"    ",
													"    // If the device remains connected, test passes.",
													"    if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
													"        tests[\"Device should not reconnect\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
													"    }",
													"    ",
													"    // If the ODL tries to reconnect the device, test fails.",
													"    else if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\") {",
													"        tests[\"Device should not reconnect\"] = false;",
													"    }",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR netconf with different parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bc57501-215d-427a-b2b1-7b74c0dc8669",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"     pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{topology_port}},\n      \"netconf-node-topology:keepalive-delay\": 1,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check if device tried to reconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// Store the response in variable",
													"var jsonData = JSON.parse(responseBody);",
													"    ",
													"    // If the device remains connected, test passes.",
													"    if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\") {",
													"        tests[\"Device should reconnect\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\";",
													"    }",
													"    ",
													"    // If the ODL tries to reconnect the device, test fails.",
													"    else if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
													"        tests[\"Device should reconnect\"] = false;",
													"    }",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount ASR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "cli",
							"item": [
								{
									"name": "unmount ASR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07287c74-a1a7-4cdb-a708-70ff492bad6c",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check ASR unmounted cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63c92334-8b9c-4476-8a0b-30a87af8175a",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check ASR status connected cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42f77c6d-a0cf-475e-8676-3df0e0f4bb15",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check ASR status connected cli');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR cli same parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63c92334-8b9c-4476-8a0b-30a87af8175a",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check if device tried to reconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05824efb-c68f-403b-933b-1eb8ab8e2c2d",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// Store the response in variable",
													"var jsonData = JSON.parse(responseBody);",
													"    ",
													"    // If the device remains connected, test passes.",
													"    if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"        tests[\"Device should not reconnect\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    }",
													"    ",
													"    // If the ODL tries to reconnect the device, test fails.",
													"    else if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\") {",
													"        tests[\"Device should not reconnect\"] = false;",
													"    }",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a0d62aad-ff11-4fe8-9c68-9824e5fcb015",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR cli different parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63c92334-8b9c-4476-8a0b-30a87af8175a",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 180,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check if device tried to reconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b418c7f-9c3b-4c89-a690-7eb8c1585de8",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// Store the response in variable",
													"var jsonData = JSON.parse(responseBody);",
													"    ",
													"    // If the device remains connected, test passes.",
													"    if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connecting\") {",
													"        tests[\"Device should reconnect\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connecting\";",
													"    }",
													"    ",
													"    // If the ODL tries to reconnect the device, test fails.",
													"    else if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"        tests[\"Device should reconnect\"] = false;",
													"    }",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed949348-2dcc-40c6-a2b0-f74af1b8a794",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check ASR status connected again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42f77c6d-a0cf-475e-8676-3df0e0f4bb15",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check ASR status connected again');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5aa74cbd-2256-4289-bd15-2346b98aa524",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1952557f-f44c-445b-81d8-d509a8e3db5a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}