{
	"info": {
		"_postman_id": "6c273067-9563-445d-aa7f-efcd4d1efe23",
		"name": "pc_uniconfig_bgp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "BGP-XeExt CRUD",
					"description": null,
					"item": [
						{
							"name": "Configure global bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"protocol\": [\n    {\n      \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n      \"name\": \"{{bgp_ni-name}}\",\n      \"bgp\": {\n        \"global\": {\n          \"config\": {\n            \"as\": \"{{bgp_peer-as4}}\"\n          },\n          \"afi-safis\": {\n            \"afi-safi\": [\n              {\n                \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                \"config\": {\n                  \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                }\n              }\n            ]\n          }\n        },\n        \"neighbors\": {\n          \"neighbor\": [\n            {\n              \"neighbor-address\": \"{{neighbor2}}\",\n              \"config\": {\n                \"enabled\": true,\n                \"peer-group\": \"{{bgp_peer_name}}\",\n                \"neighbor-address\": \"{{neighbor2}}\",\n                \"description\": \"{{eth_description}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    }\n                  },\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types_UPD}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types_UPD}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": false\n                }\n              }\n            },\n            {\n              \"neighbor-address\": \"{{neighbor3}}\",\n              \"config\": {\n                \"enabled\": true,\n                \"peer-group\": \"{{bgp_peer_name}}\",\n                \"neighbor-address\": \"{{neighbor3}}\",\n                \"description\": \"{{eth_description}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    }\n                  }\n                ]\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": false\n                }\n              }\n            }\n          ]\n        },\n        \"peer-groups\": {\n          \"peer-group\": [\n            {\n              \"peer-group-name\": \"{{bgp_peer_name}}\",\n              \"config\": {\n                \"auth-password\": \"{{bgp_password}}\",\n                \"send-community\": \"{{bgp_send_community}}\",\n                \"peer-as\": \"{{bgp_peer-as4}}\",\n                \"peer-group-name\": \"{{bgp_peer_name}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \"export-policy\": [\n                          \"{{export_policy}}\"\n                        ]\n                      }\n                    }\n                  }\n                ]\n              },\n              \"route-reflector\": {\n                \"config\": {\n                  \"route-reflector-client\": true\n                }\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": true,\n                  \"local-address\": \"{{test_interface}}\"\n                }\n              }\n            }\n          ]\n        }\n      },\n      \"config\": {\n        \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n        \"name\": \"{{bgp_ni-name}}\"\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "715a8f7a-471a-4efc-8e6d-343895ace132",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - no bgp router id', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"bgp router id\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv4\");",
											"    });",
											"    pm.test('dryrun - contains neighbor neighbor group_a_b-max peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max password frinx18$%', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 password frinx18$%\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max update-source Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 update-source Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max transport connection-mode passive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 transport connection-mode passive\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max send-community both', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 send-community both\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max route-reflector-client', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 route-reflector-client\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max route-map TC-out out', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 route-map TC-out out\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 peer-group group_a_b-max', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.195 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.195 description some text\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.195 activate\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv6', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv6\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.194 peer-group group_a_b-max', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.194 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.194 description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.194 description some text\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.194 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.194 activate\");",
											"    });",
											"",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3960dcf8-5a19-4933-a009-14e7a8f9e807",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51d84368-234c-4fd5-b6ff-1f7fb9171306",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f4b4b09e-dc05-4d75-88f7-0f71f27405dd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configure global bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"neighbor2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor2\"));",
											"});",
											"//config peer-group",
											"pm.test(\"Validate config peer-group = \" + pm.environment.get(\"bgp_peer_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"});",
											"//config neighbor-address",
											"pm.test(\"Validate config neighbor-address = \" + pm.environment.get(\"neighbor2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor2\"));",
											"});",
											"//passive-mode",
											"pm.test(\"Validate passive-mode = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"});",
											"//export-policy",
											"pm.test(\"Validate export-policy = \" + pm.environment.get(\"export_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(pm.environment.get(\"export_policy\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types_UPD\"));",
											"});",
											"//afi-safi-name 2",
											"pm.test(\"Validate afi-safi-name 2 = \" + pm.environment.get(\"bgp_openconfig_types_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types_UPD\"));",
											"});",
											"//neighbor-address 2",
											"pm.test(\"Validate neighbor-address 2 = \" + pm.environment.get(\"neighbor3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor3\"));",
											"});",
											"//config peer-group",
											"pm.test(\"Validate config peer-group 2 = \" + pm.environment.get(\"bgp_peer_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"});",
											"//description 2",
											"pm.test(\"Validate description 2 = \" + pm.environment.get(\"eth_description\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"});",
											"//neighbor-address 3",
											"pm.test(\"Validate neighbor-address 3 = \" + pm.environment.get(\"neighbor3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor3\"));",
											"});",
											"//passive-mode 2",
											"pm.test(\"Validate passive-mode 2 = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"});",
											"//afi-safi-name 3",
											"pm.test(\"Validate afi-safi-name 3 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 4",
											"pm.test(\"Validate afi-safi-name 4 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 5 ",
											"pm.test(\"Validate afi-safi-name 5 = \" + pm.environment.get(\"bgp_openconfig_types_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types_UPD\"));",
											"});",
											"//afi-safi-name 6",
											"pm.test(\"Validate afi-safi-name 6 = \" + pm.environment.get(\"bgp_openconfig_types_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types_UPD\"));",
											"});",
											"//route-reflector-client",
											"pm.test(\"Validate route-reflector-client = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"route-reflector\"][\"config\"][\"route-reflector-client\"]).to.eql(true);",
											"});",
											"//send-community",
											"pm.test(\"Validate send-community = \" + pm.environment.get(\"bgp_send_community\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community\"));",
											"});",
											"//auth-password",
											"pm.test(\"Validate auth-password = \" + pm.environment.get(\"bgp_password\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//config peer-group-name",
											"pm.test(\"Validate config peer-group-name = \" + pm.environment.get(\"bgp_peer_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"});",
											"//peer-group-name",
											"pm.test(\"Validate peer-group-name = \" + pm.environment.get(\"bgp_peer_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"//afi-safi-name 7",
											"pm.test(\"Validate afi-safi-name 7 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 8",
											"pm.test(\"Validate afi-safi-name 8 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//passive-mode 3",
											"pm.test(\"Validate passive-mode 3 = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(true);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//afi-safi-name 9",
											"pm.test(\"Validate afi-safi-name 9 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 10",
											"pm.test(\"Validate afi-safi-name 10 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//name ",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update global bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"protocol\": [\n    {\n      \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n      \"name\": \"{{bgp_ni-name}}\",\n      \"bgp\": {\n        \"global\": {\n          \"config\": {\n            \"as\": \"{{bgp_peer-as4}}\"\n          },\n          \"afi-safis\": {\n            \"afi-safi\": [\n              {\n                \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                \"config\": {\n                  \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                }\n              }\n            ]\n          }\n        },\n        \"neighbors\": {\n          \"neighbor\": [\n            {\n              \"neighbor-address\": \"{{neighbor3}}\",\n              \"config\": {\n                \"enabled\": true,\n                \"peer-group\": \"{{bgp_peer_name}}\",\n                \"neighbor-address\": \"{{neighbor3}}\",\n                \"description\": \"{{eth_description_upd}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": false\n                }\n              },\n              \"apply-policy\": {\n                \"config\": {\n                  \n                }\n              }\n            },\n            {\n              \"neighbor-address\": \"{{neighbor2}}\",\n              \"config\": {\n                \"enabled\": true,\n                \"peer-group\": \"{{bgp_peer_name}}\",\n                \"neighbor-address\": \"{{neighbor2}}\",\n                \"description\": \"{{eth_description_upd}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": false\n                }\n              },\n              \"apply-policy\": {\n                \"config\": {\n                  \n                }\n              }\n            }\n          ]\n        },\n        \"peer-groups\": {\n          \"peer-group\": [\n            {\n              \"peer-group-name\": \"{{bgp_peer_name}}\",\n              \"config\": {\n                \"auth-password\": \"{{bgp_password_upd}}\",\n                \"send-community\": \"{{bgp_send_community}}\",\n                \"peer-as\": \"{{bgp_peer-as4}}\",\n                \"peer-group-name\": \"{{bgp_peer_name}}\"\n              },\n              \"afi-safis\": {\n                \"afi-safi\": [\n                  {\n                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                    \"config\": {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \"export-policy\": [\n                          \"{{export_policy_upd}}\"\n                        ]\n                      }\n                    }\n                  }\n                ]\n              },\n              \"route-reflector\": {\n                \"config\": {\n                  \"route-reflector-client\": true\n                }\n              },\n              \"transport\": {\n                \"config\": {\n                  \"passive-mode\": true,\n                  \"local-address\": \"{{test_interface_upd}}\"\n                }\n              },\n              \"apply-policy\": {\n                \"config\": {\n                  \n                }\n              }\n            }\n          ]\n        }\n      },\n      \"config\": {\n        \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n        \"name\": \"{{bgp_ni-name}}\"\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cace42fc-0231-4555-9164-da37102fb085",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 peer-group group_a_b-3', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.195 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.195 description some text updated\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv4\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.195 activate\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 password 99$%xnirf', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 password 99$%xnirf\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 update-source Loopback79', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 update-source Loopback79\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 transport connection-mode passive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 transport connection-mode passive\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 send-community both', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 send-community both\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 route-reflector-client', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 route-reflector-client\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 route-map TC-upd out', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 route-map TC-upd out\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 peer-group group_a_b-3', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.195 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.64.2.195 description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.64.2.195 description some text updated\");",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "43591fa6-f908-4800-bed0-ae503a6392c5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86f6ea17-d9ad-49f8-8fb0-15e66bf61250",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09413110-0d56-417d-b197-a6262b19e1a5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show update global bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"neighbor2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor2\"));",
											"});",
											"//peer-group",
											"pm.test(\"Validate peer-group = \" + pm.environment.get(\"bgp_peer_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"});",
											"//neighbor-address 2",
											"pm.test(\"Validate neighbor-address 2 = \" + pm.environment.get(\"neighbor2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor2\"));",
											"});",
											"//passive-mode",
											"pm.test(\"Validate passive-mode = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//neighbor-address 3",
											"pm.test(\"Validate neighbor-address 3 = \" + pm.environment.get(\"neighbor3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor3\"));",
											"});",
											"//peer-group 2",
											"pm.test(\"Validate peer-group 2 = \" + pm.environment.get(\"bgp_peer_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"});",
											"//neighbor-address 4 ",
											"pm.test(\"Validate neighbor-address 4 = \" + pm.environment.get(\"neighbor3\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor3\"));",
											"});",
											"//passive-mode 2",
											"pm.test(\"Validate passive-mode 2= \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//route-reflector-client",
											"pm.test(\"Validate route-reflector-client = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"route-reflector\"][\"config\"][\"route-reflector-client\"]).to.eql(true);",
											"});",
											"//peer-group-name",
											"pm.test(\"Validate peer-group-name = \" + pm.environment.get(\"bgp_peer_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//send-community",
											"pm.test(\"Validate send-community = \" + pm.environment.get(\"bgp_send_community\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community\"));",
											"});",
											"//auth-password",
											"pm.test(\"Validate auth-password = \" + pm.environment.get(\"bgp_password_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password_upd\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//peer-group-name 2",
											"pm.test(\"Validate peer-group-name 2 = \" + pm.environment.get(\"bgp_peer_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \" + pm.environment.get(\"test_interface_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface_upd\"));",
											"});",
											"//passive-mode",
											"pm.test(\"Validate passive-mode = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(true);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//identifier 2",
											"pm.test(\"Validate identifier 2 = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//name ",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//export-policy",
											"pm.test(\"Validate export-policy = \" + pm.environment.get(\"export_policy_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(pm.environment.get(\"export_policy_upd\"));",
											"});",
											"//NO afi-safi-name",
											"pm.test(\"Validate NO afi-safi-name = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"]).to.not.have.property(\"afi-safi-name\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create network-instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37d4c88b-1e65-4227-b9d6-a7ab40032a64",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{bgp_ni-name_UPD}}\",\n      \"config\": {\n        \"name\": \"{{bgp_ni-name_UPD}}\",\n        \"type\": \"{{bgp_network_types}}\",\n        \"route-distinguisher\": \"{{bgp_route_distinguisher}}\"\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{bgp_peer-as4}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                      \"config\": {\n                        \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                    \"neighbor-address\": \"{{neighbor}}\",\n                    \"config\": {\n                      \"enabled\": true,\n                      \"peer-group\": \"{{bgp_peer_name4}}\",\n                      \"neighbor-address\": \"{{neighbor}}\",\n                      \"description\": \"{{eth_description}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          },\n                          \"apply-policy\": {\n                            \"config\": {\n                              \"import-policy\": [\n                                \"{{input_policy}}\"\n                              ]\n                            }\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": false,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"peer-groups\": {\n                \"peer-group\": [\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name4}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password}}\",\n                      \"send-community\": \"{{bgp_send_community_UPD}}\",\n                      \"peer-as\": \"{{bgp_peer-as}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name4}}\",\n                      \"description\": \"{{eth_description_upd}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  },\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name2}}\",\n                    \"config\": {\n                      \"peer-as\": \"{{bgp_peer-as2}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name2}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": false\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  },\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password}}\",\n                      \"send-community\": \"{{bgp_send_community_UPD}}\",\n                      \"peer-as\": \"{{bgp_peer-as5}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                      \"description\": \"{{eth_description_upd}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"route-reflector\": {\n                      \"config\": {\n                        \"route-reflector-client\": true\n                      }\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              }\n            },\n            \"config\": {\n              \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          },\n          {\n            \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"config\": {\n              \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49c6730f-3154-4f3c-9df9-edcdf3b0f44a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv4 vrf ab', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv4 vrf ab\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-max peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max remote-as 65000', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-max remote-as 65000\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-max description some text updated\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max password frinx18$%', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-max password frinx18$%\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max update-source Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-max update-source Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max transport connection-mode passive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-max transport connection-mode passive\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-max send-community extended', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-max send-community extended\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 peer-group group_a_b-max', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.255.255.2 peer-group group_a_b-max\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.255.255.2 description some text\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 update-source Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.255.255.2 update-source Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 route-map policy2 in', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.255.255.2 route-map policy2 in\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 10.255.255.2 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 10.255.255.2 activate\");",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfcb1d70-e429-4a5b-8c96-4e1cb2ce89fe",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67c09963-4500-4777-95cc-0760180af20a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a969d441-5c3f-4102-b853-b9e1638865cd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
											"setTimeout(function(){}, 60000);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show created network-instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e937cfb-7826-424a-bf74-37b25bffe8f7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"bgp_network_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"bgp_network_types\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"bgp_route_distinguisher\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"bgp_route_distinguisher\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"//test for whole tree it is fixed, if we get parts of tree in different order",
											"pm.test(\"Validate whole tree, for enxample neighbor-addres \" + pm.environment.get(\"neighbor\"), function() {",
											"    var jstring=pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"];",
											"    if (jstring){",
											"        for (var i =0;i<jstring.length;i++){",
											"            if(jstring[i][\"bgp\"]){",
											"                var jstring2=jstring[i][\"bgp\"][\"neighbors\"][\"neighbor\"];",
											"                for(var j=0; j<jstring2.length; j++){",
											"                    if(jstring2[j][\"neighbor-address\"]){",
											"                        pm.expect(jstring2[j][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"                        pm.expect(jstring2[j][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name4\"));",
											"                        pm.expect(jstring2[j][\"config\"][\"enabled\"]).to.eql(true);",
											"                        pm.expect(jstring2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"                        pm.expect(jstring2[j][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"                        pm.expect(jstring2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"                        pm.expect(jstring2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"                        pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(pm.environment.get(\"input_policy\"));",
											"                        pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                        pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                    }",
											"                }",
											"            }",
											"            if(jstring[i][\"bgp\"]){",
											"                var jstring2=jstring[i][\"bgp\"][\"peer-groups\"][\"peer-group\"];",
											"                for(j=0; j<jstring2.length; j++){",
											"                    if (jstring2[j][\"peer-group-name\"]){",
											"                        if (jstring2[j][\"peer-group-name\"]===pm.environment.get(\"bgp_peer_name4\")){",
											"                            pm.expect(jstring2[j][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community_UPD\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as\")));",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name4\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"                            pm.expect(jstring2[j][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name4\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(true);",
											"                        }",
											"                    }",
											"                    if(jstring2[j][\"config\"][\"peer-as\"]){",
											"                        if(jstring2[j][\"config\"][\"peer-as\"]===JSON.parse(pm.environment.get(\"bgp_peer-as2\"))){",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name2\"));",
											"                            pm.expect(jstring2[j][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name2\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"                    }",
											"                    if(jstring2[j][\"peer-group-name\"]){",
											"                        if(jstring2[j][\"peer-group-name\"]===pm.environment.get(\"bgp_peer_name3\")){",
											"                            pm.expect(jstring2[j][\"route-reflector\"][\"config\"][\"route-reflector-client\"]).to.eql(true);",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community_UPD\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as5\")));",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name3\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(true);",
											"                        }",
											"                    }",
											"                }",
											"            }",
											"        }",
											"        if(jstring[i][\"bgp\"]){",
											"            pm.expect(jstring[i][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"            pm.expect(jstring[i][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"            pm.expect(jstring[i][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"            pm.expect(jstring[i][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"            pm.expect(jstring[i][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"            pm.expect(jstring[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"            pm.expect(jstring[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\")); ",
											"        }",
											"        if (jstring[i][\"identifier\"]){",
											"            if(jstring[i][\"identifier\"]===pm.environment.get(\"bgp_openconfig-policy_types\")){",
											"                pm.expect(jstring[i][\"identifier\"]).to.eql(pm.environment.get(\"bgp_openconfig-policy_types\"));",
											"                pm.expect(jstring[i][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"bgp_openconfig-policy_types\"));",
											"                pm.expect(jstring[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"                pm.expect(jstring[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"            }",
											"        }  ",
											"    } ",
											"    }",
											"});",
											"//this tests are because we need check, if we get into ,,if's\" in previous test",
											"tests[\"01. Body matches string: bgp_openconfig-policy_types\"] = responseBody.has(String(postman.getEnvironmentVariable(\"bgp_openconfig-policy_types\")));",
											"",
											"tests[\"02. Body matches string: bgp_peer_name3\"] = responseBody.has(String(postman.getEnvironmentVariable(\"bgp_peer_name3\")));",
											"",
											"tests[\"03. Body matches string: bgp_peer-as2\"] = responseBody.has(String(postman.getEnvironmentVariable(\"bgp_peer-as2\")));",
											"",
											"tests[\"04. Body matches string: bgp_peer_name4\"] = responseBody.has(String(postman.getEnvironmentVariable(\"bgp_peer_name4\")));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update network-instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"network-instance\": [\n    {\n      \"name\": \"{{bgp_ni-name_UPD}}\",\n      \"config\": {\n        \"name\": \"{{bgp_ni-name_UPD}}\",\n        \"type\": \"{{bgp_network_types}}\",\n        \"route-distinguisher\": \"{{bgp_route_distinguisher}}\"\n      },\n      \"protocols\": {\n        \"protocol\": [\n          {\n            \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n              \"global\": {\n                \"config\": {\n                  \"as\": \"{{bgp_peer-as4}}\"\n                },\n                \"afi-safis\": {\n                  \"afi-safi\": [\n                    {\n                      \"afi-safi-name\": \"{{bgp_openconfig_types_UPD}}\",\n                      \"config\": {\n                        \"afi-safi-name\": \"{{bgp_openconfig_types_UPD}}\"\n                      }\n                    }\n                  ]\n                }\n              },\n              \"neighbors\": {\n                \"neighbor\": [\n                  {\n                    \"neighbor-address\": \"{{neighbor_upd}}\",\n                    \"config\": {\n                      \"enabled\": true,\n                      \"peer-group\": \"{{bgp_peer_name}}\",\n                      \"neighbor-address\": \"{{neighbor_upd}}\",\n                      \"description\": \"{{eth_description_upd}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          },\n                          \"apply-policy\": {\n                            \"config\": {\n                              \"import-policy\": [\n                                \"{{input_policy}}\"\n                              ]\n                            }\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": false,\n                        \"local-address\": \"{{test_interface_upd}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              },\n              \"peer-groups\": {\n                \"peer-group\": [\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password_upd}}\",\n                      \"send-community\": \"{{bgp_send_community_UPD}}\",\n                      \"peer-as\": \"{{bgp_peer-as5}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name}}\",\n                      \"description\": \"{{eth_description}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  },\n                  {\n                    \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                    \"config\": {\n                      \"auth-password\": \"{{bgp_password}}\",\n                      \"send-community\": \"{{bgp_send_community}}\",\n                      \"peer-as\": \"{{bgp_peer-as4}}\",\n                      \"peer-group-name\": \"{{bgp_peer_name3}}\",\n                      \"description\": \"{{eth_description}}\"\n                    },\n                    \"afi-safis\": {\n                      \"afi-safi\": [\n                        {\n                          \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                          \"config\": {\n                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                          }\n                        }\n                      ]\n                    },\n                    \"route-reflector\": {\n                      \"config\": {\n                        \"route-reflector-client\": true\n                      }\n                    },\n                    \"transport\": {\n                      \"config\": {\n                        \"passive-mode\": true,\n                        \"local-address\": \"{{test_interface}}\"\n                      }\n                    },\n                    \"apply-policy\": {\n                      \"config\": {\n                        \n                      }\n                    }\n                  }\n                ]\n              }\n            },\n            \"config\": {\n              \"identifier\": \"{{l3_vpn_bgp_table_policy}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          },\n          {\n            \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"config\": {\n              \"identifier\": \"{{bgp_openconfig-policy_types}}\",\n              \"name\": \"{{bgp_ni-name}}\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfe26ad4-b0db-47a9-9699-7c1864e40073",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - no neighbor 10.255.255.2 peer-group group_a_b-max', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor 10.255.255.2 peer-group group_a_b-max\");",
											"    });",
											"    pm.test('dryrun - no neighbor group_a_b-min peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor group_a_b-min peer-group\");",
											"    });",
											"    pm.test('dryrun - no neighbor group_a_b-max peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor group_a_b-max peer-group\");",
											"    });",
											"    pm.test('dryrun - address-family ipv4 vrf ab', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv4 vrf ab\");",
											"    });",
											"    pm.test('dryrun - no address-family ipv4 vrf ab', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no address-family ipv4 vrf ab\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv6 vrf ab', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv6 vrf ab\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 description some text\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 update-source Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 update-source Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 transport connection-mode passive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 transport connection-mode passive\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-min peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor group_a_b-min peer-group\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 peer-group group_a_b-3', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 55.0.0.55 peer-group group_a_b-3\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 55.0.0.55 description some text updated\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 update-source Loopback79', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 55.0.0.55 update-source Loopback79\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 route-map policy2 in', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 55.0.0.55 route-map policy2 in\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55 activate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 55.0.0.55 activate\");",
											"    });",
											"        pm.test('dryrun - contains neighbor group_a_b-3 remote-as 484', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 remote-as 484\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 password 99$%xnirf', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 password 99$%xnirf\");",
											"    });",
											"    pm.test('dryrun - contains neighbor group_a_b-3 send-community extended', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor group_a_b-3 send-community extended\");",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb87b6cd-62f9-48a3-ad2a-29f645fa88dd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9682bd96-407b-4144-a68e-0316d6d164d3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "25bafe1e-3e3c-4634-bea1-ae3c578f9ce0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
											"setTimeout(function(){}, 60000);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show updated network-instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7a357a9-2724-464a-9ea3-fd075b96ea2c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"bgp_network_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"bgp_network_types\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"//route-distinguisher",
											"pm.test(\"Validate route-distinguisher = \" + pm.environment.get(\"bgp_route_distinguisher\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"config\"][\"route-distinguisher\"]).to.eql(pm.environment.get(\"bgp_route_distinguisher\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name_UPD\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name_UPD\"));",
											"});",
											"",
											"//whole tree, if has changed order",
											"pm.test(\"Validate whole tree, for enxample neighbor-addres \" + pm.environment.get(\"neighbor\"), function() {",
											"    var jstring=pm.response.json()[\"frinx-openconfig-network-instance:network-instance\"][0][\"protocols\"][\"protocol\"];",
											"    if (jstring){",
											"        for (var i =0;i<jstring.length;i++){",
											"            if(jstring[i][\"bgp\"]){",
											"                var jstring2=jstring[i][\"bgp\"][\"neighbors\"][\"neighbor\"];",
											"                for(var j=0; j<jstring2.length; j++){",
											"                    if(jstring2[j][\"neighbor-address\"]){",
											"                        pm.expect(jstring2[j][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor_upd\"));",
											"                        pm.expect(jstring2[j][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"                        pm.expect(jstring2[j][\"config\"][\"enabled\"]).to.eql(true);",
											"                        pm.expect(jstring2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"                        pm.expect(jstring2[j][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor_upd\"));",
											"                        pm.expect(jstring2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface_upd\"));",
											"                        pm.expect(jstring2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(false);",
											"                        pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(pm.environment.get(\"input_policy\"));",
											"                        pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                        pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                    }",
											"                }",
											"            }",
											"            if(jstring[i][\"bgp\"]){",
											"                var jstring2=jstring[i][\"bgp\"][\"peer-groups\"][\"peer-group\"];",
											"                for(j=0; j<jstring2.length; j++){",
											"                    if (jstring2[j][\"peer-group-name\"]){",
											"                        if (jstring2[j][\"peer-group-name\"]===pm.environment.get(\"bgp_peer_name\")){",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as5\")));",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"                            pm.expect(jstring2[j][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(true);",
											"                            pm.expect(jstring2[j][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community_UPD\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password_upd\"));",
											"                        }",
											"                    }",
											"                    if(jstring2[j][\"config\"][\"peer-as\"]){",
											"                        if(jstring2[j][\"config\"][\"peer-as\"]===JSON.parse(pm.environment.get(\"bgp_peer-as4\"))){",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"passive-mode\"]).to.eql(true);",
											"                            pm.expect(jstring2[j][\"route-reflector\"][\"config\"][\"route-reflector-client\"]).to.eql(true);",
											"                            pm.expect(jstring2[j][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name3\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"                            pm.expect(jstring2[j][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"bgp_peer_name3\"));",
											"                            pm.expect(jstring2[j][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"                            pm.expect(jstring2[j][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"                    }",
											"                }",
											"            }",
											"        }",
											"        if(jstring[i][\"bgp\"]){",
											"            pm.expect(jstring[i][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"            pm.expect(jstring[i][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types_UPD\"));",
											"            pm.expect(jstring[i][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types_UPD\"));",
											"            pm.expect(jstring[i][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"            pm.expect(jstring[i][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"            pm.expect(jstring[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"            pm.expect(jstring[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\")); ",
											"            pm.expect(jstring[i][\"bgp\"][\"peer-groups\"][\"peer-group\"]).to.not.have.property(\"peer-group-name\");",
											"        }",
											"        if (jstring[i][\"identifier\"]){",
											"            if(jstring[i][\"identifier\"]===pm.environment.get(\"bgp_openconfig-policy_types\")){",
											"                pm.expect(jstring[i][\"identifier\"]).to.eql(pm.environment.get(\"bgp_openconfig-policy_types\"));",
											"                pm.expect(jstring[i][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"bgp_openconfig-policy_types\"));",
											"                pm.expect(jstring[i][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"                pm.expect(jstring[i][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"            }",
											"        }  ",
											"    }  ",
											"    }",
											"});",
											"//this tests are because we need check, if we get into ,,if's\" in previous test",
											"tests[\"01. Body matches string: bgp_openconfig-policy_types\"] = responseBody.has(String(postman.getEnvironmentVariable(\"bgp_openconfig-policy_types\")));",
											"",
											"tests[\"02. Body matches string: bgp_peer_name\"] = responseBody.has(String(postman.getEnvironmentVariable(\"bgp_peer_name\")));",
											"",
											"tests[\"03. Body matches string: bgp_peer-as4\"] = responseBody.has(String(postman.getEnvironmentVariable(\"bgp_peer-as4\")));",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name_UPD}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name_UPD}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Detele dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1175b7d-9067-4719-8b1e-6e4e9553a289",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    ",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"",
											"    pm.test(\"dryrun - no neighbor 10.64.2.195 peer-group group_a_b-3\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor 10.64.2.195 peer-group group_a_b-3\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no neighbor 10.64.2.194 peer-group group_a_b-3\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor 10.64.2.194 peer-group group_a_b-3\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no neighbor group_a_b-3 peer-group\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor group_a_b-3 peer-group\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no address-family ipv4\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"address-family ipv4\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no router bgp 17676\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"router bgp 17676\");",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detele commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure global bgp BOTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_peer-as4}}\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"peer-groups\": {\n                    \"peer-group\": [\n                        {\n                            \"peer-group-name\": \"GT-GROUP\",\n                            \"config\": {\n                                \"peer-as\": {{bgp_peer-as4}},\n                                \"peer-group-name\": \"GT-GROUP\",\n                                \"send-community\": \"{{bgp_send_community}}\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"GT-out\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72cc6059-d102-4ae9-84c3-f197c9528bf8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - no neighbor GT-GROUP send-community both', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor GT-GROUP send-community both\");",
											"    });",
											"    pm.test('dryrun - contains address-family vpnv4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv4\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor GT-GROUP peer-group\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor GT-GROUP remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP route-map GT-out out', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor GT-GROUP route-map GT-out out\");",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configure global bgp BOTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a5ba08a-52e5-49ef-8d5b-c60361be9ebf",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//send-community",
											"pm.test(\"Validate send-community = \" + pm.environment.get(\"bgp_send_community\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"send-community\"]).to.eql(pm.environment.get(\"bgp_send_community\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//afi-safi-name 7",
											"pm.test(\"Validate afi-safi-name 7 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 8",
											"pm.test(\"Validate afi-safi-name 8 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//afi-safi-name 9",
											"pm.test(\"Validate afi-safi-name 9 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 10",
											"pm.test(\"Validate afi-safi-name 10 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//name ",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//export policy",
											"pm.test(\"Validate  export policy= \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"GT-out\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Update global bgp delete BOTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "311fa285-fa27-4bcc-a8f3-f917aae43dbc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"{{bgp_ni-name}}\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_peer-as4}}\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"peer-groups\": {\n                    \"peer-group\": [\n                        {\n                            \"peer-group-name\": \"GT-GROUP\",\n                            \"config\": {\n                                \"peer-as\": {{bgp_peer-as4}},\n                                \"peer-group-name\": \"GT-GROUP\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"{{bgp_openconfig_types}}\",\n                                        \"config\": {\n                                            \"afi-safi-name\": \"{{bgp_openconfig_types}}\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "319ceeb9-4f5b-4ed2-9e6e-dce9db09edd5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"    pm.test('dryrun - no neighbor GT-GROUP send-community both', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"no neighbor GT-GROUP send-community both\");",
											"    });",
											"    pm.test('dryrun - contains address-family vpnv4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv4\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP peer-group', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor GT-GROUP peer-group\");",
											"    });",
											"    pm.test('dryrun - neighbor GT-GROUP remote-as 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"neighbor GT-GROUP remote-as 17676\");",
											"    });",
											"    pm.test('dryrun - no neighbor GT-GROUP route-map GT-out out', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"no neighbor GT-GROUP route-map GT-out out\");",
											"    });",
											"",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configure global bgp deleted BOTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80790486-ecad-4b99-bdfa-2ca76b801735",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//send-community",
											"pm.test(\"Validate no send-community = \" + pm.environment.get(\"bgp_send_community\"), function() {",
											"  pm.expect(pm.response.json()).to.not.have.property(\"BOTH\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//afi-safi-name 7",
											"pm.test(\"Validate afi-safi-name 7 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 8",
											"pm.test(\"Validate afi-safi-name 8 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//afi-safi-name 9",
											"pm.test(\"Validate afi-safi-name 9 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//afi-safi-name 10",
											"pm.test(\"Validate afi-safi-name 10 = \" + pm.environment.get(\"bgp_openconfig_types\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(pm.environment.get(\"bgp_openconfig_types\"));",
											"});",
											"//name ",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											"//name 2",
											"pm.test(\"Validate name 2 = \" + pm.environment.get(\"bgp_ni-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_ni-name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Detele dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7965f217-765a-4d18-988a-9955de628c3f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xe\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    ",
											"    pm.test('dryrun - contains router bgp 17676', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 17676\");",
											"    });",
											"",
											"    pm.test(\"dryrun - no neighbor group_a_b-3 peer-group\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"no neighbor GT-GROUP peer-group\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no address-family ipv4\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"no address-family ipv4\");",
											"    });",
											"    ",
											"    pm.test(\"dryrun - no router bgp 17676\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"no router bgp 17676\");",
											"    });",
											"",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Detele commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp 17676",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "104f6a6a-a02e-4e07-9149-ad6224215318",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:config\":{\"peer-group-name\":\"GT-GROUP\",\"peer-as\":17676}}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:peer-groups/peer-group/GT-GROUP/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:peer-groups",
										"peer-group",
										"GT-GROUP",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure nonexisting bgp peer-group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fd13b7a-9a53-4d3e-b42a-f2c604b786b5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:neighbor\":[{\"neighbor-address\":\"1.1.1.1\",\"config\":{\"peer-group\":\"GT-GROUP-9999\",\"neighbor-address\":\"1.1.1.1\"},\"transport\":{\"config\":{\"passive-mode\":false}}}]}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/1.1.1.1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"1.1.1.1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "892b4c50-77e4-44ad-bd06-7cbcfbb44c68",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"commit - overall-configuration-status fail\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"commit - rollback-status\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe22c229-f6ab-4081-a6aa-fc0c8308a94a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"pm.test(\"not have = peer-groups\" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"]).to.not.have.property(\"peer-groups\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ccbbad1-91d7-436a-bb8b-1cc9ee581236",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:config\":{\"auth-password\":\"7 105E0C1702021B05\",\"peer-group-name\":\"GT-GROUP\",\"peer-as\":17676,\"send-community\":\"BOTH\"}}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:peer-groups/peer-group/GT-GROUP/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:peer-groups",
										"peer-group",
										"GT-GROUP",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure nonexisting bgp Loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d575a793-dc5f-4f39-b5f9-f07ce05a8d1e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:transport\":{\"config\":{\"local-address\":\"Loopback9999\",\"passive-mode\":true}}}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:peer-groups/peer-group/GT-GROUP/transport",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:peer-groups",
										"peer-group",
										"GT-GROUP",
										"transport"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ad09deb-5c75-4a35-9f83-34b216dfadb8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"commit - overall-configuration-status fail\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"commit - rollback-status\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8630642-894d-43b1-932d-71534dd7208c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"pm.test(\"not have = peer-groups\" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"]).to.not.have.property(\"peer-groups\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a446ebd7-db6b-48cb-bde2-813fdf4b960c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp vrf definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nvrf definition Mgmt-intf\naddress-family ipv4\nexit-address-family\naddress-family ipv6\nexit-address-family\nrouter bgp 17676\nbgp log-neighbor-changes\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "Replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab1ee2e8-344e-4190-8b76-ab2de2fedc0a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:config\":{\"peer-group-name\":\"GT-GROUP\",\"peer-as\":17676}}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:peer-groups/peer-group/GT-GROUP/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:peer-groups",
										"peer-group",
										"GT-GROUP",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure nonexisting peer group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d575a793-dc5f-4f39-b5f9-f07ce05a8d1e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"frinx-openconfig-network-instance:neighbor\":[{\"neighbor-address\":\"1.1.1.1\",\"config\":{\"peer-group\":\"GT-GROUP-9999\",\"neighbor-address\":\"1.1.1.1\"},\"transport\":{\"config\":{\"passive-mode\":false}}}]}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/1.1.1.1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"1.1.1.1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ad09deb-5c75-4a35-9f83-34b216dfadb8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"commit - overall-configuration-status fail\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"commit - rollback-status\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Show configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21b3cf47-1b75-4db5-be9a-ef3571796d07",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as4\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = \" + pm.environment.get(\"l3_vpn_bgp_table_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_table_policy\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"pm.test(\"not have = peer-groups\" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"]).to.not.have.property(\"peer-groups\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b22ed2e8-df3f-41b1-8c2a-7037c3ceb4dd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP-JunosExt CRUD",
					"description": null,
					"item": [
						{
							"name": "configure bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{ip1}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{ip1}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": {{bgp_peer-as}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"ip1\"));",
											"});",
											"pm.test(\"Validate peer-group\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(postman.getEnvironmentVariable(\"bgp_group\"));",
											"});",
											"pm.test(\"Validate peer-as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as\")));",
											"});",
											"",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"ip1\"));",
											"});",
											"pm.test(\"Validate as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_as\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as2}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{bgp_ip2}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{bgp_ip2}}\",\n                                \"peer-group\": \"{{bgp_group2}}\",\n                                \"peer-as\": {{bgp_peer-as2}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show updated bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"bgp_ip2\"));",
											"});",
											"pm.test(\"Validate peer-group\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(postman.getEnvironmentVariable(\"bgp_group2\"));",
											"});",
											"pm.test(\"Validate peer-as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as2\")));",
											"});",
											"",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"bgp_ip2\"));",
											"});",
											"pm.test(\"Validate as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_as2\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete previouse bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP-XeChecked-commit",
					"description": null,
					"item": [
						{
							"name": "create interface Loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n    \"ios-cli:command\" : \"configure terminal\ninterface {{test_interface}}\nno ip address\nend\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0dbad498-9363-40a6-bf9c-a6ec9b403e6a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8196efe6-811d-4490-bbc9-806cdc95925d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure invalid default bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n        \t\"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_peer-as4}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{l3_vpn_bgp_router_id}}\",\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false,\n                                    \"local-address\": \"{{l3_vpn_bgp_nonexist_interface_id}}\"\n                                }\n                            },\n                            \"config\": {\n                                \"neighbor-address\": \"{{l3_vpn_bgp_router_id}}\",\n                                \"peer-as\": {{bgp_peer-as4}}\n                            }\n                        }\n                    ]\n                },\n                \"peer-groups\": {\n                    \"peer-group\": [\n                        {\n                            \"peer-group-name\": \"{{l3_vpn_ospf_ni_name}}\",\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false\n                                }\n                            },\n                            \"config\": {\n                                \"peer-as\": {{bgp_peer-as4}},\n                                \"peer-group-name\": \"{{l3_vpn_ospf_ni_name}}\"\n                            }\n                        }\n                   ]\n                }\n            }\n        }  \n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "created commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4041a36f-ec82-4ad1-a566-7a2fe63e80c1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"commit - overall-configuration-status fail\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"commit - rollback-status\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n        \t\"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_peer-as4}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{l3_vpn_bgp_router_id}}\",\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false,\n                                    \"local-address\": \"{{test_interface}}\"\n                                }\n                            },\n                            \"config\": {\n                                \"neighbor-address\": \"{{l3_vpn_bgp_router_id}}\",\n                                \"peer-as\": {{bgp_peer-as4}}\n                            }\n                        }\n                    ]\n                },\n                \"peer-groups\": {\n                    \"peer-group\": [\n                        {\n                            \"peer-group-name\": \"{{l3_vpn_ospf_ni_name}}\",\n                            \"transport\": {\n                                \"config\": {\n                                    \"passive-mode\": false\n                                }\n                            },\n                            \"config\": {\n                                \"peer-as\": {{bgp_peer-as4}},\n                                \"peer-group-name\": \"{{l3_vpn_ospf_ni_name}}\"\n                            }\n                        }\n                   ]\n                }\n            }\n        }  \n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updated checked-commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7edafed2-a762-4915-9da6-e27dd81281f8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c07130d5-6602-4512-81b5-5327705ad439",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 60 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
											"setTimeout(function(){}, 60000);"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:checked-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:checked-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbd29e70-bc9b-4167-ad44-2aed80146dff",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate as =\" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as4\")));",
											"});",
											"pm.test(\"Validate neigbour-address =\" + pm.environment.get(\"l3_vpn_bgp_router_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"l3_vpn_bgp_router_id\"));",
											"});",
											"pm.test(\"Validate local-address =\" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"pm.test(\"Validate peer-as =\" + pm.environment.get(\"bgp_peer-as4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as4\")));",
											"});",
											"pm.test(\"Validate peer-group-name =\" + pm.environment.get(\"l3_vpn_ospf_ni_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"peer-group-name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_ni_name\"));",
											"});",
											"pm.test(\"Validate config peer-group-name =\" + pm.environment.get(\"l3_vpn_ospf_ni_name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"peer-groups\"][\"peer-group\"][0][\"config\"][\"peer-group-name\"]).to.eql(pm.environment.get(\"l3_vpn_ospf_ni_name\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete bgp configuration native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete Loopback",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{test_interface}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{test_interface}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n        \"target-nodes\": {\n    }\n\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP CRUD",
					"description": null,
					"item": [
						{
							"name": "configure second default bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name2}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name2}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n                        \n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n                    \t\"prefix\": \"{{bgp_ipv6}}\",\n                        \"config\": {\n                            \"prefix\": \"{{bgp_ipv6}}\",\n                            \"frinx-bgp-extension:apply-policy\": \"{{input_policy}}\"\n                        }\n                    }\n                ]\n            },\n            \n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": \"{{bgp_as2}}\"\n                    },\n                                        \"afi-safis\": {\n                    \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{neighbor}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{neighbor}}\",\n                                \"peer-as\": \"{{bgp_as}}\",\n                                \"auth-password\": \"{{bgp_password}}\",\n                                \"description\": \"{{eth_description}}\",\n                                \"send-community\": \"BOTH\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"enabled\": false\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"{{test_interface}}\"\n                                }\n                            },\n                            \"ebgp-multihop\": {\n                                \"config\": {\n                                    \"enabled\": true,\n                                    \"multihop-ttl\": \"{{bgp_multihop}}\"\n                                }\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": {\n                                \t\"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                    \"config\": {\n                                    \t\"frinx-bgp-extension:soft-reconfiguration\": {\n                                            \"always\": true\n                                        },\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                    },\n                                    \"apply-policy\": {\n                                        \"config\": {\n                                            \"import-policy\": [ \"{{input_policy}}\" ],\n                                            \"export-policy\": [ \"nexthopself\" ]\n                                        }\n                                    },\n                                     \"ipv6-unicast\": {\n                                        \"config\": {\n                                            \"send-default-route\": \"true\"\n                                        },\n                                        \"prefix-limit\": {\n                                            \"config\": {\n                                                \"max-prefixes\": \"{{bgp_max_prefix}}\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29c941d5-e065-4075-986f-4ae694468803",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"    ",
											"    pm.test('dryrun - contains router bgp 666 instance second-default', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 666 instance second-default\");",
											"    });",
											"    pm.test('dryrun - contains remote-as 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"remote-as 1\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv6 unicast', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv6 unicast\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 99.0.0.99', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 99.0.0.99\");",
											"    });",
											"    pm.test('dryrun - contains password clear frinx18$%', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"password clear frinx18$%\");",
											"    });",
											"    pm.test('dryrun - contains description some text', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"description some text\");",
											"    });",
											"    pm.test('dryrun - contains send-community-ebgp', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"send-community-ebgp\");",
											"    });",
											"    pm.test('dryrun - contains update-source loopback 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"update-source loopback 97\");",
											"    });",
											"    pm.test('dryrun - contains ebgp-multihop 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ebgp-multihop 1\");",
											"    });",
											"    pm.test('dryrun - contains soft-reconfiguration inbound always', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"soft-reconfiguration inbound always\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy2 in', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy2 in\");",
											"    });",
											"    pm.test('dryrun - contains next-hop-self', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"next-hop-self\");",
											"    });",
											"    pm.test('dryrun - contains default-originate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"default-originate\");",
											"    });",
											"    pm.test('dryrun - contains maximum-prefix 25', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"maximum-prefix 25\");",
											"    });",
											"    pm.test('dryrun - contains network 2010:AB8:2::/48 route-policy policy2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"network 2010:AB8:2::/48 route-policy policy2\");",
											"    });",
											"    ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show second default bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ca84bcc-d601-4e7b-b4e6-453e26f7c6ff",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_as\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as\")));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as2\")));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"neighbor\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"//neighbor-address config ",
											"pm.test(\"Validate neighbor-address config = \" + pm.environment.get(\"neighbor\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name2\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name2\"));",
											"});",
											"//multihop-ttl",
											"pm.test(\"Validate multihop-ttl = \" + pm.environment.get(\"bgp_multihop\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"multihop-ttl\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_multihop\")));",
											"});",
											"//multihop enabled",
											"pm.test(\"Validate multihop enabled = true\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \" + pm.environment.get(\"test_interface\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface\"));",
											"});",
											"//import policy",
											"pm.test(\"Validate import policy = \" + pm.environment.get(\"input_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(pm.environment.get(\"input_policy\"));",
											"});",
											"//export policy",
											"pm.test(\"Validate export policy = \" + pm.environment.get(\"nexthopself\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"nexthopself\");",
											"});",
											"//frinx-bgp-extension:apply-policy",
											"pm.test(\"Validate frinx-bgp-extension:apply-policy = \" + pm.environment.get(\"input_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"frinx-bgp-extension:apply-policy\"]).to.eql(pm.environment.get(\"input_policy\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix =\" + pm.environment.get(\"bgp_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"bgp_ipv6\"));",
											"});",
											"//prefix config",
											"pm.test(\"Validate config prefix =\" + pm.environment.get(\"bgp_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"bgp_ipv6\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV6_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV6_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV6_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV6_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//send-community",
											"pm.test(\"Validate send-community = BOTH\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"send-community\"]).to.eql(\"BOTH\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//always",
											"pm.test(\"Validate always = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(true);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \" + pm.environment.get(\"bgp_max_prefix\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_max_prefix\")));",
											"});",
											"//auth-password",
											"pm.test(\"Validate password =\" + pm.environment.get(\"bgp_password\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update second default bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name2}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name2}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n                        \n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n                    \t\"prefix\": \"{{bgp_ipv4}}\",\n                        \"config\": {\n                            \"prefix\": \"{{bgp_ipv4}}\",\n                            \"frinx-bgp-extension:apply-policy\": \"{{input_policy}}\"\n                        }\n                    }\n                ]\n            },\n            \n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": \"{{bgp_as2}}\"\n                    },\n                                        \"afi-safis\": {\n                    \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{neighbor_upd}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{neighbor_upd}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": \"{{bgp_as_upd}}\",\n                                \"auth-password\": \"{{bgp_password_upd}}\",\n                                \"description\": \"{{eth_description_upd}}\",\n                                \"enabled\": true\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"{{test_interface_upd}}\"\n                                }\n                            },\n                            \"ebgp-multihop\": {\n                                \"config\": {\n                                    \"enabled\": true,\n                                    \"multihop-ttl\": \"{{bgp_multihop_upd}}\"\n                                }\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": {\n                                \t\"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                    \"config\": {\n                                    \t\"frinx-bgp-extension:soft-reconfiguration\": {\n                                            \"always\": false\n                                        },\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                    },\n                                    \"apply-policy\": {\n                                        \"config\": {\n                                            \"import-policy\": [ \"{{input_policy}}\" ]\n                                        }\n                                    },\n                                     \"ipv4-unicast\": {\n                                        \"config\": {\n                                            \"send-default-route\": \"false\"\n                                        },\n                                        \"prefix-limit\": {\n                                            \"config\": {\n                                                \"max-prefixes\": \"{{bgp_max_prefix_upd}}\",\n                                                \"shutdown-threshold-pct\": \"{{bgp_maxprefixes_pct}}\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d461f64-3b9d-4fd1-9ded-8ed9db763526",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"        pm.test('dryrun - contains router bgp 666 instance second-default', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 666 instance second-default\");",
											"    });",
											"    pm.test('dryrun - contains no neighbor 99.0.0.99', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor 99.0.0.99\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 55.0.0.55', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 55.0.0.55\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv6 unicast ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv6 unicast\");",
											"    });",
											"    pm.test('dryrun - contains no address-family ipv6 unicast ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no address-family ipv6 unicast\");",
											"    });",
											"    pm.test('dryrun - contains no maximum-prefix', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no maximum-prefix\");",
											"    });",
											"    pm.test('dryrun - contains maximum-prefix 52', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"maximum-prefix 52\");",
											"    });",
											"    pm.test('dryrun - contains address-family ipv4 unicast', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"address-family ipv4 unicast\");",
											"    });",
											"    pm.test('dryrun - contains network 33.33.33.33/32', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"network 33.33.33.33/32\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy2 in', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy2 in\");",
											"    });",
											"    pm.test('dryrun - contains no default-originate', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no default-originate\");",
											"    });",
											"    pm.test('dryrun - contains no ebgp-multihop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ebgp-multihop\");",
											"    });",
											"    pm.test('dryrun - contains no route-policy', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no route-policy\");",
											"    });",
											"    pm.test('dryrun - contains no update-source', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no update-source\");",
											"    });",
											"    pm.test('dryrun - contains remote-as 2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"remote-as 2\");",
											"    });",
											"    pm.test('dryrun - contains password clear 99$%xnirf', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"password clear 99$%xnirf\");",
											"    });",
											"    pm.test('dryrun - contains description some text updated', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"description some text updated\");",
											"    });",
											"    pm.test('dryrun - contains use neighbor-group nbrgroup1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"use neighbor-group nbrgroup1\");",
											"    });",
											"    pm.test('dryrun - contains no shutdown', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no shutdown\");",
											"    });",
											"    pm.test('dryrun - contains soft-reconfiguration inbound', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"soft-reconfiguration inbound\");",
											"    }); ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show second default updated bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c91d7dec-80a0-4f81-a59d-3b3da68faf4a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_as_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as_upd\")));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as2\")));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"neighbor_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor_upd\"));",
											"});",
											"//neighbor-address config ",
											"pm.test(\"Validate neighbor-address config = \" + pm.environment.get(\"neighbor_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"neighbor_upd\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"bgp_process-name2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name2\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name2\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name2\"));",
											"});",
											"//multihop-ttl",
											"pm.test(\"Validate multihop-ttl = \" + pm.environment.get(\"bgp_multihop_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"multihop-ttl\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_multihop_upd\")));",
											"});",
											"//multihop enabled",
											"pm.test(\"Validate multihop enabled = true\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \" + pm.environment.get(\"test_interface_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(pm.environment.get(\"test_interface_upd\"));",
											"});",
											"//import policy",
											"pm.test(\"Validate import policy = \" + pm.environment.get(\"input_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(pm.environment.get(\"input_policy\"));",
											"});",
											"//frinx-bgp-extension:apply-policy",
											"pm.test(\"Validate frinx-bgp-extension:apply-policy = \" + pm.environment.get(\"input_policy\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"frinx-bgp-extension:apply-policy\"]).to.eql(pm.environment.get(\"input_policy\"));",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \" + pm.environment.get(\"bgp_ipv4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(pm.environment.get(\"bgp_ipv4\"));",
											"});",
											"//prefix config",
											"pm.test(\"Validate config prefix \" + pm.environment.get(\"bgp_ipv4\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(pm.environment.get(\"bgp_ipv4\"));",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = frinx-openconfig-bgp-types:IPV4_UNICAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"eth_description_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"eth_description_upd\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//always",
											"pm.test(\"Validate always = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(false);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \" + pm.environment.get(\"bgp_max_prefix_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_max_prefix_upd\")));",
											"});",
											"//peer-group",
											"pm.test(\"Validate peer-group = \" + pm.environment.get(\"bgp_group\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_group\"));",
											"});",
											"//removed send-default-route",
											"pm.test(\"Validate send-default-route = false \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//auth-password",
											"pm.test(\"Validate password =\" + pm.environment.get(\"bgp_password_upd\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"auth-password\"]).to.eql(pm.environment.get(\"bgp_password_upd\"));",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \" + pm.environment.get(\"bgp_maxprefixes_pct\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_maxprefixes_pct\")));",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:BGP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate config identifier = frinx-openconfig-policy-types:BGP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//removed export policy",
											"var mystring = '\"nexthopself\"';",
											"tests[\"Body does not matches string \" + mystring] = !responseBody.has(mystring);",
											"//removed remove-private-as",
											"var mystring = '\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\"';",
											"tests[\"Body does not matches string \" + mystring] = !responseBody.has(mystring);",
											"//removed send-community",
											"var mystring = '\"send-community\": \"BOTH\"';",
											"tests[\"Body does not matches string \" + mystring] = !responseBody.has(mystring);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete second default previouse bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe1dea51-35d1-46ee-b29c-1c8bd98bb024",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no router bgp 666 instance second-default ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no router bgp 666 instance second-default\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted second default bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name2}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name2}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XE BGP-XeExt CRUD",
			"description": null,
			"item": [
				{
					"name": "XE BGP-XeExt CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "configurate interafces and ipv6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63623e64-1b68-4758-b1b3-1ecb132ee1ce",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a89e444-f729-4f01-afc0-86870e8a1e04",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     interface {{test_interface}}\n     no shutdown\n     exit\n     interface {{test_interface_upd}}\n     no shutdown\n     exit\n     ipv6 unicast-routing\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a0b6fd5-eb3a-42c3-b757-6961562cea31",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98337603-8f30-4241-877a-abf6fea47cbb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XE BGP-XeExt CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "deconfigurate prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface {{test_interface}}\n     no interface {{test_interface_upd}}\n     no vrf definition Mgmt-intf\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 BGP CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 BGP CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "delete previouse bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp {{bgp_as2}} instance {{bgp_process-name2}}\n     no route-policy {{input_policy}}\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure neighbor group",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as2}} instance {{bgp_process-name2}}\n neighbor-group {{bgp_group}}\n exit\n exit\n route-policy {{input_policy}}\n end-policy\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 BGP CRUD READERS",
					"description": null,
					"item": [
						{
							"name": "delete previous bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b6b7050-4803-4487-9ba0-7c9e92e0e7e2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp {{bgp_as}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show nonexisting bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure neighbor group before bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n commit\n end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n neighbor {{ip1}}\n remote-as {{bgp_peer-as}}\n use neighbor-group {{bgp_group}}\n no shutdown\n commit\n end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cdd3a0f-8ba4-4f4a-a329-e9db424510b7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"ip1\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(pm.environment.get(\"ip1\"));",
											"});",
											"//peer-group",
											"pm.test(\"Validate peer-group = \" + pm.environment.get(\"bgp_group\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(pm.environment.get(\"bgp_group\"));",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \" + pm.environment.get(\"bgp_peer-as\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_peer-as\")));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \" + pm.environment.get(\"eth_enabled_true\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"eth_enabled_true\")));",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \" + pm.environment.get(\"ip1\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(pm.environment.get(\"ip1\"));",
											"});",
											"//as",
											"pm.test(\"Validate as = \" + pm.environment.get(\"bgp_as\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(pm.environment.get(\"bgp_as\")));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"bgp_process-name\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(pm.environment.get(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99ec49c7-e6aa-4759-8252-bbd59182be39",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\")",
											"setTimeout(function(){}, 10000);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"{{bgp_process-name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b408d60e-cf99-4280-be3e-9b7b8ded982c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no router bgp {{bgp_as}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 BGP CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "delete route-policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no route-policy {{input_policy}}\n     commit\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos BGP-JunosExt CRUD",
			"description": null,
			"item": [
				{
					"name": "Junos BGP-JunosExt CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "delete previouse bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete routing-options autonomous-system {{bgp_as}}\ndelete protocols bgp group {{bgp_group}} type internal\ndelete protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "set bgp groups precondition",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset routing-options autonomous-system {{bgp_as}}\nset protocols bgp group {{bgp_group}} type internal\nset protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"",
											"pm.test(\"error-type not present\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos BGP-JunosExt CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "delete previouse bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete routing-options autonomous-system {{bgp_as}}\ndelete protocols bgp group {{bgp_group}} type internal\ndelete protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"",
											"pm.test(\"error-type not present\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "bgp replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}