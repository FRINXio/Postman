{
	"info": {
		"_postman_id": "719f2ef9-9328-4b21-8284-0d9be52c6553",
		"name": "config_enhancements_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Mount",
			"description": null,
			"item": [
				{
					"name": "Mount IOS XR cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code\", function () {",
									"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"5.3.4\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Check status connected CLI",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('Check status connected CLI');",
									"    }",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Check uniconfig available",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (pm.response.code === 200) {",
									"    tests[\"Is connected\"] = true;",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('Check uniconfig available');",
									"    }",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration"
					},
					"response": []
				},
				{
					"name": "store running-config to file",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"",
									"pm.test(\"File creted\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Building configuration\");",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"[OK]\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"copy running-config {{conf_file_stored}}\n     {{conf_file_stored}}\n    \"\n  }\n}"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
					},
					"response": []
				}
			]
		},
		{
			"name": "Unmount",
			"description": null,
			"item": [
				{
					"name": "DELETE Mount IOS XR cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "Check unmounted CLI",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
					},
					"response": []
				},
				{
					"name": "remove stored running-config file",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Config file removed\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"delete \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Delete \"+postman.getEnvironmentVariable(\"conf_file_stored\")+\"[confirm]\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"delete {{conf_file_stored}}\ny\"\n  }\n}"
						},
						"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
					},
					"response": []
				}
			]
		},
		{
			"name": "Normal case",
			"description": null,
			"item": [
				{
					"name": "1+2: ipv4 access-list",
					"description": null,
					"item": [
						{
							"name": "Create ipv4 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv4 access-list Ten0_2_0_0-ex-20171218-01\ndeny ipv4 0.0.0.0 0.255.255.255 any\ndeny ipv4 any 0.0.0.0 0.255.255.255\npermit ipv4 133.217.0.0 0.0.255.255 any\ndeny tcp any any eq 343\npermit ipv4 any any\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show ipv4 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 40\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(40);",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = 0.0.0.0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_TCP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_TCP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = 0.0.0.0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = 343\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(343);",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex-20171218-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex-20171218-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "delete access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv4 access-list Ten0_2_0_0-ex-20171218-01\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:acl-sets\": {\n        \"acl-set\": [\n            {\n                \"name\": \"Ten0_2_0_0-ex-20171218-01\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"config\": {\n                    \"name\": \"Ten0_2_0_0-ex-20171218-01\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 40,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 40\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"ANY\",\n                                    \"destination-port\": 343\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 10,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    },\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 10\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 50,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 50\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 20,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"frinx-acl-extension:destination-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 20\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 30,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.0.255.255\",\n                                        \"address\": \"133.217.0.0\"\n                                    },\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 30\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace ipv4 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 40\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(40);",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = 0.0.0.0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_TCP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_TCP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = 0.0.0.0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = 343\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(343);",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex-20171218-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex-20171218-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "31: ipv4 access-list",
					"description": null,
					"item": [
						{
							"name": "Create ipv4 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv4 access-list Ten0_2_0_0-ex-20171214-01\n1 deny tcp host 0.0.0.0 any\n2 deny udp any host 0.0.0.0\n3 deny icmp any any\n4 permit udp 0.0.0.0 0.255.255.255 eq 10 0.0.0.0 0.255.255.255 gt 10\n5 permit udp 0.0.0.0 0.255.255.255 gt 10 0.0.0.0 0.255.255.255 lt 10\n6 permit udp 0.0.0.0 0.255.255.255 lt 10 any range 10 10\n7 permit udp any range 1 10 host 0.0.0.0\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show ipv4 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(2);",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = 0.0.0.0/32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/32\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_UDP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = 0.0.0.0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex-20171214-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171214-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex-20171214-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171214-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "delete access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv4 access-list Ten0_2_0_0-ex-20171214-01\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:acl-sets\": {\n        \"acl-set\": [\n            {\n                \"name\": \"Ten0_2_0_0-ex-20171214-01\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"config\": {\n                    \"name\": \"Ten0_2_0_0-ex-20171214-01\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 2,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"destination-address\": \"0.0.0.0/32\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 2\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"ANY\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 1,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/32\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 1\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"ANY\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 4,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    },\n                                    \"frinx-acl-extension:destination-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 4\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": 10,\n                                    \"destination-port\": \"10..65535\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 3,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 3\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 6,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    },\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 6\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"0..10\",\n                                    \"destination-port\": \"10..10\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 5,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    },\n                                    \"frinx-acl-extension:destination-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 5\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"10..65535\",\n                                    \"destination-port\": \"0..10\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 7,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"destination-address\": \"0.0.0.0/32\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 7\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"1..10\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace ipv4 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(2);",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = 0.0.0.0/32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/32\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_UDP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = 0.0.0.0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex-20171214-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171214-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex-20171214-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171214-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "3+4: ipv6 access-list 3",
					"description": null,
					"item": [
						{
							"name": "Create ipv6 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv6 access-list Ten0_2_0_0-ex6-20171218-01\ndeny icmpv6 any any 133 ttl lt 255\ndeny ipv6 any 2400:2000:3::/48\npermit icmpv6 any any\ndeny ipv6 ::/8 any\npermit ipv6 any any\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show ipv6 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c805780-8195-4da4-87f9-244aa04ffa46",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(40);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(40);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/8\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = 133\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(133);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"config\"][\"sequence-id\"]).to.eql(10);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(10);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"0..254\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"config\"][\"sequence-id\"]).to.eql(50);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"sequence-id\"]).to.eql(50);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"config\"][\"sequence-id\"]).to.eql(20);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"sequence-id\"]).to.eql(20);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"2400:2000:3::/48\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = ::/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"config\"][\"sequence-id\"]).to.eql(30);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 30\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"sequence-id\"]).to.eql(30);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = ::/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_ICMP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = ::/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex6-20171218-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex6-20171218-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "delete access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list Ten0_2_0_0-ex6-20171218-01\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"frinx-openconfig-acl:acl-sets\": {\n    \"acl-set\": [\n      {\n        \"name\": \"Ten0_2_0_0-ex6-20171218-01\",\n        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n        \"config\": {\n          \"name\": \"Ten0_2_0_0-ex6-20171218-01\",\n          \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n        },\n        \"acl-entries\": {\n          \"acl-entry\": [\n            {\n              \"sequence-id\": 40,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/8\",\n                  \"destination-address\": \"::/0\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 40\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 10,\n              \"ipv6\": {\n                \"config\": {\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                  \"destination-address\": \"::/0\",\n                  \"source-address\": \"::/0\",\n                  \"frinx-acl-extension:hop-range\": \"0..254\"\n                }\n              },\n              \"frinx-acl-extension:icmp\": {\n                \"config\": {\n                  \"msg-type\": 133\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 10\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 50,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/0\",\n                  \"destination-address\": \"::/0\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 50\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 20,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/0\",\n                  \"destination-address\": \"2400:2000:3::/48\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 20\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 30,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/0\",\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                  \"destination-address\": \"::/0\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 30\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace ipv6 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2da8c51-7321-46d0-866e-23316c05d97f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(40);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(40);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/8\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = 133\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(133);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"config\"][\"sequence-id\"]).to.eql(10);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(10);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"0..254\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"config\"][\"sequence-id\"]).to.eql(50);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"sequence-id\"]).to.eql(50);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"config\"][\"sequence-id\"]).to.eql(20);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"sequence-id\"]).to.eql(20);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"2400:2000:3::/48\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = ::/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"config\"][\"sequence-id\"]).to.eql(30);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 30\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"sequence-id\"]).to.eql(30);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = ::/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_ICMP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = ::/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex6-20171218-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Ten0_2_0_0-ex6-20171218-01\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "32: ipv6 access-list",
					"description": null,
					"item": [
						{
							"name": "Create ipv6 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv6 access-list Ten0_2_0_0-ex6-20171218-01\n1 deny tcp ::/64 any\n2 deny udp any ::/64\n3 permit tcp ::/64 eq 10 ::/64 gt 10\n4 permit udp ::/64 gt 10 ::/64 lt 10\n5 permit udp ::/64 lt 10 any range 10 10\n6 permit udp any range 10 100 any\n7 permit icmpv6 2400:2000:3::/48 2400:2000:3::/48 100 ttl gt 10\n8 permit icmpv6 ::/64 ::/64 100 ttl gt 10\n9 permit icmpv6 ::/64 ::/64 100 ttl lt 10\n10 permit icmpv6 ::/64 ::/64 100 ttl range 10 100\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show ipv6 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(2);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(2);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = ::/64\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_UDP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"config\"][\"sequence-id\"]).to.eql(1);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(1);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:DROP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = ::/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_TCP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = ::/64\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"config\"][\"sequence-id\"]).to.eql(4);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"sequence-id\"]).to.eql(4);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = 0..10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"0..10\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = 10..65535\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"10..65535\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = ::/64\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = ::/64\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"config\"][\"sequence-id\"]).to.eql(3);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"sequence-id\"]).to.eql(3);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = 10..65535\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"10..65535\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"transport\"][\"config\"][\"source-port\"]).to.eql(10);",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_TCP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"config\"][\"sequence-id\"]).to.eql(6);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"sequence-id\"]).to.eql(6);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = 10..100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"10..100\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"config\"][\"sequence-id\"]).to.eql(5);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"sequence-id\"]).to.eql(5);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"10..10\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"0..10\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_UDP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(100);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"config\"][\"sequence-id\"]).to.eql(8);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"sequence-id\"]).to.eql(8);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"11..255\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(100);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"config\"][\"sequence-id\"]).to.eql(7);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"sequence-id\"]).to.eql(7);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"2400:2000:3::/48\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"11..255\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"2400:2000:3::/48\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(100);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"config\"][\"sequence-id\"]).to.eql(10);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"sequence-id\"]).to.eql(10);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"10..100\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(100);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"config\"][\"sequence-id\"]).to.eql(9);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"sequence-id\"]).to.eql(9);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_ICMP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"0..9\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "delete access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list Ten0_2_0_0-ex6-20171218-01\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"frinx-openconfig-acl:acl-sets\": {\n    \"acl-set\": [\n      {\n        \"name\": \"Ten0_2_0_0-ex6-20171218-01\",\n        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n        \"config\": {\n          \"name\": \"Ten0_2_0_0-ex6-20171218-01\",\n          \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n        },\n        \"acl-entries\": {\n          \"acl-entry\": [\n            {\n              \"sequence-id\": 2,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/0\",\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                  \"destination-address\": \"::/64\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 2\n              },\n              \"transport\": {\n                \"config\": {\n                  \"source-port\": \"ANY\",\n                  \"destination-port\": \"ANY\"\n                }\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 1,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/64\",\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                  \"destination-address\": \"::/0\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 1\n              },\n              \"transport\": {\n                \"config\": {\n                  \"source-port\": \"ANY\",\n                  \"destination-port\": \"ANY\"\n                }\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 4,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/64\",\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                  \"destination-address\": \"::/64\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 4\n              },\n              \"transport\": {\n                \"config\": {\n                  \"source-port\": \"10..65535\",\n                  \"destination-port\": \"0..10\"\n                }\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 3,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/64\",\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                  \"destination-address\": \"::/64\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 3\n              },\n              \"transport\": {\n                \"config\": {\n                  \"source-port\": 10,\n                  \"destination-port\": \"10..65535\"\n                }\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 6,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/0\",\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                  \"destination-address\": \"::/0\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 6\n              },\n              \"transport\": {\n                \"config\": {\n                  \"source-port\": \"10..100\",\n                  \"destination-port\": \"ANY\"\n                }\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 5,\n              \"ipv6\": {\n                \"config\": {\n                  \"source-address\": \"::/64\",\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                  \"destination-address\": \"::/0\"\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 5\n              },\n              \"transport\": {\n                \"config\": {\n                  \"source-port\": \"0..10\",\n                  \"destination-port\": \"10..10\"\n                }\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 8,\n              \"ipv6\": {\n                \"config\": {\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                  \"destination-address\": \"::/64\",\n                  \"source-address\": \"::/64\",\n                  \"frinx-acl-extension:hop-range\": \"11..255\"\n                }\n              },\n              \"frinx-acl-extension:icmp\": {\n                \"config\": {\n                  \"msg-type\": 100\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 8\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 7,\n              \"ipv6\": {\n                \"config\": {\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                  \"destination-address\": \"2400:2000:3::/48\",\n                  \"source-address\": \"2400:2000:3::/48\",\n                  \"frinx-acl-extension:hop-range\": \"11..255\"\n                }\n              },\n              \"frinx-acl-extension:icmp\": {\n                \"config\": {\n                  \"msg-type\": 100\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 7\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 10,\n              \"ipv6\": {\n                \"config\": {\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                  \"destination-address\": \"::/64\",\n                  \"source-address\": \"::/64\",\n                  \"frinx-acl-extension:hop-range\": \"10..100\"\n                }\n              },\n              \"frinx-acl-extension:icmp\": {\n                \"config\": {\n                  \"msg-type\": 100\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 10\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            },\n            {\n              \"sequence-id\": 9,\n              \"ipv6\": {\n                \"config\": {\n                  \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                  \"destination-address\": \"::/64\",\n                  \"source-address\": \"::/64\",\n                  \"frinx-acl-extension:hop-range\": \"0..9\"\n                }\n              },\n              \"frinx-acl-extension:icmp\": {\n                \"config\": {\n                  \"msg-type\": 100\n                }\n              },\n              \"config\": {\n                \"sequence-id\": 9\n              },\n              \"actions\": {\n                \"config\": {\n                  \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace ipv6 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(2);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(2);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = ::/64\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_UDP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"config\"][\"sequence-id\"]).to.eql(1);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(1);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:DROP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = ::/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_TCP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = ::/64\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"config\"][\"sequence-id\"]).to.eql(4);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"sequence-id\"]).to.eql(4);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = 0..10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"0..10\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = 10..65535\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"10..65535\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = ::/64\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = ::/64\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"config\"][\"sequence-id\"]).to.eql(3);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"sequence-id\"]).to.eql(3);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = 10..65535\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"10..65535\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"transport\"][\"config\"][\"source-port\"]).to.eql(10);",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_TCP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"config\"][\"sequence-id\"]).to.eql(6);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"sequence-id\"]).to.eql(6);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"ANY\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = 10..100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"10..100\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"config\"][\"sequence-id\"]).to.eql(5);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"sequence-id\"]).to.eql(5);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-port",
											"pm.test(\"Validate destination-port = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"transport\"][\"config\"][\"destination-port\"]).to.eql(\"10..10\");",
											"});",
											"//source-port",
											"pm.test(\"Validate source-port = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"0..10\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_UDP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_UDP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(100);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"config\"][\"sequence-id\"]).to.eql(8);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"sequence-id\"]).to.eql(8);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"11..255\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(100);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"config\"][\"sequence-id\"]).to.eql(7);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"sequence-id\"]).to.eql(7);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"2400:2000:3::/48\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"11..255\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"2400:2000:3::/48\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(100);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"config\"][\"sequence-id\"]).to.eql(10);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"sequence-id\"]).to.eql(10);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"10..100\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(100);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"config\"][\"sequence-id\"]).to.eql(9);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"sequence-id\"]).to.eql(9);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/64\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = frinx-openconfig-packet-match-types:IP_ICMP\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"0..9\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][9][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/64\");",
											"});",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-1: class-map critical",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 0\nmatch mpls experimenta topmost 0\nmatch precedence critical\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c042630b-db1c-4890-b581-cbca7d0c9823",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = critical\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"critical\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [0]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "720d21a1-a6c2-4cc9-a310-cde1942d8767",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = critical\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"critical\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-2: class-map flash",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 0\nmatch mpls experimenta topmost 0\nmatch precedence flash\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0df44975-82bf-4751-9efa-5fa5b3da28f1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = flash\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"flash\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"flash\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [0]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1b5b614-b35a-4c6c-a2f7-5193038e761c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = flash\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"flash\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-3: class-map flash-override",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 0\nmatch mpls experimenta topmost 0\nmatch precedence flash-override\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1810b391-4d8a-4737-95ec-4ea5d330a921",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = flash-override\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"flash-override\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"flash-override\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [0]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4355946-a9d9-4112-9807-4f93c38dba31",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = flash-override\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"flash-override\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-4: class-map immediate",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 0\nmatch mpls experimenta topmost 0\nmatch precedence immediate\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a84b00ca-97be-426a-b161-9c76fb7583e0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = immediate\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"immediate\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"immediate\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [0]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68059659-a3ef-4f26-83ce-b76a8cb500a0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = immediate\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"immediate\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-5: class-map internet",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 0\nmatch mpls experimenta topmost 0\nmatch precedence internet\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08ffc725-2419-4763-847c-9cc3346b4c9a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = internet\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"internet\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"internet\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [0]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67a7332c-f163-47e0-96fd-ab9b9e043481",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = internet\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"internet\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-6: class-map network",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 0\nmatch mpls experimenta topmost 0\nmatch precedence network\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8150dba1-b385-4b09-9034-c12f4d9d5735",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = network\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"network\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group frinx-qos-extension:qos-group= \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"network\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [0]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f04595e-a8d4-492c-a164-ec17d6caa3d1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = network\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"network\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group frinx-qos-extension:qos-group= \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-7: class-map priority",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 0\nmatch mpls experimenta topmost 0\nmatch precedence priority\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98c1387e-de18-4a32-beac-1f4fafc7a875",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = priority\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"priority\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = frinx-qos-extension:qos-group\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"priority\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [0]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19d5461e-702b-4e19-8fde-dc053ca87503",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = priority\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"priority\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = frinx-qos-extension:qos-group\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-8: class-map routine",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 0\nmatch mpls experimenta topmost 0\nmatch precedence routine\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e39cfca-a251-4ce8-96f3-5bfc95acb5d5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"routine\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [0]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31d23084-6e84-4430-9440-24fd9f2bd906",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([0]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-9: class-map 0",
					"description": null,
					"item": [
						{
							"name": "create class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-all test_1000\nmatch qos-group 10\nmatch mpls experimental topmost 0\nmatch precedence 0\nmatch access-group ipv4 test_2000\nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "801c91ad-baaa-4b79-ad56-cc7b17509453",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(0);",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([10]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "delete class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno class-map match-all test_1000\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"0\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [10]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d4f6eb6-a29a-4f53-98c0-c068622d528f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(0);",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([10]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-1: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass class-default\nset qos-group 1\nset mpls  experimental topmost 0\nset precedence 0\npolice rate percent 1\nqueue-limit 1 ms\nbandwidth remaining percent 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eea4ff1d-340e-45f3-8f63-a1780280e5c9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([1]);",
											"});",
											"//",
											"pm.test(\"Validate  = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(0);",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy-default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Count-Policy-default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Count-Policy-default"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//frinx-qos-extension:max-queue-depth-ms",
											"pm.test(\"Validate frinx-qos-extension:max-queue-depth-ms = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(1);",
											"});",
											"//cir-pct-remaining",
											"pm.test(\"Validate cir-pct-remaining = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(1);",
											"});",
											"//max-queue-depth-percent",
											"pm.test(\"Validate max-queue-depth-percent = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Count-Policy-default"
							},
							"response": []
						},
						{
							"name": "replace config class-default",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Count-Policy-default\",\n            \"config\": {\n                \"name\": \"Count-Policy-default\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"all\",\n                        \"config\": {\n                            \"id\": \"all\"\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"0\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [1]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Count-Policy-default"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"cir-pct-remaining\": 1,\n                                \"max-queue-depth-percent\": 1,\n                                \"frinx-qos-extension:max-queue-depth-ms\": 1\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dd8cf69a-b8e1-4ef1-90f2-bf11bac2fd26",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([1]);",
											"});",
											"//",
											"pm.test(\"Validate  = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(0);",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy-default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Count-Policy-default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Count-Policy-default"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//frinx-qos-extension:max-queue-depth-ms",
											"pm.test(\"Validate frinx-qos-extension:max-queue-depth-ms = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(1);",
											"});",
											"//cir-pct-remaining",
											"pm.test(\"Validate cir-pct-remaining = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(1);",
											"});",
											"//max-queue-depth-percent",
											"pm.test(\"Validate max-queue-depth-percent = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "7: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy set-no-export\nset community (no-export)\nend-policy\nroute-policy All_Deny\ndrop\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\naddress-family ipv6 unicast\nnetwork 2400:2000:0:201:0:3257:2002:0/126 route-policy set-no-export\nexit\naddress-family ipv4 unicast\nexit\nneighbor 221.111.203.118\nremote-as 40263\npassword clear FR35-43295\nno shutdown\ndescription AS40263-US-5\naddress-family ipv4 unicast\nroute-policy All_Deny in\nmaximum-prefix 10000 75\nroute-policy All_Deny out\nremove-private-AS\nsoft-reconfiguration inbound always\nexit\nexit\nneighbor 2400:8800:7f02::1\nremote-as 40263\npassword clear FR35-43295\nno shutdown\ndescription AS40263-US-5-v6\naddress-family ipv6 unicast\nroute-policy All_Deny in\nmaximum-prefix 10000 75\nroute-policy All_Deny out\nremove-private-AS\nsoft-reconfiguration inbound always\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(\"AS40263-US-5\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(10000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"description\"]).to.eql(\"AS40263-US-5-v6\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(10000);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(\"2400:2000:0:201:0:3257:2002:0/126\");",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(\"2400:2000:0:201:0:3257:2002:0/126\");",
											"});",
											"//frinx-cisco-bgp-extension:apply-policy",
											"pm.test(\"Validate frinx-cisco-bgp-extension:apply-policy = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"frinx-cisco-bgp-extension:apply-policy\"]).to.eql(\"set-no-export\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp 17676\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            },\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"221.111.203.118\",\n                            \"config\": {\n                                \"enabled\": true,\n                                \"auth-password\": \"06203D7219035D4A574E47\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"neighbor-address\": \"221.111.203.118\",\n                                \"peer-as\": 40263,\n                                \"description\": \"AS40263-US-5\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"ipv4-unicast\": {\n                                            \"prefix-limit\": {\n                                                \"config\": {\n                                                    \"shutdown-threshold-pct\": 75,\n                                                    \"max-prefixes\": 10000\n                                                }\n                                            },\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"config\": {\n                                            \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                                \"always\": true\n                                            },\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"All_Deny\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            \"neighbor-address\": \"2400:8800:7f02::1\",\n                            \"config\": {\n                                \"enabled\": true,\n                                \"auth-password\": \"013534570E46525C73151B\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"neighbor-address\": \"2400:8800:7f02::1\",\n                                \"peer-as\": 40263,\n                                \"description\": \"AS40263-US-5-v6\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                        \"config\": {\n                                            \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                                \"always\": true\n                                            },\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                        },\n                                        \"ipv6-unicast\": {\n                                            \"prefix-limit\": {\n                                                \"config\": {\n                                                    \"shutdown-threshold-pct\": 75,\n                                                    \"max-prefixes\": 10000\n                                                }\n                                            },\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"All_Deny\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n                        \"prefix\": \"2400:2000:0:201:0:3257:2002:0/126\",\n                        \"config\": {\n                            \"prefix\": \"2400:2000:0:201:0:3257:2002:0/126\",\n                            \"frinx-cisco-bgp-extension:apply-policy\": \"set-no-export\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(\"AS40263-US-5\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(10000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"description\"]).to.eql(\"AS40263-US-5-v6\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(10000);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(\"2400:2000:0:201:0:3257:2002:0/126\");",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(\"2400:2000:0:201:0:3257:2002:0/126\");",
											"});",
											"//frinx-cisco-bgp-extension:apply-policy",
											"pm.test(\"Validate frinx-cisco-bgp-extension:apply-policy = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"frinx-cisco-bgp-extension:apply-policy\"]).to.eql(\"set-no-export\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "7A: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy from_PEER-US-MED20100-ODN-Transit-1\nif as-path length ge 75 then\nset local-preference 1000\nendif\nend-policy\nroute-policy to_PEER-MED100-ODN-Transit-1\nif as-path length ge 75 then\nset local-preference 1000\nendif\nend-policy\nroute-policy from_PEER-MED20100-ODN-Transit-US-v6\nif as-path length ge 75 then\nset local-preference 1000\nendif\nend-policy\nroute-policy to_PEER-MED200-ODN-Transit-US-v6\nif as-path length ge 75 then\nset local-preference 1000\nendif\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\naddress-family ipv4 unicast\nexit\nneighbor 221.111.203.118\nremote-as 40263\naddress-family ipv4 unicast\nroute-policy from_PEER-US-MED20100-ODN-Transit-1 in\nroute-policy to_PEER-MED100-ODN-Transit-1 out\nexit\nexit\nexit\nrouter bgp 17676\naddress-family ipv6 unicast\nneighbor 2400:8800:7f02::1\nremote-as 40263\naddress-family ipv6 unicast\nroute-policy from_PEER-MED20100-ODN-Transit-US-v6 in\nroute-policy to_PEER-MED200-ODN-Transit-US-v6 out\ncommit\nend\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"from_PEER-US-MED20100-ODN-Transit-1\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"to_PEER-MED100-ODN-Transit-1\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"from_PEER-MED20100-ODN-Transit-US-v6\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"to_PEER-MED200-ODN-Transit-US-v6\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp 17676\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            },\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"221.111.203.118\",\n                            \"config\": {\n                                \"neighbor-address\": \"221.111.203.118\",\n                                \"enabled\": true,\n                                \"peer-as\": 40263\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"ipv4-unicast\": {\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"to_PEER-MED100-ODN-Transit-1\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"from_PEER-US-MED20100-ODN-Transit-1\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            \"neighbor-address\": \"2400:8800:7f02::1\",\n                            \"config\": {\n                                \"neighbor-address\": \"2400:8800:7f02::1\",\n                                \"enabled\": true,\n                                \"peer-as\": 40263\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                        },\n                                        \"ipv6-unicast\": {\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"to_PEER-MED200-ODN-Transit-US-v6\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"from_PEER-MED20100-ODN-Transit-US-v6\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"from_PEER-US-MED20100-ODN-Transit-1\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"to_PEER-MED100-ODN-Transit-1\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"from_PEER-MED20100-ODN-Transit-US-v6\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"to_PEER-MED200-ODN-Transit-US-v6\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "7B: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy All_Deny\ndrop\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\naddress-family ipv4 unicast\nneighbor 221.111.203.118\nremote-as 40263\naddress-family ipv4 unicast\nroute-policy All_Deny in\nroute-policy All_Deny out\nexit\nexit\nexit\nrouter bgp 17676\naddress-family ipv6 unicast\nneighbor 2400:8800:7f02::1\nremote-as 40263\naddress-family ipv6 unicast\nroute-policy All_Deny in\nroute-policy All_Deny out\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp 17676\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            },\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"221.111.203.118\",\n                            \"config\": {\n                                \"neighbor-address\": \"221.111.203.118\",\n                                \"enabled\": true,\n                                \"peer-as\": 40263\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"ipv4-unicast\": {\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"All_Deny\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            \"neighbor-address\": \"2400:8800:7f02::1\",\n                            \"config\": {\n                                \"neighbor-address\": \"2400:8800:7f02::1\",\n                                \"enabled\": true,\n                                \"peer-as\": 40263\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                        },\n                                        \"ipv6-unicast\": {\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"All_Deny\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "27: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\nneighbor 2400:8800:7f02::1\nno shutdown\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp 17676\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"2400:8800:7f02::1\",\n                            \"config\": {\n                                \"neighbor-address\": \"2400:8800:7f02::1\",\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "28: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\nneighbor 2400:8800:7f02::1\nremote-as 40263\nshutdown\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp 17676\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"2400:8800:7f02::1\",\n                            \"config\": {\n                                \"neighbor-address\": \"2400:8800:7f02::1\",\n                                \"enabled\": false,\n                                \"peer-as\": 40263\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "29: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy All_Deny\ndrop\nend-policy\nroute-policy to_PEER-MED100-ODN-Transit-Asia\nif as-path length ge 75 then\nset local-preference 1000\nendif\nend-policy\nroute-policy to_PEER-MED100-ODN-Transit-Asia-v6\nif as-path length ge 75 then\nset local-preference 1000\nendif\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\naddress-family ipv4 unicast\nneighbor 103.231.152.78\nremote-as 7552\npassword clear ybbha10124vtdl\nshutdown\ndescription AS7552-SG-1\naddress-family ipv4 unicast\nroute-policy All_Deny in\nmaximum-prefix 13000 75\nroute-policy to_PEER-MED100-ODN-Transit-Asia out\nnext-hop-self\nremove-private-AS\nsoft-reconfiguration inbound always\nexit\nexit\naddress-family ipv6 unicast\nneighbor 2001:df5:b800:bb00::7552:2\nremote-as 7552\npassword clear ybbha10124vtdl\nshutdown\ndescription AS7552-SG-1-v6\naddress-family ipv6 unicast\nroute-policy All_Deny in\nmaximum-prefix 13000 75\nroute-policy to_PEER-MED100-ODN-Transit-Asia-v6 out\nnext-hop-self\nremove-private-AS\nsoft-reconfiguration inbound always\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"2001:df5:b800:bb00::7552:2\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"2001:df5:b800:bb00::7552:2\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(\"AS7552-SG-1-v6\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(7552);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia-v6\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][1]).to.eql(\"nexthopself\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(13000);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"103.231.152.78\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"103.231.152.78\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"description\"]).to.eql(\"AS7552-SG-1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(7552);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(13000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][1]).to.eql(\"nexthopself\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp 17676\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            },\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"2001:df5:b800:bb00::7552:2\",\n                            \"config\": {\n                                \"enabled\": false,\n                                \"auth-password\": \"09554C0B110446425A5E503C3F2024\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"neighbor-address\": \"2001:df5:b800:bb00::7552:2\",\n                                \"peer-as\": 7552,\n                                \"description\": \"AS7552-SG-1-v6\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                        \"config\": {\n                                            \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                                \"always\": true\n                                            },\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                        },\n                                        \"ipv6-unicast\": {\n                                            \"prefix-limit\": {\n                                                \"config\": {\n                                                    \"shutdown-threshold-pct\": 75,\n                                                    \"max-prefixes\": 13000\n                                                }\n                                            },\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"to_PEER-MED100-ODN-Transit-Asia-v6\",\n                                                    \"nexthopself\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            \"neighbor-address\": \"103.231.152.78\",\n                            \"config\": {\n                                \"enabled\": false,\n                                \"auth-password\": \"0716234E4608485546405F1A102E27\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"neighbor-address\": \"103.231.152.78\",\n                                \"peer-as\": 7552,\n                                \"description\": \"AS7552-SG-1\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"ipv4-unicast\": {\n                                            \"prefix-limit\": {\n                                                \"config\": {\n                                                    \"shutdown-threshold-pct\": 75,\n                                                    \"max-prefixes\": 13000\n                                                }\n                                            },\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"config\": {\n                                            \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                                \"always\": true\n                                            },\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"to_PEER-MED100-ODN-Transit-Asia\",\n                                                    \"nexthopself\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"2001:df5:b800:bb00::7552:2\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"2001:df5:b800:bb00::7552:2\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(\"AS7552-SG-1-v6\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(7552);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//auth-password",
											"pm.test(\"Validate auth-password = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"auth-password\"]).to.eql(\"09554C0B110446425A5E503C3F2024\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia-v6\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][1]).to.eql(\"nexthopself\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(13000);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"103.231.152.78\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"103.231.152.78\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"description\"]).to.eql(\"AS7552-SG-1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(7552);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//auth-password",
											"pm.test(\"Validate auth-password = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"auth-password\"]).to.eql(\"0716234E4608485546405F1A102E27\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(13000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][1]).to.eql(\"nexthopself\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "30: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create precondition",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Loopback100\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\naddress-family ipv4 unicast\n!\nneighbor 221.111.203.118\nremote-as 7552\nupdate-source Loopback100\nebgp-multihop 100\naddress-family ipv4 unicast\nsend-community-ebgp\ndefault-originate\nnext-hop-self\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//multihop-ttl",
											"pm.test(\"Validate multihop-ttl = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"multihop-ttl\"]).to.eql(100);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//send-community",
											"pm.test(\"Validate send-community = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"send-community\"]).to.eql(\"BOTH\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(7552);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(\"Loopback100\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(true);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"nexthopself\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp 17676\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"221.111.203.118\",\n                            \"config\": {\n                                \"enabled\": true,\n                                \"send-community\": \"BOTH\",\n                                \"neighbor-address\": \"221.111.203.118\",\n                                \"peer-as\": 7552\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"ipv4-unicast\": {\n                                            \"config\": {\n                                                \"send-default-route\": true\n                                            }\n                                        },\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"nexthopself\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            },\n                            \"ebgp-multihop\": {\n                                \"config\": {\n                                    \"enabled\": true,\n                                    \"multihop-ttl\": 100\n                                }\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"Loopback100\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//multihop-ttl",
											"pm.test(\"Validate multihop-ttl = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"ebgp-multihop\"][\"config\"][\"multihop-ttl\"]).to.eql(100);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//send-community",
											"pm.test(\"Validate send-community = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"send-community\"]).to.eql(\"BOTH\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(7552);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(\"Loopback100\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(true);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"nexthopself\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "8: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter bgp 17676\naddress-family ipv6 unicast\nno network 2400:2000:0:201:0:3257:2002:0/126 route-policy set-no-export\nexit\nno neighbor 221.111.203.118\nno neighbor 2400:8800:7f02::1\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "delete bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router bgp 17676\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "9: router ospf",
					"description": null,
					"item": [
						{
							"name": "Create  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf 100\narea 0\ninterface GigabitEthernet 0/0/0/0\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"100\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"100\");",
											"});",
											"//id",
											"pm.test(\"Validate id = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(0);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "delete ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router ospf 100\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "replace config with interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0/0\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0/0\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"100\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"100\");",
											"});",
											"//id",
											"pm.test(\"Validate id = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(0);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "10: router ospf",
					"description": null,
					"item": [
						{
							"name": "Create  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf 100\narea 0\nno interface GigabitEthernet 0/0/0/0\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"100\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"100\");",
											"});",
											"//id",
											"pm.test(\"Validate id = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"]).not.to.include(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(0);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "delete ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router ospf 100\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "replace config with interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"100\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"100\");",
											"});",
											"//id",
											"pm.test(\"Validate id = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"]).not.to.include(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(0);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "26: router ospf",
					"description": null,
					"item": [
						{
							"name": "Create router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nrouter ospf 100\nmax-metric router-lsa on-startup 5\nmax-metric router-lsa on-switchover 5\narea 0\ninterface Bundle-Ether16\nbfd fast-detect disable\ninterface GigabitEthernet0/0/0/1\nbfd fast-detect disable\ncost 1700\nmpls ldp sync disable\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"100\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"100\");",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"trigger\"]).to.eql(\"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\");",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"trigger\"]).to.eql(\"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\");",
											"});",
											"//timeout",
											"pm.test(\"Validate timeout = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(5);",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"trigger\"]).to.eql(\"frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\");",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"config\"][\"trigger\"]).to.eql(\"frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\");",
											"});",
											"//timeout",
											"pm.test(\"Validate timeout = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"config\"][\"timeout\"]).to.eql(5);",
											"});",
											"//id",
											"pm.test(\"Validate id = Bundle-Ether16\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//metric",
											"pm.test(\"Validate metric = 1700\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"config\"][\"metric\"]).to.eql(1700);",
											"});",
											"//id",
											"pm.test(\"Validate id = GigabitEthernet0/0/0/1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]).to.eql(\"GigabitEthernet0/0/0/1\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(0);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "delete ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno router ospf 100\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  deleted router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"frinx-cisco-ospf-extension:max-metric-timers\": {\n                            \"max-metric-timer\": [\n                                {\n                                    \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                    \"config\": {\n                                        \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                        \"timeout\": 5\n                                    }\n                                },\n                                {\n                                    \"trigger\": \"frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\",\n                                    \"config\": {\n                                        \"trigger\": \"frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\",\n                                        \"timeout\": 5\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"Bundle-Ether16\",\n                                        \"frinx-bfd-extension:enable-bfd\": {\n                                            \"config\": {\n                                                \"enabled\": false\n                                            }\n                                        }\n                                    },\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0/1\",\n                                        \"config\": {\n                                            \"metric\": 1700\n                                        },\n                                        \"frinx-bfd-extension:enable-bfd\": {\n                                            \"config\": {\n                                                \"enabled\": false\n                                            }\n                                        },\n                                        \"mpls\": {\n                                            \"igp-ldp-sync\": {\n                                                \"config\": {\n                                                    \"enabled\": false\n                                                }\n                                            }\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = frinx-openconfig-policy-types:OSPF\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:OSPF\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"100\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"100\");",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"trigger\"]).to.eql(\"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\");",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"trigger\"]).to.eql(\"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\");",
											"});",
											"//timeout",
											"pm.test(\"Validate timeout = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][0][\"config\"][\"timeout\"]).to.eql(5);",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"trigger\"]).to.eql(\"frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\");",
											"});",
											"//trigger",
											"pm.test(\"Validate trigger = frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"config\"][\"trigger\"]).to.eql(\"frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\");",
											"});",
											"//timeout",
											"pm.test(\"Validate timeout = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"frinx-cisco-ospf-extension:max-metric-timers\"][\"max-metric-timer\"][1][\"config\"][\"timeout\"]).to.eql(5);",
											"});",
											"//id",
											"pm.test(\"Validate id = Bundle-Ether16\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"mpls\"][\"igp-ldp-sync\"][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//metric",
											"pm.test(\"Validate metric = 1700\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"config\"][\"metric\"]).to.eql(1700);",
											"});",
											"//id",
											"pm.test(\"Validate id = GigabitEthernet0/0/0/1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"id\"]).to.eql(\"GigabitEthernet0/0/0/1\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][1][\"frinx-bfd-extension:enable-bfd\"][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(0);",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf2}}"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "11+12: route-policy",
					"description": null,
					"item": [
						{
							"name": "Create  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy from_PEER-ODN-Transit-US-v6\nif as-path length ge 75 then\ndrop\nelseif destination in ipv6-ebgp-deny then\ndrop\nelse\nset local-preference 1000\nset community (17676:320, 17676:430, 17676:436)\nendif\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//operator",
											"pm.test(\"Validate operator = frinx-openconfig-policy-types:ATTRIBUTE_GE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_GE\");",
											"});",
											"//value",
											"pm.test(\"Validate value = 75\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(75);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = ipv6-ebgp-deny\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"ipv6-ebgp-deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-local-pref",
											"pm.test(\"Validate set-local-pref = 1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-local-pref\"]).to.eql(1000);",
											"});",
											"//",
											"pm.test(\"Validate  = 17676:320\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"17676:320\");",
											"});",
											"//",
											"pm.test(\"Validate  = 17676:430\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"17676:430\");",
											"});",
											"//",
											"pm.test(\"Validate  = 17676:436\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][2]).to.eql(\"17676:436\");",
											"});",
											"//method",
											"pm.test(\"Validate method = INLINE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_PEER-ODN-Transit-US-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_PEER-ODN-Transit-US-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_PEER-ODN-Transit-US-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_PEER-ODN-Transit-US-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "delete route-policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy from_PEER-ODN-Transit-US-v6\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  deleted router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"from_PEER-ODN-Transit-US-v6\",\n                \"config\": {\n                    \"name\": \"from_PEER-ODN-Transit-US-v6\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 75,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_GE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"ipv6-ebgp-deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-community\": {\n                                        \"config\": {\n                                            \"method\": \"INLINE\"\n                                        },\n                                        \"inline\": {\n                                            \"config\": {\n                                                \"communities\": [\n                                                    \"17676:320\",\n                                                    \"17676:430\",\n                                                    \"17676:436\"\n                                                ]\n                                            }\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-local-pref\": 1000\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//operator",
											"pm.test(\"Validate operator = frinx-openconfig-policy-types:ATTRIBUTE_GE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_GE\");",
											"});",
											"//value",
											"pm.test(\"Validate value = 75\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(75);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = ipv6-ebgp-deny\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"ipv6-ebgp-deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-local-pref",
											"pm.test(\"Validate set-local-pref = 1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-local-pref\"]).to.eql(1000);",
											"});",
											"//",
											"pm.test(\"Validate  = 17676:320\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"17676:320\");",
											"});",
											"//",
											"pm.test(\"Validate  = 17676:430\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"17676:430\");",
											"});",
											"//",
											"pm.test(\"Validate  = 17676:436\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][2]).to.eql(\"17676:436\");",
											"});",
											"//method",
											"pm.test(\"Validate method = INLINE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_PEER-ODN-Transit-US-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_PEER-ODN-Transit-US-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_PEER-ODN-Transit-US-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_PEER-ODN-Transit-US-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "13+14: route-policy",
					"description": null,
					"item": [
						{
							"name": "Create  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy from_as2222-MED200-ODN-Transit-Asia\nif as-path length ge 75 then\ndrop\nelseif destination in RFC1918-DSUA_deny then\ndrop\nelse\nset med 200\nset local-preference 1000\nset community (17676:320, 17676:432, 17676:435, 17676:438, 17676:441)\nendif\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//operator",
											"pm.test(\"Validate operator = frinx-openconfig-policy-types:ATTRIBUTE_GE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_GE\");",
											"});",
											"//value",
											"pm.test(\"Validate value = 75\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(75);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = RFC1918-DSUA_deny\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"RFC1918-DSUA_deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-local-pref",
											"pm.test(\"Validate set-local-pref = 1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-local-pref\"]).to.eql(1000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"17676:320\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"17676:432\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][2]).to.eql(\"17676:435\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][3]).to.eql(\"17676:438\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][4]).to.eql(\"17676:441\");",
											"});",
											"//method",
											"pm.test(\"Validate method = INLINE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_as2222-MED200-ODN-Transit-Asia\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_as2222-MED200-ODN-Transit-Asia\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_as2222-MED200-ODN-Transit-Asia\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_as2222-MED200-ODN-Transit-Asia\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "delete router-policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy from_as2222-MED200-ODN-Transit-Asia\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  deleted router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"from_as2222-MED200-ODN-Transit-Asia\",\n                \"config\": {\n                    \"name\": \"from_as2222-MED200-ODN-Transit-Asia\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 75,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_GE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"RFC1918-DSUA_deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-community\": {\n                                        \"config\": {\n                                            \"method\": \"INLINE\"\n                                        },\n                                        \"inline\": {\n                                            \"config\": {\n                                                \"communities\": [\n                                                    \"17676:320\",\n                                                    \"17676:432\",\n                                                    \"17676:435\",\n                                                    \"17676:438\",\n                                                    \"17676:441\"\n                                                ]\n                                            }\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-local-pref\": 1000,\n                                        \"set-med\": 200\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//operator",
											"pm.test(\"Validate operator = frinx-openconfig-policy-types:ATTRIBUTE_GE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_GE\");",
											"});",
											"//value",
											"pm.test(\"Validate value = 75\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(75);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = RFC1918-DSUA_deny\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"RFC1918-DSUA_deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-local-pref",
											"pm.test(\"Validate set-local-pref = 1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-local-pref\"]).to.eql(1000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"17676:320\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"17676:432\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][2]).to.eql(\"17676:435\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][3]).to.eql(\"17676:438\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][4]).to.eql(\"17676:441\");",
											"});",
											"//method",
											"pm.test(\"Validate method = INLINE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_as2222-MED200-ODN-Transit-Asia\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_as2222-MED200-ODN-Transit-Asia\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_as2222-MED200-ODN-Transit-Asia\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_as2222-MED200-ODN-Transit-Asia\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "15+16: route-policy",
					"description": null,
					"item": [
						{
							"name": "Create  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy from_PEER-MED300-ODN-Transit-Asia-v6\nif as-path length ge 75 then\ndrop\nelseif destination in ipv6-ebgp-deny then\ndrop\nelse\nset med 300\nset local-preference 1000\nset community (17676:320, 17676:432, 17676:438)\nendif\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//operator",
											"pm.test(\"Validate operator = frinx-openconfig-policy-types:ATTRIBUTE_GE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_GE\");",
											"});",
											"//value",
											"pm.test(\"Validate value = 75\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(75);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = ipv6-ebgp-deny\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"ipv6-ebgp-deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-local-pref",
											"pm.test(\"Validate set-local-pref = 1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-local-pref\"]).to.eql(1000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"17676:320\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"17676:432\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][2]).to.eql(\"17676:438\");",
											"});",
											"//method",
											"pm.test(\"Validate method = INLINE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_PEER-MED300-ODN-Transit-Asia-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_PEER-MED300-ODN-Transit-Asia-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_PEER-MED300-ODN-Transit-Asia-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_PEER-MED300-ODN-Transit-Asia-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "delete router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy from_PEER-MED300-ODN-Transit-Asia-v6\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  deleted router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"from_PEER-MED300-ODN-Transit-Asia-v6\",\n                \"config\": {\n                    \"name\": \"from_PEER-MED300-ODN-Transit-Asia-v6\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 75,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_GE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"ipv6-ebgp-deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-community\": {\n                                        \"config\": {\n                                            \"method\": \"INLINE\"\n                                        },\n                                        \"inline\": {\n                                            \"config\": {\n                                                \"communities\": [\n                                                    \"17676:320\",\n                                                    \"17676:432\",\n                                                    \"17676:438\"\n                                                ]\n                                            }\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-local-pref\": 1000,\n                                        \"set-med\": 300\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//operator",
											"pm.test(\"Validate operator = frinx-openconfig-policy-types:ATTRIBUTE_GE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_GE\");",
											"});",
											"//value",
											"pm.test(\"Validate value = 75\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(75);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = ipv6-ebgp-deny\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"ipv6-ebgp-deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-local-pref",
											"pm.test(\"Validate set-local-pref = 1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-local-pref\"]).to.eql(1000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][0]).to.eql(\"17676:320\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][1]).to.eql(\"17676:432\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"][2]).to.eql(\"17676:438\");",
											"});",
											"//method",
											"pm.test(\"Validate method = INLINE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_PEER-MED300-ODN-Transit-Asia-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_PEER-MED300-ODN-Transit-Asia-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_PEER-MED300-ODN-Transit-Asia-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_PEER-MED300-ODN-Transit-Asia-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "17+18: route-policy",
					"description": null,
					"item": [
						{
							"name": "Create  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy from_AS15169-OS-3-ODN-Transit-JP-v6\nset next-hop 2001:4860:1:1::545\napply from_PEER-MED300-ODN-Transit-JP-v6\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//call-policy",
											"pm.test(\"Validate call-policy = from_PEER-MED300-ODN-Transit-JP-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"from_PEER-MED300-ODN-Transit-JP-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//set-next-hop",
											"pm.test(\"Validate set-next-hop = 2001:4860:1:1::545\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"2001:4860:1:1::545\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_AS15169-OS-3-ODN-Transit-JP-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_AS15169-OS-3-ODN-Transit-JP-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_AS15169-OS-3-ODN-Transit-JP-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_AS15169-OS-3-ODN-Transit-JP-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "delete router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy from_AS15169-OS-3-ODN-Transit-JP-v6\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  deleted router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"from_AS15169-OS-3-ODN-Transit-JP-v6\",\n                \"config\": {\n                    \"name\": \"from_AS15169-OS-3-ODN-Transit-JP-v6\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"config\": {\n                                    \"call-policy\": \"from_PEER-MED300-ODN-Transit-JP-v6\"\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-next-hop\": \"2001:4860:1:1::545\"\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//call-policy",
											"pm.test(\"Validate call-policy = from_PEER-MED300-ODN-Transit-JP-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"from_PEER-MED300-ODN-Transit-JP-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//set-next-hop",
											"pm.test(\"Validate set-next-hop = 2001:4860:1:1::545\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"2001:4860:1:1::545\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_AS15169-OS-3-ODN-Transit-JP-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_AS15169-OS-3-ODN-Transit-JP-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = from_AS15169-OS-3-ODN-Transit-JP-v6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_AS15169-OS-3-ODN-Transit-JP-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "19+20: route-policy",
					"description": null,
					"item": [
						{
							"name": "Create  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy to_PEER-MED100-ODN-Transit-Asia\nif destination in RFC1918-DSUA-out_deny then\ndrop\nelseif community matches-any PEER-NOT-ADVERTISE then\ndrop\nelseif community matches-any PEER-1PREPEND then\nset med 100\nprepend as-path 17676\nelseif community matches-any PEER-2PREPEND then\nset med 100\nprepend as-path 17676 2\nelseif community matches-any PEER-3PREPEND then\nset med 100\nprepend as-path 17676 3\nelseif community matches-any Asia-PEER-NOT-ADVERTISE then\ndrop\nelseif community matches-any Asia-PEER-1PREPEND then\nset med 100\nprepend as-path 17676\nelseif community matches-any Asia-PEER-2PREPEND then\nset med 100\nprepend as-path 17676 2\nelseif community matches-any Asia-PEER-3PREPEND then\nset med 100\nprepend as-path 17676 3\nelseif destination in DENY_YBB_CIDR_long then\ndrop\nelseif destination in YBB_CIDR and as-path in 2 then\nset med 100\nelseif destination in DENY_IPR_CIDR_long then\ndrop\nelseif destination in IPR_CIDR and as-path in 2 then\nset med 100\nelseif community matches-any TRANSIT_MATCH or community matches-any PI_MATCH or community matches-any PRI-Single-PI or community matches-any MultiPriAS-PI or community matches-any MultiAS-ODN-CIDR or community matches-any MultiAS-PI-ODN or community matches-any ODN-TRANSIT-OUT then\nset med 100\nendif\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = RFC1918-DSUA-out_deny\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"RFC1918-DSUA-out_deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PEER-NOT-ADVERTISE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-NOT-ADVERTISE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PEER-1PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-1PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"config\"][\"name\"]).to.eql(\"4\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PEER-2PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-2PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"name\"]).to.eql(\"4\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"config\"][\"name\"]).to.eql(\"5\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PEER-3PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-3PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"name\"]).to.eql(\"5\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"config\"][\"name\"]).to.eql(\"6\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = Asia-PEER-NOT-ADVERTISE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-NOT-ADVERTISE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"name\"]).to.eql(\"6\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 7\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"config\"][\"name\"]).to.eql(\"7\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = Asia-PEER-1PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-1PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 7\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"name\"]).to.eql(\"7\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 8\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"config\"][\"name\"]).to.eql(\"8\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = Asia-PEER-2PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-2PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 8\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"name\"]).to.eql(\"8\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 9\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"config\"][\"name\"]).to.eql(\"9\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = Asia-PEER-3PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-3PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 9\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"name\"]).to.eql(\"9\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"config\"][\"name\"]).to.eql(\"10\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = DENY_YBB_CIDR_long\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_YBB_CIDR_long\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"name\"]).to.eql(\"10\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 11\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"config\"][\"name\"]).to.eql(\"11\");",
											"});",
											"//as-path-set",
											"pm.test(\"Validate as-path-set = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = YBB_CIDR\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"YBB_CIDR\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 11\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"name\"]).to.eql(\"11\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 12\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"config\"][\"name\"]).to.eql(\"12\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = DENY_IPR_CIDR_long\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_IPR_CIDR_long\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 12\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"name\"]).to.eql(\"12\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 13\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"config\"][\"name\"]).to.eql(\"13\");",
											"});",
											"//as-path-set",
											"pm.test(\"Validate as-path-set = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = IPR_CIDR\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"IPR_CIDR\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 13\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"name\"]).to.eql(\"13\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 14\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"config\"][\"name\"]).to.eql(\"14\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = TRANSIT_MATCH\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"TRANSIT_MATCH\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 14\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"name\"]).to.eql(\"14\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 15\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"config\"][\"name\"]).to.eql(\"15\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PI_MATCH\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PI_MATCH\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 15\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"name\"]).to.eql(\"15\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 16\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"config\"][\"name\"]).to.eql(\"16\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PRI-Single-PI\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PRI-Single-PI\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 16\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"name\"]).to.eql(\"16\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 17\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"config\"][\"name\"]).to.eql(\"17\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = MultiPriAS-PI\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiPriAS-PI\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 17\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"name\"]).to.eql(\"17\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 18\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"config\"][\"name\"]).to.eql(\"18\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = MultiAS-ODN-CIDR\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-ODN-CIDR\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 18\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"name\"]).to.eql(\"18\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 19\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"config\"][\"name\"]).to.eql(\"19\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = MultiAS-PI-ODN\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-PI-ODN\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 19\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"name\"]).to.eql(\"19\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 20\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"config\"][\"name\"]).to.eql(\"20\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = ODN-TRANSIT-OUT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ODN-TRANSIT-OUT\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 20\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"name\"]).to.eql(\"20\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = to_PEER-MED100-ODN-Transit-Asia\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia\");",
											"});",
											"//name",
											"pm.test(\"Validate name = to_PEER-MED100-ODN-Transit-Asia\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "delete route policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy to_PEER-MED100-ODN-Transit-Asia\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  deleted router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"to_PEER-MED100-ODN-Transit-Asia\",\n                \"config\": {\n                    \"name\": \"to_PEER-MED100-ODN-Transit-Asia\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"RFC1918-DSUA-out_deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-NOT-ADVERTISE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-1PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"4\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-2PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"4\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"5\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-3PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"5\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 3,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"6\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-NOT-ADVERTISE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"6\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"7\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-1PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"7\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"8\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-2PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"8\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"9\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-3PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"9\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 3,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"10\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"DENY_YBB_CIDR_long\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"10\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"11\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"YBB_CIDR\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                },\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-as-path-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"as-path-set\": \"2\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"11\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"12\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"DENY_IPR_CIDR_long\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"12\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"13\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"IPR_CIDR\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                },\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-as-path-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"as-path-set\": \"2\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"13\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"14\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"TRANSIT_MATCH\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"14\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"15\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PI_MATCH\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"15\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"16\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PRI-Single-PI\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"16\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"17\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiPriAS-PI\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"17\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"18\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiAS-ODN-CIDR\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"18\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"19\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiAS-PI-ODN\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"19\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"20\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"ODN-TRANSIT-OUT\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"20\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = RFC1918-DSUA-out_deny\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"RFC1918-DSUA-out_deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PEER-NOT-ADVERTISE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-NOT-ADVERTISE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PEER-1PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-1PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"config\"][\"name\"]).to.eql(\"4\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PEER-2PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-2PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"name\"]).to.eql(\"4\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"config\"][\"name\"]).to.eql(\"5\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PEER-3PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-3PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 5\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"name\"]).to.eql(\"5\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"config\"][\"name\"]).to.eql(\"6\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = Asia-PEER-NOT-ADVERTISE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-NOT-ADVERTISE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 6\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"name\"]).to.eql(\"6\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 7\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"config\"][\"name\"]).to.eql(\"7\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = Asia-PEER-1PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-1PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 7\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"name\"]).to.eql(\"7\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 8\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"config\"][\"name\"]).to.eql(\"8\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = Asia-PEER-2PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-2PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 8\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"name\"]).to.eql(\"8\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 9\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"config\"][\"name\"]).to.eql(\"9\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = Asia-PEER-3PREPEND\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-3PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 9\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"name\"]).to.eql(\"9\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = 3\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = 17676\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"config\"][\"name\"]).to.eql(\"10\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = DENY_YBB_CIDR_long\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_YBB_CIDR_long\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 10\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"name\"]).to.eql(\"10\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 11\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"config\"][\"name\"]).to.eql(\"11\");",
											"});",
											"//as-path-set",
											"pm.test(\"Validate as-path-set = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = YBB_CIDR\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"YBB_CIDR\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 11\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"name\"]).to.eql(\"11\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 12\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"config\"][\"name\"]).to.eql(\"12\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = DENY_IPR_CIDR_long\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_IPR_CIDR_long\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 12\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"name\"]).to.eql(\"12\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = REJECT_ROUTE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 13\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"config\"][\"name\"]).to.eql(\"13\");",
											"});",
											"//as-path-set",
											"pm.test(\"Validate as-path-set = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = IPR_CIDR\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"IPR_CIDR\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 13\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"name\"]).to.eql(\"13\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 14\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"config\"][\"name\"]).to.eql(\"14\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = TRANSIT_MATCH\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"TRANSIT_MATCH\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 14\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"name\"]).to.eql(\"14\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 15\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"config\"][\"name\"]).to.eql(\"15\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PI_MATCH\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PI_MATCH\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 15\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"name\"]).to.eql(\"15\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 16\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"config\"][\"name\"]).to.eql(\"16\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = PRI-Single-PI\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PRI-Single-PI\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 16\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"name\"]).to.eql(\"16\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 17\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"config\"][\"name\"]).to.eql(\"17\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = MultiPriAS-PI\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiPriAS-PI\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 17\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"name\"]).to.eql(\"17\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 18\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"config\"][\"name\"]).to.eql(\"18\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = MultiAS-ODN-CIDR\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-ODN-CIDR\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 18\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"name\"]).to.eql(\"18\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 19\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"config\"][\"name\"]).to.eql(\"19\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = MultiAS-PI-ODN\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-PI-ODN\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 19\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"name\"]).to.eql(\"19\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = 20\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"config\"][\"name\"]).to.eql(\"20\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = ODN-TRANSIT-OUT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ODN-TRANSIT-OUT\");",
											"});",
											"//name",
											"pm.test(\"Validate name = 20\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"name\"]).to.eql(\"20\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = 100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = to_PEER-MED100-ODN-Transit-Asia\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia\");",
											"});",
											"//name",
											"pm.test(\"Validate name = to_PEER-MED100-ODN-Transit-Asia\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "21+22: route-policy",
					"description": null,
					"item": [
						{
							"name": "Create  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy to_PEER-MED100-ODN-Transit-Asia-v6\nif destination in ipv6-ebgp-out-deny then\ndrop\nelseif community matches-any PEER-NOT-ADVERTISE then\ndrop\nelseif community matches-any PEER-1PREPEND then\nset med 100\nprepend as-path 17676\nelseif community matches-any PEER-2PREPEND then\nset med 100\nprepend as-path 17676 2\nelseif community matches-any PEER-3PREPEND then\nset med 100\nprepend as-path 17676 3\nelseif community matches-any Asia-PEER-NOT-ADVERTISE then\ndrop\nelseif community matches-any Asia-PEER-1PREPEND then\nset med 100\nprepend as-path 17676\nelseif community matches-any Asia-PEER-2PREPEND then\nset med 100\nprepend as-path 17676 2\nelseif community matches-any Asia-PEER-3PREPEND then\nset med 100\nprepend as-path 17676 3\nelseif destination in DENY_YBB_v6_CIDR_long then\ndrop\nelseif destination in DENY_IPR_v6_CIDR_long then\ndrop\nelseif destination in YBB_v6_CIDR and as-path in 2 then\nset med 100\nelseif destination in IPR_v6_CIDR and as-path in 2 then\nset med 100\nelseif community matches-any TRANSIT_MATCH or community matches-any PI_MATCH or community matches-any PRI-Single-PI or community matches-any MultiPriAS-PI or community matches-any MultiAS-ODN-CIDR or community matches-any MultiAS-PI-ODN or community matches-any ODN-TRANSIT-OUT then\nset med 100\nendif\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"ipv6-ebgp-out-deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-NOT-ADVERTISE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-1PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"config\"][\"name\"]).to.eql(\"4\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-2PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"name\"]).to.eql(\"4\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"config\"][\"name\"]).to.eql(\"5\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-3PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"name\"]).to.eql(\"5\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"config\"][\"name\"]).to.eql(\"6\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-NOT-ADVERTISE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"name\"]).to.eql(\"6\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"config\"][\"name\"]).to.eql(\"7\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-1PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"name\"]).to.eql(\"7\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"config\"][\"name\"]).to.eql(\"8\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-2PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"name\"]).to.eql(\"8\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"config\"][\"name\"]).to.eql(\"9\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-3PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"name\"]).to.eql(\"9\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"config\"][\"name\"]).to.eql(\"10\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_YBB_v6_CIDR_long\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"name\"]).to.eql(\"10\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"config\"][\"name\"]).to.eql(\"11\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_IPR_v6_CIDR_long\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"name\"]).to.eql(\"11\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"config\"][\"name\"]).to.eql(\"12\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"YBB_v6_CIDR\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"name\"]).to.eql(\"12\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"config\"][\"name\"]).to.eql(\"13\");",
											"});",
											"//as-path-set",
											"pm.test(\"Validate as-path-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"IPR_v6_CIDR\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"name\"]).to.eql(\"13\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med 22= \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"config\"][\"name\"]).to.eql(\"14\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"TRANSIT_MATCH\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"name\"]).to.eql(\"14\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"config\"][\"name\"]).to.eql(\"15\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PI_MATCH\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"name\"]).to.eql(\"15\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"config\"][\"name\"]).to.eql(\"16\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PRI-Single-PI\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"name\"]).to.eql(\"16\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"config\"][\"name\"]).to.eql(\"17\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiPriAS-PI\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"name\"]).to.eql(\"17\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"config\"][\"name\"]).to.eql(\"18\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-ODN-CIDR\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"name\"]).to.eql(\"18\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"config\"][\"name\"]).to.eql(\"19\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-PI-ODN\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"name\"]).to.eql(\"19\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"config\"][\"name\"]).to.eql(\"20\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ODN-TRANSIT-OUT\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"name\"]).to.eql(\"20\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "delete router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno route-policy to_PEER-MED100-ODN-Transit-Asia-v6\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  deleted router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"to_PEER-MED100-ODN-Transit-Asia-v6\",\n                \"config\": {\n                    \"name\": \"to_PEER-MED100-ODN-Transit-Asia-v6\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"ipv6-ebgp-out-deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-NOT-ADVERTISE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-1PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"4\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-2PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"4\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"5\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-3PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"5\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 3,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"6\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-NOT-ADVERTISE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"6\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"7\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-1PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"7\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"8\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-2PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"8\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"9\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-3PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"9\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 3,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"10\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"DENY_YBB_v6_CIDR_long\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"10\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"11\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"DENY_IPR_v6_CIDR_long\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"11\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"12\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"YBB_v6_CIDR\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                },\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-as-path-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"as-path-set\": \"2\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"12\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"13\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"IPR_v6_CIDR\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                },\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-as-path-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"as-path-set\": \"2\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"13\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"14\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"TRANSIT_MATCH\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"14\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"15\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PI_MATCH\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"15\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"16\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PRI-Single-PI\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"16\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"17\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiPriAS-PI\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"17\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"18\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiAS-ODN-CIDR\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"18\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"19\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiAS-PI-ODN\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"19\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"20\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"ODN-TRANSIT-OUT\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"20\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"ipv6-ebgp-out-deny\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-NOT-ADVERTISE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-1PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"config\"][\"name\"]).to.eql(\"4\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-2PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"name\"]).to.eql(\"4\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"config\"][\"name\"]).to.eql(\"5\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PEER-3PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"name\"]).to.eql(\"5\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][4][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"config\"][\"name\"]).to.eql(\"6\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-NOT-ADVERTISE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"name\"]).to.eql(\"6\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][5][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"config\"][\"name\"]).to.eql(\"7\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-1PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"name\"]).to.eql(\"7\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][6][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"config\"][\"name\"]).to.eql(\"8\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-2PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"name\"]).to.eql(\"8\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][7][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"config\"][\"name\"]).to.eql(\"9\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"Asia-PEER-3PREPEND\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"name\"]).to.eql(\"9\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//repeat-n",
											"pm.test(\"Validate repeat-n = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"//asn",
											"pm.test(\"Validate asn = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][8][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(17676);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"config\"][\"name\"]).to.eql(\"10\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_YBB_v6_CIDR_long\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"name\"]).to.eql(\"10\");",
											"});",
											"//policy-result",
											"pm.test(\"Validate policy-result = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][9][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"config\"][\"name\"]).to.eql(\"11\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"DENY_IPR_v6_CIDR_long\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][10][\"name\"]).to.eql(\"11\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"config\"][\"name\"]).to.eql(\"12\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"YBB_v6_CIDR\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][11][\"name\"]).to.eql(\"12\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"config\"][\"name\"]).to.eql(\"13\");",
											"});",
											"//as-path-set",
											"pm.test(\"Validate as-path-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(\"2\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//prefix-set",
											"pm.test(\"Validate prefix-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(\"IPR_v6_CIDR\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"name\"]).to.eql(\"13\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med 22= \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][12][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"config\"][\"name\"]).to.eql(\"14\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"TRANSIT_MATCH\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"name\"]).to.eql(\"14\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][13][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"config\"][\"name\"]).to.eql(\"15\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PI_MATCH\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"name\"]).to.eql(\"15\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][14][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"config\"][\"name\"]).to.eql(\"16\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"PRI-Single-PI\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"name\"]).to.eql(\"16\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][15][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"config\"][\"name\"]).to.eql(\"17\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiPriAS-PI\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"name\"]).to.eql(\"17\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][16][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"config\"][\"name\"]).to.eql(\"18\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-ODN-CIDR\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"name\"]).to.eql(\"18\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][17][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"config\"][\"name\"]).to.eql(\"19\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"MultiAS-PI-ODN\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"name\"]).to.eql(\"19\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][18][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"config\"][\"name\"]).to.eql(\"20\");",
											"});",
											"//match-set-options",
											"pm.test(\"Validate match-set-options = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"//community-set",
											"pm.test(\"Validate community-set = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(\"ODN-TRANSIT-OUT\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"name\"]).to.eql(\"20\");",
											"});",
											"//set-med",
											"pm.test(\"Validate set-med = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][19][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(100);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"to_PEER-MED100-ODN-Transit-Asia-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-2 policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass Tos0\nset qos-group 0\nset mpls  experimental topmost 0\nset precedence critical\npriority level 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47743549-d3a5-4612-8806-6ca025498033",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"critical\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "replace config class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"critical\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                0\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"critical\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0b52aea-9933-4c63-8c5a-0a55e46b7e95",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"critical\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-3 policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass Tos0\nset qos-group 0\nset mpls  experimental topmost 0\nset precedence flash\npriority level 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee2755d8-5f6c-4c0e-a81a-dc061505c487",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"flash\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "replace config class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"flash\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                0\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"flash\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "683e8f9b-a6a7-4062-8b02-e4b7c42d6a0d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"flash\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-4 policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass Tos0\nset qos-group 0\nset mpls  experimental topmost 0\nset precedence flash-override\npriority level 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3b33628-7870-4aca-9d37-989ebfd2bb79",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"flash-override\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "replace config class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"flash-override\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                0\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"flash-override\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4155e75b-87d2-4829-8217-5fb058163efd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"flash-override\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-5 policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass Tos0\nset qos-group 0\nset mpls  experimental topmost 0\nset precedence immediate\npriority level 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "856e53f4-734a-4af3-8323-f0e8824827bf",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"immediate\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "replace config class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"immediate\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                0\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"immediate\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb873945-811e-41d5-b81d-8e4bb6a7ec0e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"immediate\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-6 policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass Tos0\nset qos-group 0\nset mpls  experimental topmost 0\nset precedence internet\npriority level 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a10f8e2a-cf4e-49aa-95c0-4e3d2595499c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"internet\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "replace config class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"internet\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                0\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"internet\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "294b45c7-9057-40c7-916e-d9df463f7751",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"internet\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-7 policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass Tos0\nset qos-group 0\nset mpls  experimental topmost 0\nset precedence network\npriority level 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97dd5100-5de5-4e4a-b66b-02dba043ee1e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"network\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "replace config class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"network\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                0\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"network\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "582fd82c-a7cb-479b-9cd0-606bd4f9170c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"network\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-8 policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass Tos0\nset qos-group 0\nset mpls  experimental topmost 0\nset precedence priority\npriority level 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de3702f0-a433-44d0-b323-fff50804aba5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"priority\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "replace config class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"priority\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                0\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"priority\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa31687f-f904-46bb-8d5d-9a09d2060d97",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"priority\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-9 policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map Count-Policy\nclass Tos0\nset qos-group 0\nset mpls  experimental topmost 0\nset precedence routine\npriority level 1\nend-policy-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85a893a9-2f37-497a-8a77-3360b6f671f3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "delete config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map Count-Policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show deleted policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "replace config class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"routine\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                0\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"routine\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [0]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ebdea93-aff0-4f1a-9afa-5c2b93d62ec3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([0]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name =Count-Policy \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue2 = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate id config  = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "24+25: interface",
					"description": null,
					"item": [
						{
							"name": "Create  interface configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface GigabitEthernet0/0/0/0\ndescription AS15169-OS-3-BE16-2 ID:C-B1576\nbundle id 16 mode active\nlacp period short\nload-interval 30\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//frinx-lacp-lag-member:interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = FAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(\"FAST\");",
											"});",
											"//frinx-openconfig-if-aggregate:aggregate-id",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = Bundle-Ether16\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//frinx-lacp-lag-member:lacp-mode",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = ACTIVE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(\"ACTIVE\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//type",
											"pm.test(\"Validate type = iana-if-type:ethernetCsmacd\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
											"});",
											"//name",
											"pm.test(\"Validate name = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//description",
											"pm.test(\"Validate description = AS15169-OS-3-BE16-2 ID:C-B1576\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"AS15169-OS-3-BE16-2 ID:C-B1576\");",
											"});",
											"//name",
											"pm.test(\"Validate name = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = 30\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(30);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/"
							},
							"response": []
						},
						{
							"name": "delete interface configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface GigabitEthernet0/0/0/0\nno description\nno bundle id 16 mode active\nno lacp period short\nno load-interval 30\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  deleted configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//frinx-lacp-lag-member:interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"]).not.to.eql(\"FAST\");",
											"});",
											"//frinx-openconfig-if-aggregate:aggregate-id",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"]).not.to.eql(\"Bundle-Ether16\");",
											"});",
											"//frinx-lacp-lag-member:lacp-mode",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"]).not.to.eql(\"ACTIVE\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).not.to.eql(\"AS15169-OS-3-BE16-2 ID:C-B1576\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"]).not.to.eql(30);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"GigabitEthernet0/0/0/0\",\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-lacp-lag-member:lacp-mode\": \"ACTIVE\",\n                    \"frinx-lacp-lag-member:interval\": \"FAST\",\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"Bundle-Ether16\"\n                }\n            },\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"GigabitEthernet0/0/0/0\",\n                \"enabled\": false,\n                \"description\": \"AS15169-OS-3-BE16-2 ID:C-B1576\"\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": 30\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//frinx-lacp-lag-member:interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = FAST\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(\"FAST\");",
											"});",
											"//frinx-openconfig-if-aggregate:aggregate-id",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = Bundle-Ether16\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//frinx-lacp-lag-member:lacp-mode",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = ACTIVE\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(\"ACTIVE\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = false\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//type",
											"pm.test(\"Validate type = iana-if-type:ethernetCsmacd\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
											"});",
											"//name",
											"pm.test(\"Validate name = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//description",
											"pm.test(\"Validate description = AS15169-OS-3-BE16-2 ID:C-B1576\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"AS15169-OS-3-BE16-2 ID:C-B1576\");",
											"});",
											"//name",
											"pm.test(\"Validate name = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = 30\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(30);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "5+6: interface (asr)",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any IPV4ANY\nmatch protocol ipv4 \nend-class-map\n! \nclass-map match-any IPV6ANY\nmatch protocol ipv6 \nend-class-map\n! \npolicy-map REWRITE_IPV4_IPV6_TOS0\nclass IPV4ANY\nset precedence routine\n! \nclass IPV6ANY\nset precedence 0\n! \nclass class-default\nset precedence 0\n! \nend-policy-map\n!\nflow exporter-map EXPORT_FLOW_1\nversion v9\ntemplate timeout 180\n!\ntransport udp 60019\nsource Loopback1\ndestination 10.73.0.221\n!\nflow monitor-map MONITOR_IPv4\nrecord ipv4\nexporter EXPORT_FLOW_1\ncache timeout active 10\n!\nflow monitor-map MONITOR_IPv6\nrecord ipv6\nexporter EXPORT_FLOW_1\ncache timeout active 10\n!\nsampler-map SAMPLER\nrandom 1 out-of 8192\n!\nipv4 access-list Ten0_2_0_0-ex-20171218-01\ndeny ipv4 0.0.0.0 0.255.255.255 any\ndeny ipv4 any 0.0.0.0 0.255.255.255\npermit ipv4 133.217.0.0 0.0.255.255 any\ndeny tcp any any eq 343\npermit ipv4 any any\nipv4 access-list 190\n10 deny ipv4 10.0.0.0 0.255.255.255 any\n20 deny ipv4 127.0.0.0 0.255.255.255 any\n30 deny ipv4 172.16.0.0 0.15.255.255 any\n40 deny ipv4 192.168.0.0 0.0.255.255 any\n50 deny ipv4 any 10.0.0.0 0.255.255.255\n60 deny ipv4 any 127.0.0.0 0.255.255.255\n70 deny ipv4 any 172.16.0.0 0.15.255.255\n80 deny ipv4 any 192.168.0.0 0.0.255.255\n90 permit ipv4 any any\nipv6 access-list Ten0_2_0_0-ex6-20171218-01\ndeny icmpv6 any any 133 ttl lt 255\ndeny ipv6 any 2400:2000:3::/48\npermit icmpv6 any any\ndeny ipv6 ::/8 any\npermit ipv6 any any\nipv6 access-list Secu-To-Internet\n10 permit icmpv6 any any\n20 deny ipv6 ::/8 any\n30 deny ipv6 fec0::/10 any\n40 deny ipv6 fc00::/7 any\n50 deny ipv6 ff00::/8 any\n60 deny ipv6 2001:db8::/32 any\n70 permit ipv6 any any\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface TenGigE0/0/2/1\ndescription AS40263-US-5\nno shutdown\nservice-policy input REWRITE_IPV4_IPV6_TOS0\nservice-policy output REWRITE_IPV4_IPV6_TOS0\nipv4 address 221.111.203.117 255.255.255.252\nipv4 verify unicast source reachable-via any\nipv6 nd suppress-ra\nipv6 verify unicast source reachable-via any\nipv6 address 2400:2000:0:201:1:6509:2001:1/126\nload-interval 30\nflow ipv4 monitor MONITOR_IPv4 sampler SAMPLER ingress\nflow ipv4 monitor MONITOR_IPv4 sampler SAMPLER egress\nflow ipv6 monitor MONITOR_IPv6 sampler SAMPLER ingress\nflow ipv6 monitor MONITOR_IPv6 sampler SAMPLER egress\nipv4 access-group Ten0_2_0_0-ex-20171218-01 ingress\nipv4 access-group 190 egress\nipv6 access-group Ten0_2_0_0-ex6-20171218-01 ingress\nipv6 access-group Secu-To-Internet egress\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-precedences",
											"pm.test(\"Validate set-precedences = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(0);",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//set-precedences",
											"pm.test(\"Validate set-precedences2 = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(0);",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"config\"][\"name\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0-default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"name\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"config\"][\"name\"]).to.eql(\"IPV4ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"name\"]).to.eql(\"IPV4ANY\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "show  scheduler-policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(3);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(3);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"IPV4ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"IPV4ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"IPV4ANY\");",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"name\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/"
							},
							"response": []
						},
						{
							"name": "show  flow exporter-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"config\"][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show  access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"config\"][\"name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(40);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(40);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/8\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(10);",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"0..254\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"config\"][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "show  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//rpf-check",
											"pm.test(\"Validate rpf-check = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:verify-unicast-source-reachable-via\"][\"ipv4\"][\"rpf-check\"]).to.eql(\"ANY\");",
											"});",
											"//rpf-check",
											"pm.test(\"Validate rpf-check = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:verify-unicast-source-reachable-via\"][\"ipv6\"][\"rpf-check\"]).to.eql(\"ANY\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"AS40263-US-5\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(30);",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(\"221.111.203.117\");",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(\"221.111.203.117\");",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(30);",
											"});",
											"//index",
											"pm.test(\"Validate index = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(0);",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(\"2400:2000:0:201:1:6509:2001:1\");",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(\"2400:2000:0:201:1:6509:2001:1\");",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(126);",
											"});",
											"//suppress",
											"pm.test(\"Validate suppress = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
											"});",
											"//index",
											"pm.test(\"Validate index = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show acl on interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show policy on interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"pm.test(\"Validate config interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:input-service-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:output-service-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "delete interface configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"input\" :\n{\n\"ios-cli:command\" : \"conf t\ninterface TenGigE0/0/2/1\nno description\nshutdown\nno service-policy input\nno service-policy output\nno ipv4 address\nno ipv4 verify unicast source reachable-via any\nno ipv6 nd suppress-ra\nno ipv6 verify unicast source reachable-via any\nno ipv6 address\nno load-interval 30\nno flow ipv4 monitor MONITOR_IPv4 sampler SAMPLER ingress\nno flow ipv4 monitor MONITOR_IPv4 sampler SAMPLER egress\nno flow ipv6 monitor MONITOR_IPv6 sampler SAMPLER ingress\nno flow ipv6 monitor MONITOR_IPv6 sampler SAMPLER egress\nno ipv4 access-group Ten0_2_0_0-ex-20171218-01 ingress\nno ipv4 access-group 190 egress\nno ipv6 access-group Ten0_2_0_0-ex6-20171218-01 ingress\nno ipv6 access-group Secu-To-Internet egress\ncommit\nend\"\n}\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "replace config interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"TenGigE0/0/2/1\",\n            \"frinx-cisco-if-extension:verify-unicast-source-reachable-via\": {\n                \"ipv4\": {\n                    \"rpf-check\": \"ANY\"\n                },\n                \"ipv6\": {\n                    \"rpf-check\": \"ANY\"\n                }\n            },\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"TenGigE0/0/2/1\",\n                \"enabled\": true,\n                \"description\": \"AS40263-US-5\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"221.111.203.117\",\n                                        \"config\": {\n                                            \"ip\": \"221.111.203.117\",\n                                            \"prefix-length\": 30\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"2400:2000:0:201:1:6509:2001:1\",\n                                        \"config\": {\n                                            \"ip\": \"2400:2000:0:201:1:6509:2001:1\",\n                                            \"prefix-length\": 126\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": 30\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "replace config flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-netflow:interface\": [\n        {\n            \"id\": \"TenGigE0/0/2/1\",\n            \"config\": {\n                \"id\": \"TenGigE0/0/2/1\"\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv6\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv4\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv6\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv4\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "replace config acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:interface\": [\n        {\n            \"id\": \"TenGigE0/0/2/1\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"Ten0_2_0_0-ex-20171218-01\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"Ten0_2_0_0-ex-20171218-01\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"Ten0_2_0_0-ex6-20171218-01\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"Ten0_2_0_0-ex6-20171218-01\"\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"id\": \"TenGigE0/0/2/1\"\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"190\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"190\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"Secu-To-Internet\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"Secu-To-Internet\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:interface\": [\n        {\n            \"interface-id\": \"TenGigE0/0/2/1\",\n            \"config\": {\n                \"interface-id\": \"TenGigE0/0/2/1\",\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"REWRITE_IPV4_IPV6_TOS0\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"REWRITE_IPV4_IPV6_TOS0\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//rpf-check",
											"pm.test(\"Validate rpf-check = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:verify-unicast-source-reachable-via\"][\"ipv4\"][\"rpf-check\"]).to.eql(\"ANY\");",
											"});",
											"//rpf-check",
											"pm.test(\"Validate rpf-check = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:verify-unicast-source-reachable-via\"][\"ipv6\"][\"rpf-check\"]).to.eql(\"ANY\");",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"AS40263-US-5\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(30);",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(\"221.111.203.117\");",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(\"221.111.203.117\");",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(30);",
											"});",
											"//index",
											"pm.test(\"Validate index = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(0);",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(\"2400:2000:0:201:1:6509:2001:1\");",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(\"2400:2000:0:201:1:6509:2001:1\");",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(126);",
											"});",
											"//suppress",
											"pm.test(\"Validate suppress = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
											"});",
											"//index",
											"pm.test(\"Validate index = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show replace flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"config\"][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show replace acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show replace policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//interface-id",
											"pm.test(\"Validate interface-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//interface-id",
											"pm.test(\"Validate interface-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//frinx-cisco-pf-interfaces-extension:input-service-policy",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:input-service-policy = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//frinx-cisco-pf-interfaces-extension:output-service-policy",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:output-service-policy = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "23: interface (asr)",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any IPV4ANY\nmatch protocol ipv4 \nend-class-map\n! \nclass-map match-any IPV6ANY\nmatch protocol ipv6 \nend-class-map\n! \npolicy-map REWRITE_IPV4_IPV6_TOS0\nclass IPV4ANY\nset precedence routine\n! \nclass IPV6ANY\nset precedence 0\n! \nclass class-default\nset precedence 0\n! \nend-policy-map\n!\nflow exporter-map EXPORT_FLOW_1\nversion v9\ntemplate timeout 180\n!\ntransport udp 60019\nsource Loopback1\ndestination 10.73.0.221\n!\nflow monitor-map MONITOR_IPv4\nrecord ipv4\nexporter EXPORT_FLOW_1\ncache timeout active 10\n!\nflow monitor-map MONITOR_IPv6\nrecord ipv6\nexporter EXPORT_FLOW_1\ncache timeout active 10\n!\nsampler-map SAMPLER\nrandom 1 out-of 8192\n!\nipv4 access-list Bun16-ex-20171115-01\ndeny ipv4 0.0.0.0 0.255.255.255 any\nipv4 access-list 190\n10 deny ipv4 10.0.0.0 0.255.255.255 any\n20 deny ipv4 127.0.0.0 0.255.255.255 any\n30 deny ipv4 172.16.0.0 0.15.255.255 any\n40 deny ipv4 192.168.0.0 0.0.255.255 any\n50 deny ipv4 any 10.0.0.0 0.255.255.255\n60 deny ipv4 any 127.0.0.0 0.255.255.255\n70 deny ipv4 any 172.16.0.0 0.15.255.255\n80 deny ipv4 any 192.168.0.0 0.0.255.255\n90 permit ipv4 any any\nipv6 access-list Bun16-ex6-20171115-01\ndeny icmpv6 any any 133 ttl lt 255\nipv6 access-list Secu-To-Internet\n10 permit icmpv6 any any\n20 deny ipv6 ::/8 any\n30 deny ipv6 fec0::/10 any\n40 deny ipv6 fc00::/7 any\n50 deny ipv6 ff00::/8 any\n60 deny ipv6 2001:db8::/32 any\n70 permit ipv6 any any\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "Create  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether16\ndescription AS15169-OS-3\nservice-policy input REWRITE_IPV4_IPV6_TOS0\nservice-policy output REWRITE_IPV4_IPV6_TOS0\nipv4 address 72.14.217.122 255.255.255.252\nipv6 nd suppress-ra\nipv6 address 2001:4860:1:1::546/126\nload-interval 30\nflow ipv4 monitor MONITOR_IPv4 sampler SAMPLER ingress\nflow ipv4 monitor MONITOR_IPv4 sampler SAMPLER egress\nflow ipv6 monitor MONITOR_IPv6 sampler SAMPLER ingress\nflow ipv6 monitor MONITOR_IPv6 sampler SAMPLER egress\nipv4 access-group Bun16-ex-20171115-01 ingress\nipv4 access-group 190 egress\nipv6 access-group Bun16-ex6-20171115-01 ingress\nipv6 access-group Secu-To-Internet egress\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-precedences",
											"pm.test(\"Validate set-precedences = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(0);",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//set-precedences",
											"pm.test(\"Validate set-precedences2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(0);",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"config\"][\"name\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0-default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][1][\"name\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"config\"][\"name\"]).to.eql(\"IPV4ANY\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][2][\"name\"]).to.eql(\"IPV4ANY\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "show  scheduler-policies",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(3);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(3);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"IPV6ANY\");",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"IPV4ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"IPV4ANY\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"IPV4ANY\");",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][2][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policies\"][\"scheduler-policy\"][0][\"name\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/"
							},
							"response": []
						},
						{
							"name": "show  flow exporter-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"config\"][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show  access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f2c24ef-2b6c-42d2-b005-0e04784cd051",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(80);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(80);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.0.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"address\"]).to.eql(\"192.168.0.0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"config\"][\"sequence-id\"]).to.eql(50);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(50);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"address\"]).to.eql(\"10.0.0.0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][1][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"config\"][\"sequence-id\"]).to.eql(20);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"sequence-id\"]).to.eql(20);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"address\"]).to.eql(\"127.0.0.0\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][2][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"config\"][\"sequence-id\"]).to.eql(70);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"sequence-id\"]).to.eql(70);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.15.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"address\"]).to.eql(\"172.16.0.0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][3][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"config\"][\"sequence-id\"]).to.eql(40);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"sequence-id\"]).to.eql(40);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.0.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"address\"]).to.eql(\"192.168.0.0\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][4][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"config\"][\"sequence-id\"]).to.eql(10);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"sequence-id\"]).to.eql(10);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"address\"]).to.eql(\"10.0.0.0\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][5][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"config\"][\"sequence-id\"]).to.eql(90);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"sequence-id\"]).to.eql(90);",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][6][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"config\"][\"sequence-id\"]).to.eql(60);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"sequence-id\"]).to.eql(60);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv4\"][\"config\"][\"frinx-acl-extension:destination-address-wildcarded\"][\"address\"]).to.eql(\"127.0.0.0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][7][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"config\"][\"sequence-id\"]).to.eql(30);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"sequence-id\"]).to.eql(30);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.15.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"address\"]).to.eql(\"172.16.0.0\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][8][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"190\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(50);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(50);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"ff00::/8\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][1][\"config\"][\"sequence-id\"]).to.eql(20);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][1][\"sequence-id\"]).to.eql(20);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][1][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][1][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/8\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][2][\"config\"][\"sequence-id\"]).to.eql(70);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][2][\"sequence-id\"]).to.eql(70);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][2][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][2][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][3][\"config\"][\"sequence-id\"]).to.eql(40);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][3][\"sequence-id\"]).to.eql(40);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][3][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][3][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"fc00::/7\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][4][\"config\"][\"sequence-id\"]).to.eql(10);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][4][\"sequence-id\"]).to.eql(10);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][4][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][4][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][5][\"config\"][\"sequence-id\"]).to.eql(60);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][5][\"sequence-id\"]).to.eql(60);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][5][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][5][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][5][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"2001:db8::/32\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][6][\"config\"][\"sequence-id\"]).to.eql(30);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][6][\"sequence-id\"]).to.eql(30);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][6][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"acl-entries\"][\"acl-entry\"][6][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"fec0::/10\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"config\"][\"name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][1][\"name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//msg-type",
											"pm.test(\"Validate msg-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"acl-entries\"][\"acl-entry\"][0][\"frinx-acl-extension:icmp\"][\"config\"][\"msg-type\"]).to.eql(133);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(10);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(10);",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"destination-address\"]).to.eql(\"::/0\");",
											"});",
											"//protocol",
											"pm.test(\"Validate protocol = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"protocol\"]).to.eql(\"frinx-openconfig-packet-match-types:IP_ICMP\");",
											"});",
											"//frinx-acl-extension:hop-range",
											"pm.test(\"Validate frinx-acl-extension:hop-range = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"frinx-acl-extension:hop-range\"]).to.eql(\"0..254\");",
											"});",
											"//source-address",
											"pm.test(\"Validate source-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"acl-entries\"][\"acl-entry\"][0][\"ipv6\"][\"config\"][\"source-address\"]).to.eql(\"::/0\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"config\"][\"name\"]).to.eql(\"Bun16-ex6-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][2][\"name\"]).to.eql(\"Bun16-ex6-20171115-01\");",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(10);",
											"});",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(10);",
											"});",
											"//wildcard-mask",
											"pm.test(\"Validate wildcard-mask = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"wildcard-mask\"]).to.eql(\"0.255.255.255\");",
											"});",
											"//address",
											"pm.test(\"Validate address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"frinx-acl-extension:source-address-wildcarded\"][\"address\"]).to.eql(\"0.0.0.0\");",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:DROP\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"config\"][\"name\"]).to.eql(\"Bun16-ex-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl-sets\"][\"acl-set\"][3][\"name\"]).to.eql(\"Bun16-ex-20171115-01\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "show  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ieee8023adLag\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"AS15169-OS-3\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(30);",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(\"72.14.217.122\");",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(\"72.14.217.122\");",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(30);",
											"});",
											"//index",
											"pm.test(\"Validate index = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(0);",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(\"2001:4860:1:1::546\");",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(\"2001:4860:1:1::546\");",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(126);",
											"});",
											"//suppress",
											"pm.test(\"Validate suppress = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
											"});",
											"//index",
											"pm.test(\"Validate index = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show acl on interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"Bun16-ex-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(\"Bun16-ex-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Bun16-ex6-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"set-name\"]).to.eql(\"Bun16-ex6-20171115-01\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show policy on interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"pm.test(\"Validate config interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:input-service-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:output-service-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "delete interface configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether16\nno description\nno service-policy input\nno service-policy output\nno ipv4 address\nno ipv6 nd suppress-ra\nno ipv6 address\nno load-interval 30\nno flow ipv4 monitor MONITOR_IPv4 sampler SAMPLER ingress\nno flow ipv4 monitor MONITOR_IPv4 sampler SAMPLER egress\nno flow ipv6 monitor MONITOR_IPv6 sampler SAMPLER ingress\nno flow ipv6 monitor MONITOR_IPv6 sampler SAMPLER egress\nno ipv4 access-group Bun16-ex-20171115-01 ingress\nno ipv4 access-group 190 egress\nno ipv6 access-group Bun16-ex6-20171115-01 ingress\nno ipv6 access-group Secu-To-Internet egress\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "show  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ieee8023adLag\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "replace config interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"Bundle-Ether16\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"name\": \"Bundle-Ether16\",\n                \"enabled\": true,\n                \"description\": \"AS15169-OS-3\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"72.14.217.122\",\n                                        \"config\": {\n                                            \"ip\": \"72.14.217.122\",\n                                            \"prefix-length\": 30\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"2001:4860:1:1::546\",\n                                        \"config\": {\n                                            \"ip\": \"2001:4860:1:1::546\",\n                                            \"prefix-length\": 126\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": 30\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "replace config flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-netflow:interface\": [\n        {\n            \"id\": \"Bundle-Ether16\",\n            \"config\": {\n                \"id\": \"Bundle-Ether16\"\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv6\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv4\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv6\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv4\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "replace config acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:interface\": [\n        {\n            \"id\": \"Bundle-Ether16\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"Bun16-ex-20171115-01\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"Bun16-ex-20171115-01\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"Bun16-ex6-20171115-01\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"Bun16-ex6-20171115-01\"\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"id\": \"Bundle-Ether16\"\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"190\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"190\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"Secu-To-Internet\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"Secu-To-Internet\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether16\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether16\",\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"REWRITE_IPV4_IPV6_TOS0\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"REWRITE_IPV4_IPV6_TOS0\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ieee8023adLag\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"AS15169-OS-3\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(30);",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(\"72.14.217.122\");",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(\"72.14.217.122\");",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(30);",
											"});",
											"//index",
											"pm.test(\"Validate index = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"index\"]).to.eql(0);",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(\"2001:4860:1:1::546\");",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(\"2001:4860:1:1::546\");",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(126);",
											"});",
											"//suppress",
											"pm.test(\"Validate suppress = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
											"});",
											"//index",
											"pm.test(\"Validate index = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"config\"][\"index\"]).to.eql(0);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show replace flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"config\"][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show replace acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"Bun16-ex-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(\"Bun16-ex-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Bun16-ex6-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"set-name\"]).to.eql(\"Bun16-ex6-20171115-01\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show replace policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"pm.test(\"Validate config interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:input-service-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:output-service-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Abnormal case",
			"description": null,
			"item": [
				{
					"name": "1: ipv4 access-list",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:acl-sets\": {\n        \"acl-set\": [\n            {\n                \"name\": \"Ten0_2_0_0-ex-20171218-01\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"config\": {\n                    \"name\": \"Ten0_2_0_0-ex-20171218-01\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 40,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 40\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"ANY\",\n                                    \"destination-port\": 65536\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 10,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    },\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 10\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 50,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 50\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 20,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"frinx-acl-extension:destination-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 20\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 30,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.0.255.255\",\n                                        \"address\": \"133.217.0.0\"\n                                    },\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 30\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace ipv4 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "31: ipv4 access-list",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:acl-sets\": {\n        \"acl-set\": [\n            {\n                \"name\": \"Ten0_2_0_0-ex-20171214-01\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                \"config\": {\n                    \"name\": \"Ten0_2_0_0-ex-20171214-01\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 2,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"destination-address\": \"0.0.0.0/32\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 2\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"ANY\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 1,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/32\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 1\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"ANY\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 4,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    },\n                                    \"frinx-acl-extension:destination-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 4\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": 65536,\n                                    \"destination-port\": \"10..65535\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 3,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 3\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 6,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    },\n                                    \"destination-address\": \"0.0.0.0/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 6\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"0..10\",\n                                    \"destination-port\": \"10..10\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 5,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"frinx-acl-extension:source-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    },\n                                    \"frinx-acl-extension:destination-address-wildcarded\": {\n                                        \"wildcard-mask\": \"0.255.255.255\",\n                                        \"address\": \"0.0.0.0\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 5\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"10..65535\",\n                                    \"destination-port\": \"0..10\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 7,\n                            \"ipv4\": {\n                                \"config\": {\n                                    \"source-address\": \"0.0.0.0/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"destination-address\": \"0.0.0.0/32\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 7\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"1..10\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace ipv4 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "3: ipv6 access-list",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:acl-sets\": {\n        \"acl-set\": [\n            {\n                \"name\": \"Ten0_2_0_0-ex6-20171218-01\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                \"config\": {\n                    \"name\": \"Ten0_2_0_0-ex6-20171218-01\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 40,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/8\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 40\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 10,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"::/0\",\n                                    \"source-address\": \"::/0\",\n                                    \"frinx-acl-extension:hop-range\": \"0..255\"\n                                }\n                            },\n                            \"frinx-acl-extension:icmp\": {\n                                \"config\": {\n                                    \"msg-type\": 133\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 10\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 50,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/0\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 50\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 20,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/0\",\n                                    \"destination-address\": \"2400:2000:3::/48\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 20\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 30,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 30\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace ipv6 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "32: ipv6 access-list",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:acl-sets\": {\n        \"acl-set\": [\n            {\n                \"name\": \"Ten0_2_0_0-ex6-20171218-01\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                \"config\": {\n                    \"name\": \"Ten0_2_0_0-ex6-20171218-01\",\n                    \"type\": \"frinx-openconfig-acl:ACL_IPV6\"\n                },\n                \"acl-entries\": {\n                    \"acl-entry\": [\n                        {\n                            \"sequence-id\": 2,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"destination-address\": \"::/64\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 2\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"ANY\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 1,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/64\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 1\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"ANY\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:DROP\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 4,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/64\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"destination-address\": \"::/64\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 4\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"10..65535\",\n                                    \"destination-port\": \"0..10\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 3,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/64\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_TCP\",\n                                    \"destination-address\": \"::/64\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 3\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": 10,\n                                    \"destination-port\": \"10..65536\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 6,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/0\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 6\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"10..100\",\n                                    \"destination-port\": \"ANY\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 5,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"source-address\": \"::/64\",\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_UDP\",\n                                    \"destination-address\": \"::/0\"\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 5\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"source-port\": \"0..10\",\n                                    \"destination-port\": \"10..10\"\n                                }\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 8,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"::/64\",\n                                    \"source-address\": \"::/64\",\n                                    \"frinx-acl-extension:hop-range\": \"11..255\"\n                                }\n                            },\n                            \"frinx-acl-extension:icmp\": {\n                                \"config\": {\n                                    \"msg-type\": 100\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 8\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 7,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"2400:2000:3::/48\",\n                                    \"source-address\": \"2400:2000:3::/48\",\n                                    \"frinx-acl-extension:hop-range\": \"11..255\"\n                                }\n                            },\n                            \"frinx-acl-extension:icmp\": {\n                                \"config\": {\n                                    \"msg-type\": 100\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 7\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 10,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"::/64\",\n                                    \"source-address\": \"::/64\",\n                                    \"frinx-acl-extension:hop-range\": \"10..100\"\n                                }\n                            },\n                            \"frinx-acl-extension:icmp\": {\n                                \"config\": {\n                                    \"msg-type\": 100\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 10\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        },\n                        {\n                            \"sequence-id\": 9,\n                            \"ipv6\": {\n                                \"config\": {\n                                    \"protocol\": \"frinx-openconfig-packet-match-types:IP_ICMP\",\n                                    \"destination-address\": \"::/64\",\n                                    \"source-address\": \"::/64\",\n                                    \"frinx-acl-extension:hop-range\": \"0..9\"\n                                }\n                            },\n                            \"frinx-acl-extension:icmp\": {\n                                \"config\": {\n                                    \"msg-type\": 100\n                                }\n                            },\n                            \"config\": {\n                                \"sequence-id\": 9\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"forwarding-action\": \"frinx-openconfig-acl:ACCEPT\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace ipv6 access-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/acl-sets/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "5: interface (asr)",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any IPV4ANY\nmatch protocol ipv4 \nend-class-map\n! \nclass-map match-any IPV6ANY\nmatch protocol ipv6 \nend-class-map\n! \npolicy-map REWRITE_IPV4_IPV6_TOS0\nclass IPV4ANY\nset precedence routine\n! \nclass IPV6ANY\nset precedence 0\n! \nclass class-default\nset precedence 0\n! \nend-policy-map\n!\nflow exporter-map EXPORT_FLOW_1\nversion v9\ntemplate timeout 180\n!\ntransport udp 60019\nsource Loopback1\ndestination 10.73.0.221\n!\nflow monitor-map MONITOR_IPv4\nrecord ipv4\nexporter EXPORT_FLOW_1\ncache timeout active 10\n!\nflow monitor-map MONITOR_IPv6\nrecord ipv6\nexporter EXPORT_FLOW_1\ncache timeout active 10\n!\nsampler-map SAMPLER\nrandom 1 out-of 8192\n!\nipv4 access-list Ten0_2_0_0-ex-20171218-01\ndeny ipv4 0.0.0.0 0.255.255.255 any\ndeny ipv4 any 0.0.0.0 0.255.255.255\npermit ipv4 133.217.0.0 0.0.255.255 any\ndeny tcp any any eq 343\npermit ipv4 any any\nipv4 access-list 190\n10 deny ipv4 10.0.0.0 0.255.255.255 any\n20 deny ipv4 127.0.0.0 0.255.255.255 any\n30 deny ipv4 172.16.0.0 0.15.255.255 any\n40 deny ipv4 192.168.0.0 0.0.255.255 any\n50 deny ipv4 any 10.0.0.0 0.255.255.255\n60 deny ipv4 any 127.0.0.0 0.255.255.255\n70 deny ipv4 any 172.16.0.0 0.15.255.255\n80 deny ipv4 any 192.168.0.0 0.0.255.255\n90 permit ipv4 any any\nipv6 access-list Ten0_2_0_0-ex6-20171218-01\ndeny icmpv6 any any 133 ttl lt 255\ndeny ipv6 any 2400:2000:3::/48\npermit icmpv6 any any\ndeny ipv6 ::/8 any\npermit ipv6 any any\nipv6 access-list Secu-To-Internet\n10 permit icmpv6 any any\n20 deny ipv6 ::/8 any\n30 deny ipv6 fec0::/10 any\n40 deny ipv6 fc00::/7 any\n50 deny ipv6 ff00::/8 any\n60 deny ipv6 2001:db8::/32 any\n70 permit ipv6 any any\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "Create precondition for interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface TenGigE0/0/2/1\ndescription description AS40263-US-5\nno shutdown\ncommit\nend\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"TenGigE0/0/2/1\",\n            \"frinx-cisco-if-extension:verify-unicast-source-reachable-via\": {\n                \"ipv4\": {\n                    \"rpf-check\": \"ANY\"\n                },\n                \"ipv6\": {\n                    \"rpf-check\": \"ANY\"\n                }\n            },\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"TenGigE0/0/2/1\",\n                \"enabled\": true,\n                \"description\": \"AS40263-US-5\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"221.111.203.117\",\n                                        \"config\": {\n                                            \"ip\": \"221.111.203.117\",\n                                            \"prefix-length\": 30\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"2400:2000:0:201:1:6509:2001:1\",\n                                        \"config\": {\n                                            \"ip\": \"2400:2000:0:201:1:6509:2001:1\",\n                                            \"prefix-length\": 126\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": 601\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "replace config flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-netflow:interface\": [\n        {\n            \"id\": \"TenGigE0/0/2/1\",\n            \"config\": {\n                \"id\": \"TenGigE0/0/2/1\"\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv6\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv4\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv6\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv4\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "replace config acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:interface\": [\n        {\n            \"id\": \"TenGigE0/0/2/1\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"Ten0_2_0_0-ex-20171218-01\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"Ten0_2_0_0-ex-20171218-01\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"Ten0_2_0_0-ex6-20171218-01\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"Ten0_2_0_0-ex6-20171218-01\"\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"id\": \"TenGigE0/0/2/1\"\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"190\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"190\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"Secu-To-Internet\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"Secu-To-Internet\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:interface\": [\n        {\n            \"interface-id\": \"TenGigE0/0/2/1\",\n            \"config\": {\n                \"interface-id\": \"TenGigE0/0/2/1\",\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"REWRITE_IPV4_IPV6_TOS0\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"REWRITE_IPV4_IPV6_TOS0\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show  replace interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show replace flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"config\"][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show replace acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"set-name\"]).to.eql(\"Ten0_2_0_0-ex6-20171218-01\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "show replace policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//interface-id",
											"pm.test(\"Validate interface-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//interface-id",
											"pm.test(\"Validate interface-id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"TenGigE0/0/2/1\");",
											"});",
											"//frinx-cisco-pf-interfaces-extension:input-service-policy",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:input-service-policy = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"//frinx-cisco-pf-interfaces-extension:output-service-policy",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:output-service-policy = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/TenGigE0%2F0%2F2%2F1"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "23: interface (asr)",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any IPV4ANY\nmatch protocol ipv4 \nend-class-map\n! \nclass-map match-any IPV6ANY\nmatch protocol ipv6 \nend-class-map\n! \npolicy-map REWRITE_IPV4_IPV6_TOS0\nclass IPV4ANY\nset precedence routine\n! \nclass IPV6ANY\nset precedence 0\n! \nclass class-default\nset precedence 0\n! \nend-policy-map\n!\nflow exporter-map EXPORT_FLOW_1\nversion v9\ntemplate timeout 180\n!\ntransport udp 60019\nsource Loopback1\ndestination 10.73.0.221\n!\nflow monitor-map MONITOR_IPv4\nrecord ipv4\nexporter EXPORT_FLOW_1\ncache timeout active 10\n!\nflow monitor-map MONITOR_IPv6\nrecord ipv6\nexporter EXPORT_FLOW_1\ncache timeout active 10\n!\nsampler-map SAMPLER\nrandom 1 out-of 8192\n!\nipv4 access-list Bun16-ex-20171115-01\ndeny ipv4 0.0.0.0 0.255.255.255 any\nipv4 access-list 190\n10 deny ipv4 10.0.0.0 0.255.255.255 any\n20 deny ipv4 127.0.0.0 0.255.255.255 any\n30 deny ipv4 172.16.0.0 0.15.255.255 any\n40 deny ipv4 192.168.0.0 0.0.255.255 any\n50 deny ipv4 any 10.0.0.0 0.255.255.255\n60 deny ipv4 any 127.0.0.0 0.255.255.255\n70 deny ipv4 any 172.16.0.0 0.15.255.255\n80 deny ipv4 any 192.168.0.0 0.0.255.255\n90 permit ipv4 any any\nipv6 access-list Bun16-ex6-20171115-01\ndeny icmpv6 any any 133 ttl lt 255\nipv6 access-list Secu-To-Internet\n10 permit icmpv6 any any\n20 deny ipv6 ::/8 any\n30 deny ipv6 fec0::/10 any\n40 deny ipv6 fc00::/7 any\n50 deny ipv6 ff00::/8 any\n60 deny ipv6 2001:db8::/32 any\n70 permit ipv6 any any\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "Create precondition for interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether16\ndescription AS15169-OS-3\nno shutdown\ncommit\nend\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"Bundle-Ether16\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"name\": \"Bundle-Ether16\",\n                \"enabled\": true,\n                \"description\": \"AS15169-OS-3\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"72.14.217.122\",\n                                        \"config\": {\n                                            \"ip\": \"72.14.217.122\",\n                                            \"prefix-length\": 30\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"2001:4860:1:1::546\",\n                                        \"config\": {\n                                            \"ip\": \"2001:4860:1:1::546\",\n                                            \"prefix-length\": 126\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": 601\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "replace config flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-netflow:interface\": [\n        {\n            \"id\": \"Bundle-Ether16\",\n            \"config\": {\n                \"id\": \"Bundle-Ether16\"\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv6\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv4\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv6\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"MONITOR_IPv4\",\n                            \"sampler-name\": \"SAMPLER\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "replace config acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-acl:interface\": [\n        {\n            \"id\": \"Bundle-Ether16\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"Bun16-ex-20171115-01\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"Bun16-ex-20171115-01\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"Bun16-ex6-20171115-01\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"Bun16-ex6-20171115-01\"\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"id\": \"Bundle-Ether16\"\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"190\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"190\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"Secu-To-Internet\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                            \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"Secu-To-Internet\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:interface\": [\n        {\n            \"interface-id\": \"Bundle-Ether16\",\n            \"config\": {\n                \"interface-id\": \"Bundle-Ether16\",\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"REWRITE_IPV4_IPV6_TOS0\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"REWRITE_IPV4_IPV6_TOS0\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ieee8023adLag\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"AS15169-OS-3\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show replace flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"ingress-flows\"][\"ingress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"config\"][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][0][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV6\");",
											"});",
											"//sampler-name",
											"pm.test(\"Validate sampler-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"sampler-name\"]).to.eql(\"SAMPLER\");",
											"});",
											"//monitor-name",
											"pm.test(\"Validate monitor-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"monitor-name\"]).to.eql(\"MONITOR_IPv4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"config\"][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											"//netflow-type",
											"pm.test(\"Validate netflow-type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-netflow:interface\"][0][\"egress-flows\"][\"egress-flow\"][1][\"netflow-type\"]).to.eql(\"frinx-netflow:NETFLOW_IPV4\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-netflow:netflow/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show replace acls",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"Bun16-ex-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(\"Bun16-ex-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Bun16-ex6-20171115-01\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][1][\"set-name\"]).to.eql(\"Bun16-ex6-20171115-01\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(\"190\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV6\");",
											"});",
											"//set-name",
											"pm.test(\"Validate set-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][1][\"set-name\"]).to.eql(\"Secu-To-Internet\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "show replace policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"pm.test(\"Validate config interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"Bundle-Ether16\");",
											"});",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:input-service-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:output-service-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"REWRITE_IPV4_IPV6_TOS0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether16"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-1: class-map critical",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"name\": \"Tos0\",\n                \"config\": {\n                    \"name\": \"Tos0\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"1\",\n                            \"conditions\": {\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ]\n                            },\n                            \"config\": {\n                                \"id\": \"1\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a4fe74b-228a-4c96-b830-2cbcc26083ef",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = critical\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"critical\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-2: class-map flash",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"flash\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"name\": \"Tos0\",\n                \"config\": {\n                    \"name\": \"Tos0\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"1\",\n                            \"conditions\": {\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ]\n                            },\n                            \"config\": {\n                                \"id\": \"1\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "589ded9d-a3da-4811-b44a-7587b7d6456e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = flash\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"flash\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-3: class-map flash-override",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"flash-override\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"name\": \"Tos0\",\n                \"config\": {\n                    \"name\": \"Tos0\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"1\",\n                            \"conditions\": {\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ]\n                            },\n                            \"config\": {\n                                \"id\": \"1\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94d6425a-e544-4755-8068-a3a27afe54d3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = flash-over\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"flash-override\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-4: class-map immediate",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"immediate\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"name\": \"Tos0\",\n                \"config\": {\n                    \"name\": \"Tos0\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"1\",\n                            \"conditions\": {\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ]\n                            },\n                            \"config\": {\n                                \"id\": \"1\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8bc7daa-4d17-4cdb-ba87-dc3ab4eacfce",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = immediate\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"immediate\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-5: class-map internet",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"internet\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"name\": \"Tos0\",\n                \"config\": {\n                    \"name\": \"Tos0\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"1\",\n                            \"conditions\": {\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ]\n                            },\n                            \"config\": {\n                                \"id\": \"1\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b36d0bc-ee5d-4a30-bcbf-a4bdde259a7a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = internet\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"internet\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-6: class-map network",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"network\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"name\": \"Tos0\",\n                \"config\": {\n                    \"name\": \"Tos0\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"1\",\n                            \"conditions\": {\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ]\n                            },\n                            \"config\": {\n                                \"id\": \"1\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1236eff-ada5-4ae3-89b9-1e708d11cd9e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = network\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"network\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-7: class-map priority",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"priority\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"name\": \"Tos0\",\n                \"config\": {\n                    \"name\": \"Tos0\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"1\",\n                            \"conditions\": {\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ]\n                            },\n                            \"config\": {\n                                \"id\": \"1\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f80f9ec-cf60-4aed-8d98-8d7dd808f5b9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = priority\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"priority\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-8: class-map routine",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"routine\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"name\": \"Tos0\",\n                \"config\": {\n                    \"name\": \"Tos0\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"1\",\n                            \"conditions\": {\n                                \"frinx-qos-extension:precedences\": [\n                                    \"critical\"\n                                ]\n                            },\n                            \"config\": {\n                                \"id\": \"1\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87584ca8-bcb5-4b18-abcb-efde585afd30",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "33-9: class-map 0",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecfed4d5-1326-462a-a3f5-3588235cc6ef",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifiers\": {\n        \"classifier\": [\n            {\n                \"name\": \"test_1000\",\n                \"config\": {\n                    \"name\": \"test_1000\"\n                },\n                \"terms\": {\n                    \"term\": [\n                        {\n                            \"id\": \"all\",\n                            \"conditions\": {\n                                \"ipv4\": {\n                                    \"config\": {\n                                        \"frinx-qos-extension:acl-ref\": \"test_2000\"\n                                    }\n                                },\n                                \"mpls\": {\n                                    \"config\": {\n                                        \"traffic-class\": 0\n                                    }\n                                },\n                                \"frinx-qos-extension:precedences\": [\n                                    \"0\"\n                                ],\n                                \"frinx-qos-extension:qos-group\": [32]\n                            },\n                            \"config\": {\n                                \"id\": \"all\"\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04bc9e91-ac70-46fd-a033-fd93cfe48940",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  class-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9ad7bf6-8c6d-43f3-b555-99ac87693442",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//",
											"pm.test(\"Validate  = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(0);",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:acl-ref",
											"pm.test(\"Validate frinx-qos-extension:acl-ref = test_2000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"ipv4\"][\"config\"][\"frinx-qos-extension:acl-ref\"]).to.eql(\"test_2000\");",
											"});",
											"//frinx-qos-extension:qos-group",
											"pm.test(\"Validate frinx-qos-extension:qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"frinx-qos-extension:qos-group\"]).to.eql([32]);",
											"});",
											"//id",
											"pm.test(\"Validate id = all\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"config\"][\"name\"]).to.eql(\"test_1000\");",
											"});",
											"//name",
											"pm.test(\"Validate name = test_1000\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifiers\"][\"classifier\"][0][\"name\"]).to.eql(\"test_1000\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "7: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy set-no-export\nset community (no-export)\nend-policy\nroute-policy All_Deny\ndrop\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            },\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"221.111.203.118\",\n                            \"config\": {\n                                \"enabled\": true,\n                                \"auth-password\": \"047D39555A6C181D5B4050\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"neighbor-address\": \"221.111.203.118\",\n                                \"peer-as\": 65536,\n                                \"description\": \"AS40263-US-5\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"ipv4-unicast\": {\n                                            \"prefix-limit\": {\n                                                \"config\": {\n                                                    \"shutdown-threshold-pct\": 75,\n                                                    \"max-prefixes\": 10000\n                                                }\n                                            },\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"config\": {\n                                            \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                                \"always\": true\n                                            },\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"All_Deny\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            \"neighbor-address\": \"2400:8800:7f02::1\",\n                            \"config\": {\n                                \"enabled\": true,\n                                \"auth-password\": \"0729131F1B444D56454B5E\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"neighbor-address\": \"2400:8800:7f02::1\",\n                                \"peer-as\": 40263,\n                                \"description\": \"AS40263-US-5-v6\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                        \"config\": {\n                                            \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                                \"always\": true\n                                            },\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                        },\n                                        \"ipv6-unicast\": {\n                                            \"prefix-limit\": {\n                                                \"config\": {\n                                                    \"shutdown-threshold-pct\": 75,\n                                                    \"max-prefixes\": 10000\n                                                }\n                                            },\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"All_Deny\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            },\n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n                        \"prefix\": \"2400:2000:0:201:0:3257:2002:0/126\",\n                        \"config\": {\n                            \"prefix\": \"2400:2000:0:201:0:3257:2002:0/126\",\n                            \"frinx-cisco-bgp-extension:apply-policy\": \"set-no-export\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"221.111.203.118\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"description\"]).to.eql(\"AS40263-US-5\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = 65536\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(65536);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"ipv4-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(10000);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"neighbor-address\"]).to.eql(\"2400:8800:7f02::1\");",
											"});",
											"//description",
											"pm.test(\"Validate description = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"description\"]).to.eql(\"AS40263-US-5-v6\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"peer-as\"]).to.eql(40263);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											"//remove-private-as",
											"pm.test(\"Validate remove-private-as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"config\"][\"remove-private-as\"]).to.eql(\"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"import-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"apply-policy\"][\"config\"][\"export-policy\"][0]).to.eql(\"All_Deny\");",
											"});",
											"//always",
											"pm.test(\"Validate always = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"frinx-cisco-bgp-extension:soft-reconfiguration\"][\"always\"]).to.eql(true);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//send-default-route",
											"pm.test(\"Validate send-default-route = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"config\"][\"send-default-route\"]).to.eql(false);",
											"});",
											"//shutdown-threshold-pct",
											"pm.test(\"Validate shutdown-threshold-pct = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"shutdown-threshold-pct\"]).to.eql(75);",
											"});",
											"//max-prefixes",
											"pm.test(\"Validate max-prefixes = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][1][\"afi-safis\"][\"afi-safi\"][0][\"ipv6-unicast\"][\"prefix-limit\"][\"config\"][\"max-prefixes\"]).to.eql(10000);",
											"});",
											"//as",
											"pm.test(\"Validate as = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(17676);",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][0][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV6_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"config\"][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//afi-safi-name",
											"pm.test(\"Validate afi-safi-name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"afi-safis\"][\"afi-safi\"][1][\"afi-safi-name\"]).to.eql(\"frinx-openconfig-bgp-types:IPV4_UNICAST\");",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"prefix\"]).to.eql(\"2400:2000:0:201:0:3257:2002:0/126\");",
											"});",
											"//prefix",
											"pm.test(\"Validate prefix = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"prefix\"]).to.eql(\"2400:2000:0:201:0:3257:2002:0/126\");",
											"});",
											"//frinx-cisco-bgp-extension:apply-policy",
											"pm.test(\"Validate frinx-cisco-bgp-extension:apply-policy = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"local-aggregates\"][\"aggregate\"][0][\"config\"][\"frinx-cisco-bgp-extension:apply-policy\"]).to.eql(\"set-no-export\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//identifier",
											"pm.test(\"Validate identifier = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"identifier\"]).to.eql(\"frinx-openconfig-policy-types:BGP\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(\"default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(\"default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "28: router bgp",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"2400:8800:7f02::g\",\n                            \"config\": {\n                                \"neighbor-address\": \"2400:8800:7f02::g\",\n                                \"enabled\": false,\n                                \"peer-as\": 40263\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "29: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nroute-policy All_Deny\ndrop\nend-policy\nroute-policy to_PEER-MED100-ODN-Transit-Asia\nif as-path length ge 75 then\nset local-preference 1000\nendif\nend-policy\nroute-policy to_PEER-MED100-ODN-Transit-Asia-v6\nif as-path length ge 75 then\nset local-preference 1000\nendif\nend-policy\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            },\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"2001:df5:b800:bb00::7552:2\",\n                            \"config\": {\n                                \"enabled\": false,\n                                \"auth-password\": \"021F065903075E711D1C5D0F11131E\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"neighbor-address\": \"2001:df5:b800:bb00::7552:2\",\n                                \"peer-as\": 7552,\n                                \"description\": \"AS7552-SG-1-v6\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                        \"config\": {\n                                            \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                                \"always\": true\n                                            },\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                        },\n                                        \"ipv6-unicast\": {\n                                            \"prefix-limit\": {\n                                                \"config\": {\n                                                    \"shutdown-threshold-pct\": 101,\n                                                    \"max-prefixes\": 13000\n                                                }\n                                            },\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"to_PEER-MED100-ODN-Transit-Asia-v6\",\n                                                    \"nexthopself\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        {\n                            \"neighbor-address\": \"103.231.152.78\",\n                            \"config\": {\n                                \"enabled\": false,\n                                \"auth-password\": \"11101B071F135A5C55787F323C3739\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"neighbor-address\": \"103.231.152.78\",\n                                \"peer-as\": 7552,\n                                \"description\": \"AS7552-SG-1\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"ipv4-unicast\": {\n                                            \"prefix-limit\": {\n                                                \"config\": {\n                                                    \"shutdown-threshold-pct\": 75,\n                                                    \"max-prefixes\": 13000\n                                                }\n                                            },\n                                            \"config\": {\n                                                \"send-default-route\": false\n                                            }\n                                        },\n                                        \"config\": {\n                                            \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                                \"always\": true\n                                            },\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"to_PEER-MED100-ODN-Transit-Asia\",\n                                                    \"nexthopself\"\n                                                ],\n                                                \"import-policy\": [\n                                                    \"All_Deny\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "30: router bgp",
					"description": null,
					"item": [
						{
							"name": "Create precondition",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Loopback100\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 17676\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"221.111.203.118\",\n                            \"config\": {\n                                \"enabled\": true,\n                                \"send-community\": \"BOTH\",\n                                \"neighbor-address\": \"221.111.203.118\",\n                                \"peer-as\": 7552\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"ipv4-unicast\": {\n                                            \"config\": {\n                                                \"send-default-route\": true\n                                            }\n                                        },\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        },\n                                        \"apply-policy\": {\n                                            \"config\": {\n                                                \"export-policy\": [\n                                                    \"nexthopself\"\n                                                ]\n                                            }\n                                        }\n                                    }\n                                ]\n                            },\n                            \"ebgp-multihop\": {\n                                \"config\": {\n                                    \"enabled\": true,\n                                    \"multihop-ttl\": 256\n                                }\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"Loopback100\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            },\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n                \"name\": \"default\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "9: router ospf",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "26: router ospf",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"frinx-cisco-ospf-extension:max-metric-timers\": {\n                            \"max-metric-timer\": [\n                                {\n                                    \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                    \"config\": {\n                                        \"trigger\": \"frinx-openconfig-ospf-types:MAX_METRIC_ON_SYSTEM_BOOT\",\n                                        \"timeout\": 86401\n                                    }\n                                },\n                                {\n                                    \"trigger\": \"frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\",\n                                    \"config\": {\n                                        \"trigger\": \"frinx-cisco-ospf-extension:MAX_METRIC_ON_SWITCHOVER\",\n                                        \"timeout\": 5\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"Bundle-Ether16\",\n                                        \"config\": {\n                                            \"id\": \"Bundle-Ether16\"\n                                        },\n                                        \"frinx-bfd-extension:enable-bfd\": {\n                                            \"config\": {\n                                                \"enabled\": false\n                                            }\n                                        }\n                                    },\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0/1\",\n                                        \"config\": {\n                                            \"metric\": 1700,\n                                            \"id\": \"GigabitEthernet0/0/0/1\"\n                                        },\n                                        \"frinx-bfd-extension:enable-bfd\": {\n                                            \"config\": {\n                                                \"enabled\": false\n                                            }\n                                        },\n                                        \"mpls\": {\n                                            \"igp-ldp-sync\": {\n                                                \"config\": {\n                                                    \"enabled\": false\n                                                }\n                                            }\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "11: route-policy",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"from_PEER-ODN-Transit-US-v6\",\n                \"config\": {\n                    \"name\": \"from_PEER-ODN-Transit-US-v6\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 2048,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_GE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"ipv6-ebgp-deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-community\": {\n                                        \"config\": {\n                                            \"method\": \"INLINE\"\n                                        },\n                                        \"inline\": {\n                                            \"config\": {\n                                                \"communities\": [\n                                                    \"17676:320\",\n                                                    \"17676:430\",\n                                                    \"17676:436\"\n                                                ]\n                                            }\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-local-pref\": 1000\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "13: route-policy",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"from_as2222-MED200-ODN-Transit-Asia\",\n                \"config\": {\n                    \"name\": \"from_as2222-MED200-ODN-Transit-Asia\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 2048,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_GE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"RFC1918-DSUA_deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-community\": {\n                                        \"config\": {\n                                            \"method\": \"INLINE\"\n                                        },\n                                        \"inline\": {\n                                            \"config\": {\n                                                \"communities\": [\n                                                    \"17676:320\",\n                                                    \"17676:432\",\n                                                    \"17676:435\",\n                                                    \"17676:438\",\n                                                    \"17676:441\"\n                                                ]\n                                            }\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-local-pref\": 1000,\n                                        \"set-med\": 200\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "15: route-policy",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"from_PEER-MED300-ODN-Transit-Asia-v6\",\n                \"config\": {\n                    \"name\": \"from_PEER-MED300-ODN-Transit-Asia-v6\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 2048,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_GE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"ipv6-ebgp-deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-community\": {\n                                        \"config\": {\n                                            \"method\": \"INLINE\"\n                                        },\n                                        \"inline\": {\n                                            \"config\": {\n                                                \"communities\": [\n                                                    \"17676:320\",\n                                                    \"17676:432\",\n                                                    \"17676:438\"\n                                                ]\n                                            }\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-local-pref\": 1000,\n                                        \"set-med\": 300\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "17: route-policy",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"from_AS15169-OS-3-ODN-Transit-JP-v6\",\n                \"config\": {\n                    \"name\": \"from_AS15169-OS-3-ODN-Transit-JP-v6\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"config\": {\n                                    \"call-policy\": \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-next-hop\": \"2001:4860:1:1::545\"\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"//call-policy",
											"pm.test(\"Validate call-policy = XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"//set-next-hop",
											"pm.test(\"Validate set-next-hop = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-next-hop\"]).to.eql(\"2001:4860:1:1::545\");",
											"});",
											"//name",
											"pm.test(\"Validate policy config name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(\"from_AS15169-OS-3-ODN-Transit-JP-v6\");",
											"});",
											"//name",
											"pm.test(\"Validate policy name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(\"from_AS15169-OS-3-ODN-Transit-JP-v6\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "19: route-policy",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"to_PEER-MED100-ODN-Transit-Asia\",\n                \"config\": {\n                    \"name\": \"to_PEER-MED100-ODN-Transit-Asia\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"RFC1918-DSUA-out_deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-NOT-ADVERTISE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-1PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 4294967296\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"4\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-2PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"4\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"5\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-3PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"5\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 3,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"6\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-NOT-ADVERTISE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"6\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"7\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-1PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"7\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"8\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-2PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"8\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"9\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-3PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"9\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 3,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"10\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"DENY_YBB_CIDR_long\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"10\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"11\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"YBB_CIDR\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                },\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-as-path-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"as-path-set\": \"2\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"11\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"12\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"DENY_IPR_CIDR_long\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"12\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"13\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"IPR_CIDR\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                },\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-as-path-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"as-path-set\": \"2\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"13\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"14\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"TRANSIT_MATCH\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"14\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"15\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PI_MATCH\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"15\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"16\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PRI-Single-PI\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"16\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"17\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiPriAS-PI\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"17\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"18\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiAS-ODN-CIDR\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"18\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"19\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiAS-PI-ODN\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"19\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"20\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"ODN-TRANSIT-OUT\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"20\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "21: route-policy",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-routing-policy:policy-definitions\": {\n        \"policy-definition\": [\n            {\n                \"name\": \"to_PEER-MED100-ODN-Transit-Asia-v6\",\n                \"config\": {\n                    \"name\": \"to_PEER-MED100-ODN-Transit-Asia-v6\"\n                },\n                \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"ipv6-ebgp-out-deny\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-NOT-ADVERTISE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"3\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-1PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"3\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 4294967296\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"4\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-2PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"4\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"5\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PEER-3PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"5\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 3,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"6\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-NOT-ADVERTISE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"6\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"7\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-1PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"7\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"8\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-2PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"8\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"9\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"Asia-PEER-3PREPEND\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"9\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 3,\n                                            \"asn\": 17676\n                                        }\n                                    },\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"10\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"DENY_YBB_v6_CIDR_long\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"10\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"11\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"DENY_IPR_v6_CIDR_long\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"11\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"12\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"YBB_v6_CIDR\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                },\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-as-path-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"as-path-set\": \"2\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"12\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"13\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"IPR_v6_CIDR\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                },\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-as-path-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"as-path-set\": \"2\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"13\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"14\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"TRANSIT_MATCH\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"14\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"15\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PI_MATCH\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"15\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"16\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"PRI-Single-PI\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"16\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"17\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiPriAS-PI\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"17\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"18\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiAS-ODN-CIDR\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"18\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"19\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"MultiAS-PI-ODN\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"19\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"20\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"match-community-set\": {\n                                        \"config\": {\n                                            \"match-set-options\": \"ANY\",\n                                            \"community-set\": \"ODN-TRANSIT-OUT\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"20\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"config\": {\n                                        \"set-med\": 100\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  router policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-1: policy-map",
					"description": null,
					"item": [
						{
							"name": "replace config class-default",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Count-Policy-default\",\n            \"config\": {\n                \"name\": \"Count-Policy-default\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"all\",\n                        \"config\": {\n                            \"id\": \"all\"\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"routine\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Count-Policy-default"
							},
							"response": []
						},
						{
							"name": "replace config policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 1,\n                        \"one-rate-two-color\": {\n                            \"config\": {\n                                \"cir-pct-remaining\": 1,\n                                \"max-queue-depth-percent\": 1,\n                                \"frinx-qos-extension:max-queue-depth-ms\": 1\n                            }\n                        },\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace class-default",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f40e6738-684d-455c-a22f-cd8eaab064a5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"all\");",
											"});",
											"//id",
											"pm.test(\"Validate id = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"all\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy-default\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Count-Policy-default\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Count-Policy-default"
							},
							"response": []
						},
						{
							"name": "show  replace policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id =class-default \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\" , function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//frinx-qos-extension:max-queue-depth-ms",
											"pm.test(\"Validate frinx-qos-extension:max-queue-depth-ms = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"frinx-qos-extension:max-queue-depth-ms\"]).to.eql(1);",
											"});",
											"//cir-pct-remaining",
											"pm.test(\"Validate cir-pct-remaining = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"cir-pct-remaining\"]).to.eql(1);",
											"});",
											"//max-queue-depth-percent",
											"pm.test(\"Validate max-queue-depth-percent = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"one-rate-two-color\"][\"config\"][\"max-queue-depth-percent\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-2: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"critical\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"critical\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b888693a-c0eb-400e-ae98-f83281e6ffe4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate precedense1  =critical \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"critical\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group1 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate precedense = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 =32 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  precedence2= critical\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"critical\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-3: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"flash\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"flash\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6dca45d0-3053-465c-b598-c35da498c7b8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate precedense1  =flash \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"flash\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group1 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate precedense = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 =32 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  precedence2= flash\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"flash\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-4: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"flash-override\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"flash-override\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c19041c-6553-437c-a367-fa5754d454aa",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate precedense1  =flash-override \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"flash-override\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group1 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate precedense = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 =32 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  precedence2= flash-override\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"flash-override\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-5: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"immediate\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"immediate\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49af46fc-a11a-4fa5-8a30-2a762521d1e5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate precedense1  =immediate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"immediate\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group1 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate precedense = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 =32 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  precedence2= immediate\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"immediate\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-6: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"internet\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"internet\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e56f9a79-ef2c-4583-a75a-4596af1a3109",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate precedense1  =internet \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"internet\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group1 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate precedense = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 =32 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  precedence2= internet\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"internet\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-7: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"network\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"network\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aae34792-48e2-4e51-b322-31d2a5224673",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate precedense1  =network \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"network\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group1 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate precedense = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 =32 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  precedence2= network\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"network\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-8: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"priority\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"priority\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3062055d-cdf9-4271-940f-0ff83d31e57d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate precedense1  =priority \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"priority\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group1 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate precedense = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 =32 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  precedence2= priority\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"priority\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "34-9: policy-map",
					"description": null,
					"item": [
						{
							"name": "Create precondition config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nclass-map match-any Tos0\nmatch mpls experimental topmost 0 \nmatch precedence 0 \nend-class-map\ncommit\nend\"\n  }\n}\n"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"  }",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						},
						{
							"name": "replace config class",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:classifier\": [\n        {\n            \"name\": \"Tos0\",\n            \"config\": {\n                \"name\": \"Tos0\"\n            },\n            \"terms\": {\n                \"term\": [\n                    {\n                        \"id\": \"1\",\n                        \"conditions\": {\n                            \"mpls\": {\n                                \"config\": {\n                                    \"traffic-class\": 0\n                                }\n                            }\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"routine\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"1\"\n                        }\n                    },\n                    {\n                        \"id\": \"2\",\n                        \"conditions\": {\n                            \"frinx-qos-extension:precedences\": [\n                                \"routine\"\n                            ]\n                        },\n                        \"actions\": {\n                            \"remark\": {\n                                \"config\": {\n                                    \"set-mpls-tc\": 0,\n                                    \"frinx-qos-extension:set-precedences\": [\n                                        \"routine\"\n                                    ],\n                                    \"frinx-qos-extension:set-qos-group\": [32]\n                                }\n                            },\n                            \"config\": {\n                                \"target-group\": \"Count-Policy\"\n                            }\n                        },\n                        \"config\": {\n                            \"id\": \"2\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "replace config policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-qos:scheduler-policy\": [\n        {\n            \"name\": \"Count-Policy\",\n            \"schedulers\": {\n                \"scheduler\": [\n                    {\n                        \"sequence\": 2,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"class-default\",\n                                    \"config\": {\n                                        \"id\": \"class-default\",\n                                        \"queue\": \"class-default\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 2\n                        }\n                    },\n                    {\n                        \"sequence\": 1,\n                        \"inputs\": {\n                            \"input\": [\n                                {\n                                    \"id\": \"Tos0\",\n                                    \"config\": {\n                                        \"id\": \"Tos0\",\n                                        \"weight\": 1,\n                                        \"queue\": \"Tos0\"\n                                    }\n                                }\n                            ]\n                        },\n                        \"config\": {\n                            \"sequence\": 1\n                        }\n                    }\n                ]\n            },\n            \"config\": {\n                \"name\": \"Count-Policy\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show class any",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "abad58b8-223f-4ab8-bda4-fdf5e0bb1633",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//id",
											"pm.test(\"Validate config id =1 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"config\"][\"id\"]).to.eql(\"1\");",
											"});",
											"//traffic-class",
											"pm.test(\"Validate traffic-class = 0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"conditions\"][\"mpls\"][\"config\"][\"traffic-class\"]).to.eql(0);",
											"});",
											"//id",
											"pm.test(\"Validate id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"id\"]).to.eql(\"1\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc1 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group1 = 32\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate precedense1  =routine \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group1 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][0][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"config\"][\"id\"]).to.eql(\"2\");",
											"});",
											"//",
											"pm.test(\"Validate precedense = routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"conditions\"][\"frinx-qos-extension:precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//id",
											"pm.test(\"Validate id = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"id\"]).to.eql(\"2\");",
											"});",
											"//set-mpls-tc",
											"pm.test(\"Validate set-mpls-tc2 =0 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"set-mpls-tc\"]).to.eql(0);",
											"});",
											"//frinx-qos-extension:set-qos-group",
											"pm.test(\"Validate frinx-qos-extension:set-qos-group2 =32 \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-qos-group\"]).to.eql([32]);",
											"});",
											"//",
											"pm.test(\"Validate  precedence2= routine\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"remark\"][\"config\"][\"frinx-qos-extension:set-precedences\"][0]).to.eql(\"routine\");",
											"});",
											"//target-group",
											"pm.test(\"Validate target-group2 = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"terms\"][\"term\"][1][\"actions\"][\"config\"][\"target-group\"]).to.eql(\"Count-Policy\");",
											"});",
											"//name",
											"pm.test(\"Validate config name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"config\"][\"name\"]).to.eql(\"Tos0\");",
											"});",
											"//name",
											"pm.test(\"Validate name = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:classifier\"][0][\"name\"]).to.eql(\"Tos0\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/classifiers/classifier/Tos0"
							},
							"response": []
						},
						{
							"name": "show policy-map",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//name",
											"pm.test(\"Validate config name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"config\"][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											"//queue",
											"pm.test(\"Validate queue = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//id",
											"pm.test(\"Validate id = class-default\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"class-default\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"config\"][\"sequence\"]).to.eql(2);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 2\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][0][\"sequence\"]).to.eql(2);",
											"});",
											"//queue",
											"pm.test(\"Validate queue = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"queue\"]).to.eql(\"Tos0\");",
											"});",
											"//id",
											"pm.test(\"Validate config id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//weight",
											"pm.test(\"Validate weight = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"config\"][\"weight\"]).to.eql(1);",
											"});",
											"//id",
											"pm.test(\"Validate id = Tos0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"inputs\"][\"input\"][0][\"id\"]).to.eql(\"Tos0\");",
											"});",
											"//sequence",
											"pm.test(\"Validate config sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"config\"][\"sequence\"]).to.eql(1);",
											"});",
											"//sequence",
											"pm.test(\"Validate sequence = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"schedulers\"][\"scheduler\"][1][\"sequence\"]).to.eql(1);",
											"});",
											"//name",
											"pm.test(\"Validate name = Count-Policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-qos:scheduler-policy\"][0][\"name\"]).to.eql(\"Count-Policy\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-qos:qos/scheduler-policies/scheduler-policy/Count-Policy"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "24: interface",
					"description": null,
					"item": [
						{
							"name": "replace config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"GigabitEthernet0/0/0/0\",\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-lacp-lag-member:lacp-mode\": \"ACTIVE\",\n                    \"frinx-lacp-lag-member:interval\": \"FAST\",\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"Bundle-Ether16\"\n                }\n            },\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"GigabitEthernet0/0/0/0\",\n                \"enabled\": true,\n                \"description\": \"AS15169-OS-3-BE16-2 ID:C-B1576\"\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": 601\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//overall-configuration-status",
											"pm.test(\"Validate overall-configuration-status = \" + pm.environment.get(\"operations_result_complete\"), function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(pm.environment.get(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \n    }\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show replace  load-interval",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/GigabitEthernet0%2F0%2F0%2F0"
							},
							"response": []
						},
						{
							"name": "restore running-config from file",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}
