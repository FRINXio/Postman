{
	"info": {
		"_postman_id": "f787539b-7a3b-43fe-9429-c5356bc6f8d6",
		"name": "pc_uniconfig_lacp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Junos LACP IFC CRUD",
			"item": [
				{
					"name": "Junos LACP IFC CRUD Setup",
					"item": [
						{
							"name": "create empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69783b3a-c69a-46dd-b34e-e8dda9ad09f3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//NO ethernet",
											"pm.test(\"No subinterface\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos LACP IFC READERS",
					"item": [
						{
							"name": "configure lacp active mode and fast period",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46ac9b57-567f-4d47-ba68-408e8d4899bd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset interfaces {{lacp_intf-id}} gigether-options 802.3ad {{lacp_bundle_id}}\nset interfaces {{lacp_bundle_id}} aggregated-ether-options lacp active\nset interfaces {{lacp_bundle_id}} aggregated-ether-options lacp periodic fast\ncommit\nexit\"\n     }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c132dac7-74af-439b-baa7-c8eff65f6600",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"No error occured\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created active mode and fast period",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63876689-2a04-43e6-86b2-3a549f48ac73",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//frinx-openconfig-if-aggregate:aggregate-id",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//frinx-lacp-lag-member:lacp-mode",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
											"});",
											"//frinx-lacp-lag-member:lacp-interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
											"});",
											"//type",
											"pm.test(\"Validate type = \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete lacp active mode and fast period",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46ac9b57-567f-4d47-ba68-408e8d4899bd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete interfaces {{lacp_bundle_id}} aggregated-ether-options\ndelete interfaces {{lacp_intf-id}} gigether-options\ncommit\nexit\"\n     }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5fbb6e2-7304-43eb-b2c4-17b345421f80",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"No error occured\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lacp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfb2781c-50f4-48c5-8397-d156d0e79c4e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//NO ethernet",
											"pm.test(\"No subinterface\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos LACP IFC CRUD NEW",
			"item": [
				{
					"name": "Junos LACP IFC CRUD NEW Setup",
					"item": [
						{
							"name": "create empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_bundle_id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"name\": \"{{lacp_bundle_id}}\",\n                \"enabled\": false\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eddf8a05-c44b-40a6-ab30-033e4e937e3b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = iana-if-type:ieee8023adLag\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ieee8023adLag\");",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//NO ethernet",
											"pm.test(\"No subinterface\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos LACP IFC CRUD NEW Teardown",
					"item": [
						{
							"name": "delete lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0342030-ff5b-4794-9879-65d5b27e5b26",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cec55ff-0f00-4aaf-9b67-18ce243d2047",
										"type": "text/javascript",
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos LACP NEW READERS",
					"item": [
						{
							"name": "configure lacp active mode and fast period",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46ac9b57-567f-4d47-ba68-408e8d4899bd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset interfaces {{lacp_intf-id}} gigether-options 802.3ad {{lacp_bundle_id}}\nset interfaces {{lacp_bundle_id}} aggregated-ether-options lacp active\nset interfaces {{lacp_bundle_id}} aggregated-ether-options lacp periodic fast\ncommit\nexit\"\n     }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2bc3b8d-93bc-465a-8286-4d8377e5fc5b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"No error occured\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created active mode and fast period",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eee48c48-1f91-44fe-a41f-f276d3344bfa",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//config interval",
											"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
											"});",
											"//config lacp-mode",
											"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
											"});",
											"//interface",
											"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//config interface",
											"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-lacp:lacp"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete lacp active mode and fast period",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46ac9b57-567f-4d47-ba68-408e8d4899bd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  {\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete interfaces {{lacp_bundle_id}} aggregated-ether-options\ndelete interfaces {{lacp_intf-id}} gigether-options\ncommit\nexit\"\n     }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48334c99-5c05-4d62-a2b7-8d2121f1f20c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"No error occured\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lacp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "698fd4fb-f937-4fe8-9918-87359e4f7282",
										"type": "text/javascript",
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-lacp:lacp"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 LACP CRUD",
			"item": [
				{
					"name": "XR5 LACP IFC CRUD Setup",
					"item": [
						{
							"name": "create empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60cbe23e-c667-4207-bb69-c93c07d6b8a6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
											"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
											"    }",
											"    else{",
											"        console.warn(\"NO DIFF\" );",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13b90d08-ab18-4d26-aedd-1b044447a6bd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//NO ethernet",
											"pm.test(\"No subinterface\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LACP IFC CRUD Teardown",
					"item": [
						{
							"name": "delete ethernet",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}",
										"frinx-openconfig-if-ethernet:ethernet"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b771a8c-70e2-49b0-92b7-3e34ba3d6545",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"   pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"}",
											"if ( \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"   pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
											"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
											"    }",
											"    else{",
											"        console.warn(\"NO DIFF\" );",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7311edf0-a2ef-43c1-9e12-17e58f99daf2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//NO ethernet",
											"pm.test(\"No subinterface\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).not.to.have.a.property('frinx-openconfig-if-ethernet:ethernet');",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LACP CRUD READERS",
					"item": [
						{
							"name": "configure LACP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d42ca83e-b7b3-43ae-ba23-eca84815ec3e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{lacp_intf-id}}\nbundle id {{lacp_bundle_id_nr}} mode {{lacp_mode_xr_active}}\nlacp period short\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76f00eab-856b-465f-9d91-7802d0eb67c6",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured lacp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65bac9eb-0b6b-4be6-963e-536c76920c3c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//frinx-lacp-lag-member:interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
											"});",
											"//frinx-openconfig-if-aggregate:aggregate-id",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//frinx-lacp-lag-member:lacp-mode",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
											"});",
											"//type",
											"pm.test(\"Validate type = \" + pm.environment.get(\"type\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(pm.environment.get(\"type\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete LACP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f8c3382-6634-4110-a3f3-daadd46c9218",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{lacp_intf-id}}\nno bundle id {{lacp_bundle_id_nr}} mode {{lacp_mode_xr_active}}\nno lacp period short\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d435ba12-e93b-420e-8e01-65425865fcc1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ASR LACP CRUD NEW",
			"item": [
				{
					"name": "ASR LACP IFC CRUD NEW Cisco Setup",
					"item": [
						{
							"name": "create empty lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_bundle_id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lacp_bundle_id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
											"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
											"    }",
											"    else{",
											"        console.warn(\"NO DIFF\" );",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0f6a0cd-ce0a-47cc-b206-0407a8bb5c76",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \" + pm.environment.get(\"lag_enabled\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"lag_enabled\")));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ASR LACP IFC CRUD NEW Cisco Teardown",
					"item": [
						{
							"name": "delete ethernet",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b771a8c-70e2-49b0-92b7-3e34ba3d6545",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"   pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"}",
											"if ( \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"   pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
											"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
											"    }",
											"    else{",
											"        console.warn(\"NO DIFF\" );",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "990ce651-6caf-4be5-9db2-9961680b69b3",
										"type": "text/javascript",
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ASR LACP CRUD NEW READERS",
					"item": [
						{
							"name": "configure LACP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d42ca83e-b7b3-43ae-ba23-eca84815ec3e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{lacp_bundle_id}}\nlacp mode {{lacp_mode_xr_active}}\nlacp period short\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76f00eab-856b-465f-9d91-7802d0eb67c6",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured lacp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70053ca3-7594-40af-a9e0-358503f7f9e9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
											"});",
											"//lacp-mode",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
											"});",
											"//config name",
											"pm.test(\"Validate name = bundle ether\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//config name",
											"pm.test(\"Validate name = bundle ether\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-lacp:lacp"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete LACP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f8c3382-6634-4110-a3f3-daadd46c9218",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{lacp_bundle_id}}\nno lacp mode {{lacp_mode_xr_active}}\nno lacp period short\nno interface {{lacp_bundle_id}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lacp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0ae94cf-f4c2-495f-927d-907e9c9f418e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code i 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-lacp:lacp"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d435ba12-e93b-420e-8e01-65425865fcc1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 LACP CRUD NEW",
			"item": [
				{
					"name": "XR5 LACP IFC CRUD NEW Cisco-Ext Setup",
					"item": [
						{
							"name": "create empty lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_bundle_id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lacp_bundle_id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
											"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
											"    }",
											"    else{",
											"        console.warn(\"NO DIFF\" );",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show created empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0f6a0cd-ce0a-47cc-b206-0407a8bb5c76",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \" + pm.environment.get(\"lag_enabled\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"lag_enabled\")));",
											"});",
											"//config name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LACP IFC CRUD NEW Cisco-Ext Teardown",
					"item": [
						{
							"name": "delete ethernet",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b771a8c-70e2-49b0-92b7-3e34ba3d6545",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"   pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"}",
											"if ( \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"   pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a9e125d-e86a-466c-be86-4494a8838303",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
											"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
											"    }",
											"    else{",
											"        console.warn(\"NO DIFF\" );",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "990ce651-6caf-4be5-9db2-9961680b69b3",
										"type": "text/javascript",
										"exec": [
											" console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_bundle_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{lacp_bundle_id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LACP CRUD NEW READERS",
					"item": [
						{
							"name": "configure LACP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d42ca83e-b7b3-43ae-ba23-eca84815ec3e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{lacp_bundle_id}}\ninterface {{lacp_intf-id}}\nbundle id {{lacp_bundle_id_nr}} mode {{lacp_mode_xr_active}}\nlacp period short\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76f00eab-856b-465f-9d91-7802d0eb67c6",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show configured lacp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c1466d9-9ae0-45d8-b98f-bb2504a4c3f4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//interval",
											"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//name",
											"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
											"});",
											"//member interval",
											"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
											"});",
											"//lacp-mode",
											"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
											"});",
											"//config interface",
											"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});",
											"//config interface",
											"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-lacp:lacp"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete LACP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f8c3382-6634-4110-a3f3-daadd46c9218",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface {{lacp_intf-id}}\nno bundle id {{lacp_bundle_id_nr}} mode {{lacp_mode_xr_active}}\nno lacp period short\nno interface {{lacp_bundle_id}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted lacp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef52ba1d-97a7-4b06-91d2-ed357c3db2f2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code i 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-lacp:lacp"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d435ba12-e93b-420e-8e01-65425865fcc1",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "LACP IFC CRUD",
					"item": [
						{
							"name": "LACP IFC CRUD interface",
							"item": [
								{
									"name": "create passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aad6fbe2-d52a-41f7-9ec0-6ad2b85950e9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n        }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "356c6c24-b799-415e-b58a-36d9aeb32b73",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "515e5882-0dac-41c7-bb15-dadbd990b30d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\"\n        }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6d9042d-1e5f-4f72-bc21-bf1f867d761a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_fast}}\"\n        }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eea5af2d-5025-4683-80ff-ec4b1d2493db",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//frinx-lacp-lag-member:interval",
													"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_slow}}\"\n        }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ad077ee-dda2-40cb-943b-e25c4a94c517",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//frinx-lacp-lag-member:interval",
													"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create passive mode diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "414cfda4-6503-48db-a0fd-2081f326d02c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id2}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id2}}\",\n                \"enabled\": false\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n        }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created passive mode diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "356c6c24-b799-415e-b58a-36d9aeb32b73",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id2\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id2\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id2\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create empty diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id2}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id2}}\",\n                \"enabled\": false\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id2}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "885a6eee-9c9d-434c-a01d-4c10fccfd067",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53eb8b77-cce5-48cb-b6b4-e0e375298fd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LACP IFC CRUD element",
							"item": [
								{
									"name": "create passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "136d25f7-40a5-47f9-94a5-200298ec2411",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}",
												"frinx-openconfig-if-ethernet:ethernet"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94eaa55c-b975-400b-bdfe-ebccb5fbaa43",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "808768bb-c484-4788-847e-68e1a2ae1828",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}",
												"frinx-openconfig-if-ethernet:ethernet"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c1c4955-81e3-44d3-a189-beef8e9a968f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_fast}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}",
												"frinx-openconfig-if-ethernet:ethernet"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32007234-fcbe-437d-bec5-d4a72c3d3cd0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//frinx-lacp-lag-member:interval",
													"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_slow}}\"\n\t\t\t\t}\n            }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}",
												"frinx-openconfig-if-ethernet:ethernet"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6ada4bb-edd3-4adf-b8f9-acfd0ce39755",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//frinx-lacp-lag-member:interval",
													"pm.test(\"Validate frinx-lacp-lag-member:interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//frinx-openconfig-if-aggregate:aggregate-id",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//frinx-lacp-lag-member:lacp-mode",
													"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//type",
													"pm.test(\"Validate type = \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"type\"]).to.eql(\"iana-if-type:ethernetCsmacd\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "885a6eee-9c9d-434c-a01d-4c10fccfd067",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53eb8b77-cce5-48cb-b6b4-e0e375298fd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests NEW",
			"item": [
				{
					"name": "LACP IFC CRUD NEW",
					"item": [
						{
							"name": "LACP IFC CRUD NEW Cisco interface",
							"item": [
								{
									"name": "negative-check error output",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98baf8cd-82f7-4aff-bffb-ade514dbb337",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_bundle_id_negative}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_bundle_id_negative}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_active}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca8cc328-619c-44e8-a3e6-074d87aced20",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate fail overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"});",
													"pm.test(\"Validate fail configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate fail configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-message\"]).to.include(\"Cannot change ethernet configuration for non ethernet interface\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "create active mode and fast interval",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5e3be8c-98fa-46ff-a8cf-c2bf15fee7ad",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_active}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created active mode and fast interval",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d15737b-1065-4b78-9309-43feaf574bee",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//config lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//member interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "update passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "515e5882-0dac-41c7-bb15-dadbd990b30d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90c9a5b9-6164-4ac1-bb48-2c1e7a7e4b26",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//config lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//member interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_fast}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebd9bd3d-4fb7-422b-a4ab-f6a1dbc37087",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//config lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//member interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update passive mode commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79867d8d-b008-4909-bd13-d10fb6a064a1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//no config lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//no member interval",
													"pm.test(\"Validate no interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove active mode from members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update removed mode from member commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed member mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed7b1f29-2e2f-4337-a68b-257e3379a75b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//no config lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//no member interval",
													"pm.test(\"Validate no interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no member lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove members commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d2b0428-73a7-4519-acf0-386b52383d1a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//no config lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//interface",
													"pm.test(\"Validate no member interface \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0]).to.not.have.own.property(\"members\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2695954-8153-4184-aae8-f0aebb9d5f94",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdcc1e7e-ee54-4a2e-adf4-cae8df63e72b",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create active mode and fast interval again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98baf8cd-82f7-4aff-bffb-ade514dbb337",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_active}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "create member and lacp commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp and member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80527038-b547-4633-8c2a-24cde3a2d5c6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44802dfd-5bc1-43f4-8b60-17f42a78080b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete member commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "399fb5d9-125a-439a-8c80-361070773bd6",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp without member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95a8813a-8adc-4a24-b3c3-9a4e58eead28",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8570e74-d39e-452f-b130-15f2bbea465b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78916654-9961-4d8f-bb21-cc91d9ab2726",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "885a6eee-9c9d-434c-a01d-4c10fccfd067",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53eb8b77-cce5-48cb-b6b4-e0e375298fd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LACP IFC CRUD NEW Cisco-Ext interface",
							"item": [
								{
									"name": "negative-chcek error output kotlin string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98baf8cd-82f7-4aff-bffb-ade514dbb337",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_bundle_id_negative}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_bundle_id_negative}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "826166ba-b877-40d3-a8b4-05312e350924",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate fail overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"});",
													"pm.test(\"Validate fail configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate fail configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-message\"]).to.include(\"Cannot change ethernet configuration for non ethernet interface\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "create fast interval",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9afc150a-0ff0-46f2-8766-901ed0510528",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created fast interval",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78d29e0c-3c97-4bfe-80ca-23a07e883e70",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//member interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "update passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "515e5882-0dac-41c7-bb15-dadbd990b30d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f97a235f-c91e-4208-92ee-0a5a60131dee",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//member interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_fast}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50703c02-60db-442b-838a-b002938499e8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//member interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update passive mode commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79867d8d-b008-4909-bd13-d10fb6a064a1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//no config lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//no member interval",
													"pm.test(\"Validate no interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove active mode from members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update removed mode from member commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed member mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed7b1f29-2e2f-4337-a68b-257e3379a75b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//no config lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//no member interval",
													"pm.test(\"Validate no interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no member lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove members commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d2b0428-73a7-4519-acf0-386b52383d1a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//no config lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//interface",
													"pm.test(\"Validate no member interface \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0]).to.not.have.own.property(\"members\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ab56ab5-5c9a-461a-a0c5-f9d28f6bbb1f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdcc1e7e-ee54-4a2e-adf4-cae8df63e72b",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create active mode and fast interval again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98baf8cd-82f7-4aff-bffb-ade514dbb337",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "create member and lacp commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp and member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80527038-b547-4633-8c2a-24cde3a2d5c6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44802dfd-5bc1-43f4-8b60-17f42a78080b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete member commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "399fb5d9-125a-439a-8c80-361070773bd6",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp without member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4592577-d8b2-4845-acfc-644754f4194c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8570e74-d39e-452f-b130-15f2bbea465b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78916654-9961-4d8f-bb21-cc91d9ab2726",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create active mode and fast interval diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3d86b29-5e2c-4472-a119-98568f9c54f6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{iacl_intf-id}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{iacl_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp and member diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99934bd7-f4be-4c26-ab28-3a41e77cc91d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"iacl_intf-id\"));",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{iacl_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{iacl_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp config diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8570e74-d39e-452f-b130-15f2bbea465b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp commit diff interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "885a6eee-9c9d-434c-a01d-4c10fccfd067",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53eb8b77-cce5-48cb-b6b4-e0e375298fd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LACP IFC CRUD NEW interface",
							"item": [
								{
									"name": "negative-chcek error output",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98baf8cd-82f7-4aff-bffb-ade514dbb337",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_bundle_id_negative}}\",\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_bundle_id_negative}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_active}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e804dc9-8653-4331-be51-d551c3788336",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate fail overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"});",
													"pm.test(\"Validate fail configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate fail configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-message\"]).to.include(\"Ethernet interface aggregation configuration is supported only on ethernet interfaces\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"No error occured\", function() {",
													"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "create active mode and fast interval",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39a2aaac-4658-4e73-97de-1e77f8e06ac3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_active}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created active mode and fast interval",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2a3ff68-3cf1-4851-bd45-b2a4e662c22e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//config lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "update passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "515e5882-0dac-41c7-bb15-dadbd990b30d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f772354-f8c6-42e6-8d0d-b95214d5496c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//config lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93dc1f66-6a62-40e8-94de-0e9341cb3e73",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//config lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update passive mode commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ba8c29c-0b3c-4592-9e23-140aa6dd9f16",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//no config lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//config interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//no member interval",
													"pm.test(\"Validate no interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"members\"][\"member\"][0][\"config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9bb47de-d1b5-494b-890f-d8dc711241d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    \n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove members commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d2b0428-73a7-4519-acf0-386b52383d1a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//config interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//no config lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													"//interface",
													"pm.test(\"Validate no member interface \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0]).to.not.have.own.property(\"members\");",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2695954-8153-4184-aae8-f0aebb9d5f94",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting LACP",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdcc1e7e-ee54-4a2e-adf4-cae8df63e72b",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create active mode and fast interval again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98baf8cd-82f7-4aff-bffb-ade514dbb337",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{    \"frinx-openconfig-lacp:lacp\": {\n        \"interfaces\": {\n            \"interface\": [\n                {\n                    \"name\": \"{{lacp_bundle_id}}\",\n                    \"members\": {\n                        \"member\": [\n                            {\n                                \"interface\": \"{{lacp_intf-id}}\",\n                                \"config\": {\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                        ]\n                    },\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_active}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp"
											]
										}
									},
									"response": []
								},
								{
									"name": "create member and lacp commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp and member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c0b3faa-625e-4955-bd6b-c48babf5afd7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete member config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44802dfd-5bc1-43f4-8b60-17f42a78080b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete member config commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "399fb5d9-125a-439a-8c80-361070773bd6",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp without member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95a8813a-8adc-4a24-b3c3-9a4e58eead28",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//config name",
													"pm.test(\"Validate config name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:interface\"][0][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8570e74-d39e-452f-b130-15f2bbea465b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp config commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show nonexisting lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78916654-9961-4d8f-bb21-cc91d9ab2726",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "885a6eee-9c9d-434c-a01d-4c10fccfd067",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53eb8b77-cce5-48cb-b6b4-e0e375298fd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LACP IFC CRUD NEW Cisco element",
							"item": [
								{
									"name": "create passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e325558-ba7e-4d9d-bdc7-7713d5e543d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0810a921-2258-41c8-a987-30d391ce88b4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "808768bb-c484-4788-847e-68e1a2ae1828",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_active}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2609fddd-049e-4adf-9084-6caf850d85a5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9cecd5f-8185-4553-bd4b-76aa0fccfd8f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no lacp-mode\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"lacp-mode\")",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "631e7e2f-4665-4681-bf20-8c9647b56c83",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate no interval \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no lacp-mode\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "add lacp member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "555f2a4e-135e-4060-9827-5d5bfae84acd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                       \n                    \n                \n            \n        \n    \n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "member commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81131f74-6d43-47ed-8cd9-9412b33265d5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete passive from member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                       \n                    \n                \n            \n        \n    \n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no lacp mode passive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2be96f7-4689-44e9-bda8-c024390b7e80",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update member to fast and active",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_fast}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                       \n                    \n                \n            \n        \n    \n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update member commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show fast and active member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7ab7726-f089-4fc6-911e-06b9b5d869f1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove fast interval from member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                                \"config\": {\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                       \n                    \n                \n            \n        \n    \n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove interval commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed interval",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b27d02d2-156e-41db-b46a-0816fc72c75b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate no interval \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1764a696-b03b-4738-8c67-23f31c9a4751",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24b82e43-58df-43b5-a430-706e060e347f",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "885a6eee-9c9d-434c-a01d-4c10fccfd067",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53eb8b77-cce5-48cb-b6b4-e0e375298fd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LACP IFC CRUD NEW Cisco-Ext element",
							"item": [
								{
									"name": "create slow interval on bundle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fc66533-46d9-4e4d-af27-3b319560ed14",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9cecd5f-8185-4553-bd4b-76aa0fccfd8f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no lacp-mode\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"lacp-mode\")",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "add lacp member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "555f2a4e-135e-4060-9827-5d5bfae84acd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                       \n                    \n                \n            \n        \n    \n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "member commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show lacp member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81131f74-6d43-47ed-8cd9-9412b33265d5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete passive from member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_slow}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                       \n                    \n                \n            \n        \n    \n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no lacp mode passive",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2be96f7-4689-44e9-bda8-c024390b7e80",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no lacp-mode \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"lacp-mode\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update member to fast and active",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                                \"config\": {\n                                    \"interval\": \"{{lacp_interval_fast}}\",\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                       \n                    \n                \n            \n        \n    \n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update member commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show fast and active member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7ab7726-f089-4fc6-911e-06b9b5d869f1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove fast interval from member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                                \"config\": {\n                                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                                    \"interface\": \"{{lacp_intf-id}}\"\n                                }\n                            }\n                       \n                    \n                \n            \n        \n    \n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove interval commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show removed interval",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b27d02d2-156e-41db-b46a-0816fc72c75b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate no interval \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//interface",
													"pm.test(\"Validate interface = \" + pm.environment.get(\"lacp_intf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interface\"]).to.eql(pm.environment.get(\"lacp_intf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/members/member/{{lacp_url_intf-id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"members",
												"member",
												"{{lacp_url_intf-id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1764a696-b03b-4738-8c67-23f31c9a4751",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"output\") && jsonData.output['node-with-diff'] ) {",
													"       console.warn(\"Calculate diff failed,Configuration datastore differs from operational\") ;",
													"    }",
													"    else{",
													"        console.warn(\"NO DIFF\" );",
													"    }"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24b82e43-58df-43b5-a430-706e060e347f",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "885a6eee-9c9d-434c-a01d-4c10fccfd067",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53eb8b77-cce5-48cb-b6b4-e0e375298fd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LACP IFC CRUD NEW element",
							"item": [
								{
									"name": "create passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e325558-ba7e-4d9d-bdc7-7713d5e543d2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created passive mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0810a921-2258-41c8-a987-30d391ce88b4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_passive\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "808768bb-c484-4788-847e-68e1a2ae1828",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_fast}}\",\n                        \"lacp-mode\": \"{{lacp_mode_active}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated active mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2609fddd-049e-4adf-9084-6caf850d85a5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_fast\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_fast\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate lacp-mode = \" + pm.environment.get(\"lacp_mode_active\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_active\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"interval\": \"{{lacp_interval_slow}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period fast commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9325358a-de0b-46c4-8987-3811bb5251ba",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period fast",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9cecd5f-8185-4553-bd4b-76aa0fccfd8f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no lacp-mode\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"lacp-mode\")",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b4d2e2-02aa-4d0e-8f8c-59672ea5ecc3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n                    \"config\": {\n                        \"lacp-mode\": \"{{lacp_mode_passive}}\",\n                        \"name\": \"{{lacp_bundle_id}}\"\n                    }\n                }\n\n\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "update period slow commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated period slow",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "631e7e2f-4665-4681-bf20-8c9647b56c83",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//interval",
													"pm.test(\"Validate no interval \", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"]).to.not.have.own.property(\"interval\");",
													"});",
													"//lacp-mode",
													"pm.test(\"Validate no lacp-mode\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"lacp-mode\"]).to.eql(pm.environment.get(\"lacp_mode_passive\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lacp_bundle_id\"), function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:config\"][\"name\"]).to.eql(pm.environment.get(\"lacp_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1764a696-b03b-4738-8c67-23f31c9a4751",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete lacp commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782b7a74-9a16-4a1b-868b-bc903ba16e93",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-status-result\" in pm.response.json()[\"output\"][\"node-sync-status-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "calculate diff",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a9e125d-e86a-466c-be86-4494a8838303",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"  ",
													"});",
													"",
													"pm.test(\"Configuration and operational datastore is equal \", function() {",
													"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:calculate-diff"
											]
										}
									},
									"response": []
								},
								{
									"name": "show deleted lacp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24b82e43-58df-43b5-a430-706e060e347f",
												"type": "text/javascript",
												"exec": [
													" console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-lacp:lacp/interfaces/interface/{{lacp_bundle_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-lacp:lacp",
												"interfaces",
												"interface",
												"{{lacp_bundle_id}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "885a6eee-9c9d-434c-a01d-4c10fccfd067",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "53eb8b77-cce5-48cb-b6b4-e0e375298fd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}
