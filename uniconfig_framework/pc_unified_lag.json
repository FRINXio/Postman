{
	"info": {
		"_postman_id": "bce4b2b3-9874-4b05-8a72-484afd16dd08",
		"name": "pc_unified_lag",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR LAG with BFD",
			"item": [
				{
					"name": "XR LAG with BFD READERS",
					"item": [
						{
							"name": "Delete LAG subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.warn(\"// temporarily - this step is to remove subinterface\")",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}.0\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nbfd mode ietf\nbfd address-family ipv4 destination {{lag_bfd_destination-address}}\nbfd address-family ipv4 fast-detect\nbfd address-family ipv4 minimum-interval {{lag_bfd_min-interval}}\nbfd address-family ipv4 multiplier {{lag_bfd_multiplier}}\nno shutdown\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show LAG instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = [];",
											"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
											"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
											"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
											"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
											"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
											"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
											"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
											"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
											"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
											"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
											"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
											"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
											"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
											"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
											"",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.warn(\"// temporarily - this step is to remove subinterface\")",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}.0\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR LAG with BFD Setup",
					"item": [
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
											"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "show LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = [];",
											"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
											"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
											"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
											"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
											"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
											"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
											"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
											"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
											"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
											"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
											"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
											"//this should not fail at non physical devices",
											"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
											"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
											"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
											"",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
											"});",
											"",
											"pm.environment.set(\"response_body_string\", responseBody);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR LAG with BFD Teardown",
					"item": [
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
											"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 LAG without BFD",
			"item": [
				{
					"name": "XR5 LAG without-BFD READERS",
					"item": [
						{
							"name": "Delete LAG subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.warn(\"// temporarily - this step is to remove subinterface\")",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}.0\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LAG interface without BFD",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\nipv6 address {{eth_ipv6}}/{{eth_ipv6_prefix}}\nipv6 nd suppress-ra\ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nno shutdown\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show LAG instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
											"});",
											"//load-interval",
											"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
											"});",
											"//half-life",
											"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
											"});",
											"//reuse",
											"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
											"});",
											"//suppress",
											"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
											"});",
											"//max-suppress",
											"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
											"});",
											"//mtu",
											"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
											"});",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
											"});",
											"//min-links",
											"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
											"});",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
											"});",
											"//suppress - configured by: ipv6 nd suppress-ra",
											"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.warn(\"// temporarily - this step is to remove subinterface\")",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}.0\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG without BFD Setup",
					"item": [
						{
							"name": "delete previous LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "187594d0-26d0-4a93-ba38-8932101c94f4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"There is no interface \" + 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\"), function() {",
											"  var json_string = pm.response.json()[\"interfaces\"][\"interface\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    pm.expect(json_string[i][\"name\"]).not.to.eql('Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "create simple LAG interface without BFD",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "518769e0-a6ca-45f2-8d8f-ceded172e36c",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n       }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show simple LAG interface without BFD",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = \" + pm.environment.get(\"lag_enabled\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(pm.environment.get(\"lag_enabled\")));",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG without BFD Teardown",
					"item": [
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"There is no interface \" + 'Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\"), function() {",
											"  var json_string = pm.response.json()[\"interfaces\"][\"interface\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    pm.expect(json_string[i][\"name\"]).not.to.eql('Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "XR5 LAG with BFD",
			"item": [
				{
					"name": "XR5 LAG with-BFD READERS",
					"item": [
						{
							"name": "Delete LAG subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.warn(\"// temporarily - this step is to remove subinterface\")",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}.0\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list {{flow_prereq_ipv6_acl1}}\nno ipv6 access-list {{flow_prereq_ipv6_acl2}}\nno ipv4 access-list {{flow_prereq_ipv4_acl1}}\nno ipv4 access-list {{flow_prereq_ipv4_acl2}}\nno flow monitor-map {{flow_prereq_ipv6_monitor1}}\nno flow monitor-map {{flow_prereq_ipv6_monitor2}}\nno flow monitor-map {{flow_prereq_ipv4_monitor1}}\nno flow monitor-map {{flow_prereq_ipv4_monitor2}}\nno sampler-map {{flow_prereq_sampler1}}\nno sampler-map {{flow_prereq_sampler2}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv6 access-list {{flow_prereq_ipv6_acl1}}\n10 deny ipv6 any any\nexit\nipv6 access-list {{flow_prereq_ipv6_acl2}}\n20 deny ipv6 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl1}}\n10 deny ipv4 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl2}}\n20 deny ipv4 any any\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor1}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor2}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor1}}\nrecord ipv4\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor2}}\nrecord ipv4 peer-as\nexit\nsampler-map {{flow_prereq_sampler1}}\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}\nrandom 1 out-of 10\nexit\ncommit\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface bundle-ether {{lag_inf-id}}\ndescription {{lag_description}}\nmtu {{lag_mtu}}\nipv4 address {{lag_ip}} {{lag_mask}}\nipv6 address {{eth_ipv6}}/{{eth_ipv6_prefix}}\nipv6 nd suppress-ra\nflow ipv4 monitor {{flow_prereq_ipv4_monitor1}} sampler {{flow_prereq_sampler1}} egress\nflow ipv4 monitor {{flow_prereq_ipv4_monitor2}} sampler {{flow_prereq_sampler2}} ingress\nflow ipv6 monitor {{flow_prereq_ipv6_monitor1}} sampler {{flow_prereq_sampler1}} egress\nflow ipv6 monitor {{flow_prereq_ipv6_monitor2}} sampler {{flow_prereq_sampler2}} ingress\nipv6 access-group {{flow_prereq_ipv6_acl1}} egress compress level 1 interface-statistics \nipv6 access-group {{flow_prereq_ipv6_acl2}} ingress compress level 1 interface-statistics \nipv4 access-group {{flow_prereq_ipv4_acl1}} egress compress level 1 interface-statistics \nipv4 access-group {{flow_prereq_ipv4_acl2}} ingress compress level 1 interface-statistics \ndampening {{lag_damp_half-life}} {{lag_damp_reuse}} {{lag_damp_suppress}} {{lag_damp_max-supress}}\nload-interval {{lag_load-interval}}\nbundle minimum-active links {{lag_min-links}}\nbfd mode ietf\nbfd address-family ipv4 destination {{lag_bfd_destination-address}}\nbfd address-family ipv4 fast-detect\nbfd address-family ipv4 minimum-interval {{lag_bfd_min-interval}}\nbfd address-family ipv4 multiplier {{lag_bfd_multiplier}}\nno shutdown\ncommit\nexit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show LAG instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
											"});",
											"//name",
											"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
											"});",
											"",
											"//load-interval",
											"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
											"});",
											"",
											"//half-life",
											"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
											"});",
											"",
											"//reuse",
											"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
											"});",
											"",
											"//suppress",
											"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
											"});",
											"",
											"//max-suppress",
											"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
											"});",
											"",
											"//mtu",
											"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
											"});",
											"",
											"//description",
											"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
											"});",
											"",
											"//min-links",
											"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
											"});",
											"",
											"//ip",
											"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
											"});",
											"",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
											"});",
											"",
											"//ip",
											"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
											"});",
											"//ip",
											"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
											"});",
											"",
											"//prefix-length",
											"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
											"});",
											"",
											"//suppress - configured by: ipv6 nd suppress-ra",
											"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
											"});",
											"",
											"//min-interval",
											"pm.test(\"Validate min-interval = \" + pm.environment.get(\"lag_bfd_min-interval\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"min-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_bfd_min-interval\")));",
											"});",
											"//destination-address",
											"pm.test(\"Validate destination-address = \" + pm.environment.get(\"lag_bfd_destination-address\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"destination-address\"]).to.eql(pm.environment.get(\"lag_bfd_destination-address\"));",
											"});",
											"//multiplier",
											"pm.test(\"Validate multiplier = \" + pm.environment.get(\"lag_bfd_multiplier\"), function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"multiplier\"]).to.eql(JSON.parse(pm.environment.get(\"lag_bfd_multiplier\")));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show LAG flow",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//IPV6",
											"pm.test(\"Validate IPv6 ingress flow\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
											"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
											"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
											"    }",
											"  }",
											"});",
											"pm.test(\"Validate IPv6 egress flow\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
											"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
											"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
											"    }",
											"  }",
											"});",
											"",
											"//IPV4",
											"pm.test(\"Validate IPv4 ingress flow\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
											"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
											"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
											"    }",
											"  }",
											"});",
											"pm.test(\"Validate IPv4 egress flow\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
											"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
											"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
											"    }",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-netflow:netflow",
										"interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show LAG acl",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//IPV6",
											"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
											"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
											"    }",
											"  }",
											"});",
											"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
											"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
											"    }",
											"  }",
											"});",
											"",
											"//IPV4",
											"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
											"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
											"    }",
											"  }",
											"});",
											"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
											"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
											"  for (var i = 0; i < json_string.length; i++) {",
											"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
											"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
											"    }",
											"  }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-acl:acl",
										"interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG subinterface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.warn(\"// temporarily - this step is to remove subinterface\")",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}.0\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     no interface bundle-ether {{lag_inf-id}}\n     commit\n     end\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list {{flow_prereq_ipv6_acl1}}\nno ipv6 access-list {{flow_prereq_ipv6_acl2}}\nno ipv4 access-list {{flow_prereq_ipv4_acl1}}\nno ipv4 access-list {{flow_prereq_ipv4_acl2}}\nno flow monitor-map {{flow_prereq_ipv6_monitor1}}\nno flow monitor-map {{flow_prereq_ipv6_monitor2}}\nno flow monitor-map {{flow_prereq_ipv4_monitor1}}\nno flow monitor-map {{flow_prereq_ipv4_monitor2}}\nno sampler-map {{flow_prereq_sampler1}}\nno sampler-map {{flow_prereq_sampler2}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG with BFD Setup",
					"item": [
						{
							"name": "Create flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv6 access-list {{flow_prereq_ipv6_acl1}}\n10 deny ipv6 any any\nexit\nipv6 access-list {{flow_prereq_ipv6_acl2}}\n20 deny ipv6 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl1}}\n10 deny ipv4 any any\nexit\nipv4 access-list {{flow_prereq_ipv4_acl2}}\n20 deny ipv4 any any\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor1}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv6_monitor2}}\nrecord ipv6\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor1}}\nrecord ipv4\nexit\nflow monitor-map {{flow_prereq_ipv4_monitor2}}\nrecord ipv4 peer-as\nexit\nsampler-map {{flow_prereq_sampler1}}\nrandom 1 out-of 10000\nexit\nsampler-map {{flow_prereq_sampler2}}\nrandom 1 out-of 10\nexit\ncommit\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
											"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								},
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "show LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var mystring = [];",
											"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
											"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
											"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
											"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
											"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
											"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
											"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
											"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
											"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
											"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
											"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
											"//this should not fail at non physical devices",
											"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
											"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
											"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
											"",
											"",
											"mystring.forEach(function(entry) {",
											"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
											"});",
											"",
											"pm.environment.set(\"response_body_string\", responseBody);",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG with BFD Teardown",
					"item": [
						{
							"name": "Delete LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"",
											"var mystring = '\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"';",
											"tests[\"Body does not match string \" + mystring] = !responseBody.has(mystring);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted LAG interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether{{lag_inf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete flow prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv6 access-list {{flow_prereq_ipv6_acl1}}\nno ipv6 access-list {{flow_prereq_ipv6_acl2}}\nno ipv4 access-list {{flow_prereq_ipv4_acl1}}\nno ipv4 access-list {{flow_prereq_ipv4_acl2}}\nno flow monitor-map {{flow_prereq_ipv6_monitor1}}\nno flow monitor-map {{flow_prereq_ipv6_monitor2}}\nno flow monitor-map {{flow_prereq_ipv4_monitor1}}\nno flow monitor-map {{flow_prereq_ipv4_monitor2}}\nno sampler-map {{flow_prereq_sampler1}}\nno sampler-map {{flow_prereq_sampler2}}\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "LAG without BFD",
					"item": [
						{
							"name": "LAG without BFD basic",
							"item": [
								{
									"name": "Create LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_reuse\"));",
													"pm.environment.set(\"lag_damp_reuse\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_damp_reuse"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_reuse\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_load-interval\"));",
													"pm.environment.set(\"lag_load-interval\", parseInt(pm.environment.get(\"original_value\")) + 30);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_load-interval"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_load-interval\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_half-life\"));",
													"pm.environment.set(\"lag_damp_half-life\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_damp_half-life"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_half-life\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_suppress\"));",
													"pm.environment.set(\"lag_damp_suppress\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_damp_suppress"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_suppress\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_damp_max-supress\"));",
													"pm.environment.set(\"lag_damp_max-supress\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_damp_max-supress"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_damp_max-supress\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_min-links\"));",
													"pm.environment.set(\"lag_min-links\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_min-links"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_min-links\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_description\"));",
													"pm.environment.set(\"lag_description\", pm.environment.get(\"original_value\") + \" xxx\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_description"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_description\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_mtu\"));",
													"pm.environment.set(\"lag_mtu\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_mtu"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_mtu\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_ip\"));",
													"pm.environment.set(\"lag_ip\", \"1\" + /*parseInt(*/pm.environment.get(\"original_value\")/*) + 1*/);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_ip"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_ip\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_prefix-length\"));",
													"pm.environment.set(\"lag_prefix-length\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": 60\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_prefix-length"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});",
													"",
													"pm.environment.set(\"lag_prefix-length\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n       }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Only basic config"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "13. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Basic config + subinterfaces"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
													"});",
													"",
													"//*********************************************************",
													"// I validate that some properties are not present in the response json structure",
													"//*********************************************************",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval is not present \", function() {",
													"    //pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]);",
													"    var PathIsUndefined = function () { pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]); };",
													"    pm.expect(PathIsUndefined).to.throw(\"Cannot read property 'config' of undefined\");",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life is not present\", function() {",
													"  pm.expect(function(){",
													"      pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"])",
													"  }).to.throw();",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse is not present\", function() {",
													"  pm.expect(function(){",
													"    pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]);",
													"  }).to.throw();    ",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress is not present\", function() {",
													"  pm.expect(function(){",
													"    pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]);",
													"  }).to.throw();",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress is not present\", function() {",
													"  pm.expect(function(){",
													"    pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]);",
													"  }).to.throw();    ",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links is not present\", function() {",
													"  pm.expect(function(){",
													"    pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]);",
													"  }).to.throw();        ",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip is not present\", function() {",
													"  pm.expect(function(){",
													"    pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]);",
													"  }).to.throw();      ",
													"});",
													"//ip",
													"pm.test(\"Validate ip is not present\", function() {",
													"  pm.expect(function(){",
													"    pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]);",
													"  }).to.throw();        ",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length is not present\", function() {",
													"  pm.expect(function(){",
													"    pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]);",
													"  }).to.throw();        ",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress is not present\", function() {",
													"  pm.expect(function(){",
													"    pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]);",
													"  }).to.throw();        ",
													"});",
													"",
													"",
													"//*********************************************************",
													"// I validate that some properties are not present in the response json structure - the old way - simpler one",
													"//*********************************************************",
													"mystring = [];",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "14. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Basic config + frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//half-life",
													"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
													"});",
													"",
													"//reuse",
													"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
													"});",
													"",
													"//suppress",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
													"});",
													"",
													"//max-suppress",
													"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Basic config + load-interval"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//load-interval",
													"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "16. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            },\n           \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Basic config + min-links"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//min-links",
													"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "17. UPDATE LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"pm.test(\"Successful PUT request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv6\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            },\n                            \"router-advertisement\": {\n                                \"config\": {\n                                    \"suppress\": true\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Basic config + subinterfaces"
									},
									"response": []
								},
								{
									"name": "show updated LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"//name",
													"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
													"});",
													"",
													"//mtu",
													"pm.test(\"Validate mtu = \" + pm.environment.get(\"lag_mtu\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(pm.environment.get(\"lag_mtu\")));",
													"});",
													"",
													"//description",
													"pm.test(\"Validate description = \" + pm.environment.get(\"lag_description\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"description\"]).to.eql(pm.environment.get(\"lag_description\"));",
													"});",
													"",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"//ip",
													"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
													"});",
													"",
													"//prefix-length",
													"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
													"});",
													"",
													"//suppress - configured by: ipv6 nd suppress-ra",
													"pm.test(\"Validate suppress = \" + pm.environment.get(\"ELEMENT\"), function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv6\"][\"router-advertisement\"][\"config\"][\"suppress\"]).to.eql(true);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG without BFD containers",
							"item": [
								{
									"name": "LAG without BFD aggregation",
									"item": [
										{
											"name": "UPDATE LAG aggregation",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        }\n    }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"aggregation"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated LAG aggregation",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
															"});",
															"",
															"//min-links",
															"pm.test(\"Validate min-links = \" + pm.environment.get(\"lag_min-links\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(pm.environment.get(\"lag_min-links\")));",
															"});",
															"",
															"mystring = [];",
															"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
															"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
															"",
															"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
															"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
															"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
															"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
															"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
															"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
															"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE LAG aggregation config",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"aggregation"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "LAG without BFD statistics",
									"item": [
										{
											"name": "UPDATE LAG statistics",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n            \"statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/statistics",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"statistics"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated LAG statistics",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
															"});",
															"",
															"//load-interval",
															"pm.test(\"Validate load-interval = \" + pm.environment.get(\"lag_load-interval\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(pm.environment.get(\"lag_load-interval\")));",
															"});",
															"",
															"mystring = [];",
															"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
															"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
															"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
															"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
															"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
															"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
															"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
															"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
															"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE LAG statistics",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/statistics",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"statistics"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "LAG without BFD damping",
									"item": [
										{
											"name": "UPDATE LAG dampig",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n           \"damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/damping",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"damping"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated LAG damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
															"});",
															"//name",
															"pm.test(\"Validate name = \" + pm.environment.get(\"lag_inf-id\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql('Bundle-Ether' + pm.environment.get(\"lag_inf-id\"));",
															"});",
															"",
															"",
															"//half-life",
															"pm.test(\"Validate half-life = \" + pm.environment.get(\"lag_damp_half-life\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_half-life\")));",
															"});",
															"",
															"//reuse",
															"pm.test(\"Validate reuse = \" + pm.environment.get(\"lag_damp_reuse\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_reuse\")));",
															"});",
															"",
															"//suppress",
															"pm.test(\"Validate suppress = \" + pm.environment.get(\"lag_damp_suppress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_suppress\")));",
															"});",
															"",
															"//max-suppress",
															"pm.test(\"Validate max-suppress = \" + pm.environment.get(\"lag_damp_max-supress\"), function() {",
															"  pm.expect(pm.response.json()[\"interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(pm.environment.get(\"lag_damp_max-supress\")));",
															"});",
															"",
															"mystring = [];",
															"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
															"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
															"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
															"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
															"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
															"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
															"",
															"mystring.forEach(function(entry) {",
															"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE LAG damping",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/damping",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"damping"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "LAG without BFD ipv4",
									"item": [
										{
											"name": "UPDATE LAG ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"subinterfaces",
														"subinterface",
														"0",
														"ipv4",
														"addresses"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated LAG ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"lag_ip\"), function() {",
															"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"lag_ip\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"lag_prefix-length\"), function() {",
															"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"lag_prefix-length\")));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"subinterfaces",
														"subinterface",
														"0",
														"ipv4",
														"addresses"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE LAG ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"subinterfaces",
														"subinterface",
														"0",
														"ipv4",
														"addresses"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted LAG ipv4",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv4/addresses",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"subinterfaces",
														"subinterface",
														"0",
														"ipv4",
														"addresses"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "LAG without BFD ipv6",
									"item": [
										{
											"name": "UPDATE LAG ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Request data: \" + request.data.toString());",
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ipv6}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ipv6}}\",\n                                            \"prefix-length\": {{eth_ipv6_prefix}}\n                                        }\n                                    }\n                                ]\n                            }\n}"
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv6/addresses",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"subinterfaces",
														"subinterface",
														"0",
														"ipv6",
														"addresses"
													]
												}
											},
											"response": []
										},
										{
											"name": "show updated LAG ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"  pm.response.to.have.status(200);",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//ip",
															"pm.test(\"Validate ip = \" + pm.environment.get(\"eth_ipv6\"), function() {",
															"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(pm.environment.get(\"eth_ipv6\"));",
															"});",
															"//prefix-length",
															"pm.test(\"Validate prefix-length = \" + pm.environment.get(\"eth_ipv6_prefix\"), function() {",
															"  pm.expect(pm.response.json()[\"frinx-openconfig-if-ip:addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(pm.environment.get(\"eth_ipv6_prefix\")));",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv6/addresses",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"subinterfaces",
														"subinterface",
														"0",
														"ipv6",
														"addresses"
													]
												}
											},
											"response": []
										},
										{
											"name": "DELETE LAG ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Success\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv6/addresses",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"subinterfaces",
														"subinterface",
														"0",
														"ipv6",
														"addresses"
													]
												}
											},
											"response": []
										},
										{
											"name": "show deleted LAG ipv6",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"console.log(\"Response: \" + responseBody)",
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic YWRtaW46YWRtaW4="
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/subinterfaces/subinterface/0/ipv6/addresses",
													"protocol": "http",
													"host": [
														"{{odl_ip}}"
													],
													"port": "8181",
													"path": [
														"restconf",
														"config",
														"network-topology:network-topology",
														"topology",
														"{{topology_id}}",
														"node",
														"{{node_id}}",
														"yang-ext:mount",
														"frinx-openconfig-interfaces:interfaces",
														"interface",
														"Bundle-Ether{{lag_inf-id}}",
														"subinterfaces",
														"subinterface",
														"0",
														"ipv6",
														"addresses"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LAG with BFD",
					"item": [
						{
							"name": "LAG with BFD upd-variables",
							"item": [
								{
									"name": "1. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(postman.getEnvironmentVariable(\"response_body_string\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_destination-address\"));",
													"pm.environment.set(\"lag_bfd_destination-address\", \"1\" + /*parseInt(*/pm.environment.get(\"original_value\")/*) + 1*/);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_bfd_destination-address"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_destination-address\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_multiplier\"));",
													"pm.environment.set(\"lag_bfd_multiplier\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_bfd_multiplier"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_multiplier\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"original_value\", pm.environment.get(\"lag_bfd_min-interval\"));",
													"pm.environment.set(\"lag_bfd_min-interval\", parseInt(pm.environment.get(\"original_value\")) + 1);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Changing lag_bfd_min-interva"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"pm.environment.set(\"lag_bfd_min-interval\", pm.environment.get(\"original_value\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG with BFD upd-block",
							"item": [
								{
									"name": "B5. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n           \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                },\n                \"frinx-bfd:bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										},
										"description": "Basic config + BFD block"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.push('\"ip\":\"' + postman.getEnvironmentVariable(\"lag_ip\")) + '\"';",
													"mystring.push('\"prefix-length\":' + postman.getEnvironmentVariable(\"lag_prefix-length\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});",
													"",
													"mystring = [];",
													"",
													"mystring.push('\"half-life\":' + postman.getEnvironmentVariable(\"lag_damp_half-life\"));",
													"mystring.push('\"reuse\":' + postman.getEnvironmentVariable(\"lag_damp_reuse\"));",
													"mystring.push('\"suppress\":' + postman.getEnvironmentVariable(\"lag_damp_suppress\"));",
													"mystring.push('\"max-suppress\":' + postman.getEnvironmentVariable(\"lag_damp_max-supress\"));",
													"",
													"mystring.push('\"load-interval\":' + postman.getEnvironmentVariable(\"lag_load-interval\"));",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body does not match string \" + entry] = !responseBody.has(entry);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG with BFD upd-containers",
							"item": [
								{
									"name": "B5. UPDATE LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"tests[\"Success\"] = responseCode.code === 200 || responseCode.code === 201;"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                \"bfd\": {\n                    \"config\": {\n                        \"destination-address\": {{lag_bfd_destination-address}},\n                        \"multiplier\": {{lag_bfd_multiplier}},\n                        \"min-interval\": {{lag_bfd_min-interval}}\n                    }\n                }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}/aggregation/bfd",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"aggregation",
												"bfd"
											]
										},
										"description": "Basic config + BFD block"
									},
									"response": []
								},
								{
									"name": "show LAG interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"tests[\"Status code is 200\"] = responseCode.code === 200;",
													"",
													"var mystring = [];",
													"mystring.push('\"name\":' + '\"Bundle-Ether' + postman.getEnvironmentVariable(\"lag_inf-id\") + '\"');",
													"mystring.push('\"mtu\":' + postman.getEnvironmentVariable(\"lag_mtu\"));",
													"mystring.push('\"description\":\"' + postman.getEnvironmentVariable(\"lag_description\") + '\"');",
													"",
													"mystring.push('\"min-links\":' + postman.getEnvironmentVariable(\"lag_min-links\"));",
													"",
													"mystring.push('\"multiplier\":' + postman.getEnvironmentVariable(\"lag_bfd_multiplier\"));",
													"mystring.push('\"min-interval\":' + postman.getEnvironmentVariable(\"lag_bfd_min-interval\"));",
													"mystring.push('\"destination-address\":\"' + postman.getEnvironmentVariable(\"lag_bfd_destination-address\") + '\"');",
													"",
													"mystring.forEach(function(entry) {",
													"    tests[\"Body matches string \" + entry] = responseBody.has(entry);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG with BFD flows",
							"item": [
								{
									"name": "show no LAG flow configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}/ingress-flows/ingress-flow/frinx-netflow:NETFLOW_IPV4/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"ingress-flows",
												"ingress-flow",
												"frinx-netflow:NETFLOW_IPV4",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (delete ipv6 egress flow)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-flow was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (delete ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//all ingress unconfigured",
													"pm.test(\"No ingress-flows is not present\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"ingress-flows\"]).to.be.undefined;",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-flow was found.');",
													"  }",
													"});",
													"",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-flows\": {\n                \"ingress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor2}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler2}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-flows\": {\n                \"egress-flow\": [\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv6_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV6\"\n                        }\n                    },\n                    {\n                        \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\",\n                        \"config\": {\n                            \"monitor-name\": \"{{flow_prereq_ipv4_monitor1}}\",\n                            \"sampler-name\": \"{{flow_prereq_sampler1}}\",\n                            \"netflow-type\": \"frinx-netflow:NETFLOW_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}/ingress-flows/ingress-flow/frinx-netflow:NETFLOW_IPV4/config",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"ingress-flows",
												"ingress-flow",
												"frinx-netflow:NETFLOW_IPV4",
												"config"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor2\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"//This should not be present",
													"pm.test(\"No IPv4 ingress flow present\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-flows\"][\"ingress-flow\"];",
													"  var is_ipv4_ingress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      is_ipv4_ingress = true;",
													"    }",
													"  }",
													"  if (is_ipv4_ingress) {",
													"    pm.expect.fail(null,null,'An ipv4 ingress-flow was found.');",
													"  }",
													"});",
													"",
													"",
													"pm.test(\"Validate IPv4 egress flow\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-flows\"][\"egress-flow\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"netflow-type\"] == \"frinx-netflow:NETFLOW_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"monitor-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_monitor1\"));        ",
													"      pm.expect(json_string[i][\"config\"][\"sampler-name\"]).to.eql(pm.environment.get(\"flow_prereq_sampler1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG flow",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no LAG flow configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-netflow:netflow/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-netflow:netflow",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG with BFD acls",
							"item": [
								{
									"name": "show no LAG acl configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG acl copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"ingress-acl-set\": [\n        {\n            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n            \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n            \"config\": {\n                \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                \"type\": \"frinx-openconfig-acl:ACL_IPV4\"\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}/ingress-acl-sets/ingress-acl-set/{{flow_prereq_ipv4_acl1}}/frinx-openconfig-acl:ACL_IPV4",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"ingress-acl-sets",
												"ingress-acl-set",
												"{{flow_prereq_ipv4_acl1}}",
												"frinx-openconfig-acl:ACL_IPV4"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG acl copy copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG acl copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (delete ipv6 egress acl)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress acl\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-acl was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (delete ingress)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"//all ingress unconfigured",
													"pm.test(\"No ingress-acl-sets are  present\", function() {",
													"  pm.expect(pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"]).to.be.undefined;",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 egress acl\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 egress-acl was found.');",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl (to original)",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"Bundle-Ether{{lag_inf-id}}\",\n            \"config\": {\n                \"id\": \"Bundle-Ether{{lag_inf-id}}\"\n            },\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl2}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl2}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl2}}\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv6_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV6\",\n                            \"set-name\": \"{{flow_prereq_ipv6_acl1}}\"\n                        }\n                    },\n                    {\n                        \"set-name\": \"{{flow_prereq_ipv4_acl1}}\",\n                        \"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                        \"config\": {\n                        \t\"type\": \"frinx-openconfig-acl:ACL_IPV4\",\n                            \"set-name\": \"{{flow_prereq_ipv4_acl1}}\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show created LAG acl copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}/ingress-acl-sets/ingress-acl-set/{{flow_prereq_ipv6_acl2}}/frinx-openconfig-acl:ACL_IPV6",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}",
												"ingress-acl-sets",
												"ingress-acl-set",
												"{{flow_prereq_ipv6_acl2}}",
												"frinx-openconfig-acl:ACL_IPV6"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"/// toto by malo byt odkonfigurovane",
													"pm.test(\"There is no IPv6 ingress acl\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  var is_ipv6_egress = false;",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      is_ipv6_egress = true;",
													"    }",
													"  }",
													"  if (is_ipv6_egress) {",
													"    pm.expect.fail(null,null,'An IPv6 ingress-acl was found.');",
													"  }",
													"});",
													"",
													"",
													"//IPV6",
													"pm.test(\"Validate IPv6 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV6\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv6_acl1\"));        ",
													"    }",
													"  }",
													"});",
													"",
													"//IPV4",
													"pm.test(\"Validate IPv4 ingress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl2\"));        ",
													"    }",
													"  }",
													"});",
													"pm.test(\"Validate IPv4 egress acl-sets\", function() {",
													"  var json_string = pm.response.json()[\"interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"];",
													"  for (var i = 0; i < json_string.length; i++) {",
													"    if (json_string[i][\"type\"] == \"frinx-openconfig-acl:ACL_IPV4\") {",
													"      pm.expect(json_string[i][\"config\"][\"set-name\"]).to.eql(pm.environment.get(\"flow_prereq_ipv4_acl1\"));        ",
													"    }",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show updated LAG acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "show no LAG acl configured",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.warn(\"// FIXME this returns data instead of returning 404\")",
													"",
													"// console.log(\"Response: \" + responseBody)",
													"/*",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"*/"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether{{lag_inf-id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"frinx-openconfig-acl:acl",
												"interfaces",
												"interface",
												"Bundle-Ether{{lag_inf-id}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}