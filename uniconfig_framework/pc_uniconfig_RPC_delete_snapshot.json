{
	"info": {
		"_postman_id": "c1d27ff7-8213-4bb5-9c75-0b3bfa0608e8",
		"name": "pc_uniconfig_RPC_delete_snapshot",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR5 Delete snapshot",
			"item": [
				{
					"name": "XR5 Delete snapshot Setup",
					"item": [
						{
							"name": "mount XR5 cli R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d9d4a8e-94f6-4c59-a701-864285e9e5fc",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"R1\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/R1",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2898c5d5-d107-451b-a8a3-d49f1d30b403",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected R1');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9c88df9-546a-419c-bfe1-bd584ef3b8ce",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available R1');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "153ff007-f9c3-4a4f-ad15-d274741182d9",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount XR5 cli R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5831b729-428e-4c0f-819f-777d4e9c0baf",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"R2\",\n      \n      \"cli-topology:host\" : \"{{xr2_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/R2",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b113cd75-f4f5-4e63-99a6-182778a11e37",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected R2');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad1fdb49-a07e-4d21-ba91-a071a4c8eb43",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/R2",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5101257e-f96d-43be-b90d-95c488a870e8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available R2');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "153ff007-f9c3-4a4f-ad15-d274741182d9",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "create snapshot R1 and R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "840f03e3-92d9-4caa-b7a4-7f9c608b7aa1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"    pm.test(\"Validate result\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"complete\");",
											"    });",
											"",
											"}else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    ",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"});",
											"",
											"    var results = [];",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"",
											"    for(var i = 0; i < result.length; i++){",
											"        results[i] = result[i][\"node-id\"];",
											"    }",
											"",
											"    ",
											"    pm.test(\"Commited node R1 status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"    for(var i = 0; i < result.length; i++){",
											"        if( result[i][\"node-id\"] == \"R1\"){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(\"R1\");",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"            break;",
											"        }",
											"            var found = results.includes('R1');",
											"            pm.expect(found).to.be.true;",
											"",
											"    }",
											"});",
											"",
											"    pm.test(\"Commited node R2 status: \" + pm.response.json()[\"output\"][\"overall-status\"], function () {",
											"    for(var i = 0; i < result.length; i++){",
											"        if( result[i][\"node-id\"] == \"R2\"){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(\"R2\");",
											"            pm.expect(result[i][\"status\"]).to.eql(\"complete\");",
											"            break;",
											"        }",
											"            var found = results.includes('R2');",
											"            pm.expect(found).to.be.true;",
											"",
											"    }",
											"",
											"});",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n            \"target-nodes\": {\n                \t\"node\": [\"R1\",\"R2\"]\n\n                }\n    }\n}"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								}
							},
							"response": []
						},
						{
							"name": "check topology exists R1 and R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbb77bc4-fb8b-4e5a-9124-5ef9d766ed77",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check nodes topology available\", function () {",
											"    var result = pm.response.json()[\"topology\"][0][\"node\"];",
											"    var found = false;",
											"    for(var i = 0; i<result.length;i++){",
											"        if( result[i][\"node-id\"] == \"R1\"){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(\"R1\");",
											"            found =true;",
											"        }",
											"        else if( result[i][\"node-id\"] == \"R2\"){",
											"            pm.expect(result[i][\"node-id\"]).to.eql(\"R2\");",
											"            found =true;",
											"        }",
											"        else",
											"            found =false;",
											"    } ",
											"    pm.expect(found).to.be.true;",
											"",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{follower2}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 Delete snapshot Teardown",
					"item": [
						{
							"name": "unmount R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted CLI R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6441856c-363e-464a-89c1-336847b085ef",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "60157a63-e058-4e29-a4cc-104582dd5ec8",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/R1",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted CLI R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69d3cbe3-f9d6-45e6-b724-340d22edbccb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e3bc074-40b5-4e14-ac9b-c31bfcbe6901",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{follower2}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/R2",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete snapshot 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c47f229f-bfd2-4e40-ab87-fa28c8294afc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting snapshot 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f712eb7-1abc-4610-9da7-45d54b4f35b9",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/R1",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1",
										"node",
										"R1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Delete snapshot normal",
					"item": [
						{
							"name": "delete snapshot 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd941daf-bd85-4818-b33a-64dcc44dddc6",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"    pm.test(\"Validate result\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"complete\");",
											"    });",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate result\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:delete-snapshot"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting snapshot 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2ec02ef-819b-43a8-9c24-1a5e42ae25b0",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{follower1}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete snapshot bad-input",
					"item": [
						{
							"name": "delete snapshot bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f943a3e5-61cc-4b73-9015-21368b94c8cb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"    ",
											"    pm.test(\"Validate result fail\", function() {",
											"       pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"    });",
											"    pm.test(\"Validate error message\", function() {",
											"       pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Snapshot with name snapshot2 does not exist. Cannot delete snapshot.\");",
											"    });",
											"    ",
											"    ",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"   ",
											"    pm.test(\"Validate result fail\", function() {",
											"       pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"    });",
											"    pm.test(\"Validate error message\", function() {",
											"       pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.eql(\"Snapshot with name snapshot2 does not exist. Cannot delete snapshot.\");",
											"    }); ",
											"    ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot2\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:delete-snapshot"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}