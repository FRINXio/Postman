{
	"info": {
		"_postman_id": "c8d9ef03-03b7-4546-83d1-a3022e90bd6d",
		"name": "FRINX Uniconfig Unsorted",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "FRHD-196",
					"item": [
						{
							"name": "configure route policy regex",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"id": "5f433c2d-cb9f-49a0-9cc4-30f0f2e70708"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nas-path-set 2\n  ios-regex '^$'\nend-set\n!\nas-path-set 11\n  ios-regex '^(2914_)+$'\nend-set\n!\nas-path-set 12\n  ios-regex '_27699$',\n  ios-regex '_9506$'\nend-set\n!\nas-path-set 99\n  ios-regex '_16509$',\n  ios-regex '^(2914_)+(703_)+$'\nend-set\ncommit\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "reconcile",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdd7e582-76e8-44b5-94aa-a4659f78aa22",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96a2f8af-b54d-4291-89f7-ecd37cda6e5e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "649cecf3-1834-499c-b0fd-0eb698e47b1f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var response = pm.response.json()[\"frinx-openconfig-routing-policy:routing-policy\"][\"defined-sets\"][\"frinx-openconfig-bgp-policy:bgp-defined-sets\"][\"as-path-sets\"][\"as-path-set\"];",
											"var array = [];",
											"for(var i = 0; i < response.length;i++){",
											"        array[i] = response[i][\"as-path-set-name\"];",
											"    ",
											"}",
											"",
											"//as-path-set-name 12",
											"pm.test(\"Validate as-path-set-name = 12 \" , function() {",
											"    for(var i = 0; i < response.length;i++){",
											"        if(array[i] == \"12\"){",
											"        pm.expect(array[i]).to.eql(\"12\");",
											"        ",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '_27699$'\");",
											"         pm.expect(response[i][\"config\"][\"as-path-set-member\"][1]).to.eql(\"ios-regex '_9506$'\");",
											"        break;",
											"        }",
											"    }",
											"});",
											"",
											"//as-path-set-name 2",
											"pm.test(\"Validate as-path-set-name = 2 \" , function() {",
											"    for(var i = 0; i < response.length;i++){",
											"        if(array[i] == \"2\"){",
											"        pm.expect(array[i]).to.eql(\"2\");",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '^$'\");",
											"",
											"        break;",
											"        }",
											"    }",
											"});",
											"",
											"//as-path-set-name 11",
											"pm.test(\"Validate as-path-set-name = 11 \" , function() {",
											"    for(var i = 0; i < response.length;i++){",
											"        if(array[i] == \"11\"){",
											"        pm.expect(array[i]).to.eql(\"11\");",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '^(2914_)+$'\");",
											"        break;",
											"        }",
											"    }",
											"});",
											"//as-path-set-name 99",
											"pm.test(\"Validate as-path-set-name = 99 \" , function() {",
											"    for(var i = 0; i < response.length;i++){",
											"        if(array[i] == \"99\"){",
											"        pm.expect(array[i]).to.eql(\"99\");",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '_16509$'\");",
											"        pm.expect(response[i][\"config\"][\"as-path-set-member\"][1]).to.eql(\"ios-regex '^(2914_)+(703_)+$'\");",
											"",
											"        break;",
											"        }",
											"    }",
											"});",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy"
									]
								}
							},
							"response": []
						},
						{
							"name": "deconfigure route policy regex",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"id": "b9c7b76e-ad49-4690-afa5-c8fdc4bec05c"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno as-path-set 2\nno as-path-set 11\nno as-path-set 12\nno as-path-set 99\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "ilegal ping command",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"id": "13d12bbc-f1e7-4289-ae99-55f600632fe4"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nping 10.1.7.101 co\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "905876d4-e8c7-4b4e-a155-6cb1438810d0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a02006e-ad64-44d6-aa5c-27a735f62593",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-202",
					"item": [
						{
							"name": "create empty interface with nonexisting node",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c42b0705-dc43-4ce8-8558-d188fd44e3ae",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/kristina/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"kristina",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dry-run commit on nonexisting node",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58d9dc89-9f9e-4dbd-a2f6-bb88de626828",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status ignored\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_ignored\"));",
											"    });",
											"}",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(\"kristina\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"error-message\"]).to.eql(\"Node doesn't support dry-run or cannot be found.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_ignored\"));",
											"  }",
											"});",
											"  }",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-status fail\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"    });",
											"}",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(\"kristina\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-message\"]).to.eql(\"Node has not been mounted yet.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"no-connection\");",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"  }",
											"});",
											"  }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\": {\n    \"target-nodes\": {\n      \"node\": [\"kristina\"]\n    }\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount node kristina",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"id": "dcd1a608-5985-42be-9177-a4f9f44ade5e"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/kristina",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"kristina"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "59b2f9f8-72c6-42fe-b877-9dd364a6274d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0f317b7e-9bbb-46cf-9c45-af66dfacf6d3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FI-154",
					"item": [
						{
							"name": "reconnect session by change interface ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c80c086-76cb-450c-b6eb-c3d9e3dcfeba",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     interface {{mgn_interface}} ipv4 address 192.168.1.229 255.255.255.0\n     commit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status reconnecting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6947d447-0f90-4cfc-82f2-48a96704985f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connected-message'] === \"Attemp: [0] Reconnecting due to Keepalive timeout\") {",
											"    tests[\"Is reconnecting\"] = jsonData.node[0]['cli-topology:connected-message'] === \"Attemp: [0] Reconnecting due to Keepalive timeout\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status reconnecting');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d1f0c4a-40f5-44b4-956e-c65070680e58",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount IOS XR with new ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c10768a9-6f7c-4dd6-91ac-9a9fc4336e69",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}1\",\n      \n      \"cli-topology:host\" : \"192.168.1.229\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr5uc status connected with new ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76478798-237b-4e93-842b-1e63b479eb48",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr5uc status connected with new ip');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "88d76814-2b86-489b-8819-6c96c9091708",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}1"
									]
								}
							},
							"response": []
						},
						{
							"name": "change ip back to original",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98a4f364-2288-48fe-9d24-0e2e2194a7a1",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     interface {{mgn_interface}} ipv4 address {{xr_ip}} 255.255.255.0\n     commit\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}1/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}1",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e8839b86-2917-4c59-b002-e58a93a0e757",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "25f455d7-cedf-439d-bfc9-8354c95de9cf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-124",
					"item": [
						{
							"name": "case1",
							"item": [
								{
									"name": "check default error patterns in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d1fcf17-f70b-4575-928a-09c2d2009024",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "create error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f809c21-d8f9-4705-bc77-c011f2a73064",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                    \t\"\\\\% (?i)Invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                    \t\"\\\\% (?i)Invalid input(?-i).*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Ambigious command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"xe wildcard error\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"id": "14b9e0ec-1480-4f69-bde4-71afdea5a2b7"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												],
												"id": "a3384fc1-b3c7-4c65-aae9-45c12fe3e7fc"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5f21869-23f1-4812-8b06-3f34dacda1cb",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 1');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7a942197-3a30-4306-8f1e-1137cdf16838",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uniconfig available 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fef541e-083b-4564-b5ab-cdea2d0bc019",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uniconfig available 1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "455a8bac-f83a-434b-923a-aed7e8103c09",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check created error patterns in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b941c45-9df9-4942-9237-9a886ea9bdf2",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var found;",
													"",
													"pm.test(\"Check error pattern xr5\", function () {",
													"    found=false;",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"5.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Ambigious command(?-i).*\");",
													"            found=true;",
													"            }",
													"    }",
													"    pm.expect(found).to.be.true;",
													"});",
													"  pm.test(\"Check error pattern xr5.3.4 \", function () {",
													"    found=false;",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"5.3.4\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Invalid input(?-i).*\");",
													"            found=true;",
													"",
													"        }   ",
													"    }",
													"        pm.expect(found).to.be.true;",
													"",
													"});",
													"pm.test(\"Check error pattern xr6\" , function () {",
													"    found = false;",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"6.*\"){",
													"           var errorpattern=patterns[i][\"default-error-patterns\"][\"error-pattern\"];",
													"           console.log(errorpattern)",
													"           pm.expect(errorpattern).to.be.an('array').that.includes(\"\\\\% (?i)Invalid input(?-i).*\")",
													"           pm.expect(errorpattern).to.be.an('array').that.includes(\"\\\\% (?i)Incomplete command(?-i).*\")",
													"           found=true;",
													"",
													"       }",
													"    }",
													"   pm.expect(found).to.be.true;",
													"});",
													"   ",
													"",
													"    pm.test(\"Check error pattern classic \" + (postman.getEnvironmentVariable(\"node_id\")), function () {",
													"    found=false;",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"15.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"xe wildcard error\");",
													"            found=true;",
													"",
													"            }",
													"        }",
													"",
													"        pm.expect(found).to.be.true;",
													"",
													"    });",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc80b4d0-5096-4fdd-8149-fa7cf8d1cf33",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c6216c0-1730-4825-8e42-2e52fd33f187",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error-type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate rollback-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error-type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate rollback-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update existing error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf1e8b30-ba71-4c1c-91fa-7edda6775cd2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"error\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"id": "25eec9de-142b-4ff0-8202-969b040aa6e6"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73a43ab1-88ec-419f-bac0-42b740d917e0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "599528de-fddc-4884-b51e-5a6df4894af6",
												"type": "text/javascript",
												"exec": [
													"if(pm.environment.get(\"node_id\") === \"xr6\"){",
													"    pm.environment.set(\"error_pattern_version\",\"6.4.3\")",
													"}",
													"if(pm.environment.get(\"node_id\") === \"xr5\"){",
													"    pm.environment.set(\"error_pattern_version\",\"5.4.3\")",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{error_pattern_version}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "239d30e2-6091-4a87-97c4-f58ab6eee066",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "744c2dbe-5e7d-456e-af3c-2e1b298600e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uniconfig available 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e2fc93f-b145-4026-809d-1eef69e7e7ab",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uniconfig available 2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38e7fad6-f36e-49ba-9900-1922a6fcff51",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "check updated error patterns in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da9f1d1d-766e-4779-8df5-2bdc14c2992c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"",
													"",
													"pm.test(\"Check error pattern xr5\", function () {",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"5.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Incomplete command(?-i).*\");",
													"            }",
													"    }",
													"        ",
													"});",
													"  pm.test(\"Check error pattern xr5.3.4 \", function () {",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"5.3.4\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Incomplete command(?-i).*\");",
													"        }   ",
													"    }",
													"});",
													"",
													"pm.test(\"Check error pattern xr6\" , function () {",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"6.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"\\\\% (?i)Incomplete command(?-i).*\");",
													"            }",
													"    }",
													"});",
													"   ",
													"",
													"    pm.test(\"Check error pattern classic \" + (postman.getEnvironmentVariable(\"node_id\")), function () {",
													"    for(var i = 0 ; i < patterns.length; i++){",
													"       if(patterns[i][\"device-version\"] == \"15.*\"){",
													"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"error\");",
													"            }",
													"        }",
													"    });",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input match patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc693d28-a0bf-450d-be03-6a9bce12e3ea",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5212598-de72-471f-8751-7666a2b396a4",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete  error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19e6e0d8-8eee-4532-a8d0-bc9f5ee4b660",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "put back default error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f8d8d9d-b314-4d3a-9adb-8d189065cd4c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n            {\n                \"device-type\": \"ironware\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"vrp\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"nexus\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"^\\\\s+\\\\^.*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\",\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"12.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"*\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"junos\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"4.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default patterns CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5a3b4cf-7c4d-4128-b947-797fb7aec187",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case2",
							"item": [
								{
									"name": "check default error patterns in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "801a1efe-586b-4c3c-9454-45c874bc1c07",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "create error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bac076a7-3f8e-43a4-8c2e-4f97470ce299",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)Invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"xe wildcard error\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"id": "d914f0d0-ecd5-41e4-9d8c-945ebe718727"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c0846c-27ca-4c7a-84f2-03bce5a29ad5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b8663a90-b38b-4f97-a007-12d0ce8d51a8",
												"type": "text/javascript",
												"exec": [
													"if(pm.environment.get(\"node_id\") === \"xr6\"){",
													"    pm.environment.set(\"error_pattern_version\",\"6.3.4\")",
													"}",
													"if(pm.environment.get(\"node_id\") === \"xr5\"){",
													"    pm.environment.set(\"error_pattern_version\",\"5.3.4\")",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1dd2eb5-7187-4f08-b3a5-35c5e50b011b",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 3');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ff51684e-7439-4704-afb0-88194c2f5aae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uniconfig available 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34a9c4c6-35d0-459b-83ac-72c5fbcecebf",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uniconfig available 3');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4de9645b-4169-4cfa-a843-0efef1562a9e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "130b7259-f6c4-464e-8ee4-2b8bacf30409",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17c60522-7bf3-48de-b26c-e21f101591f1",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error-type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate rollback-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate error-type\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate rollback-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "update nonexisting error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9462c77-fb18-40c5-b2ee-be79e137a548",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"id": "134923ce-793d-4475-b8f2-f379c1ce572a"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												],
												"id": "ea938623-cd25-4df8-bdaf-ff24774e3fcc"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3560d268-81ea-4ce7-8a9d-e2a503bbff01",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 4');",
													"    }",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ffb0d0c0-399f-4b70-bdde-e4a21ec84456",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uniconfig available 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca4e1551-0259-47b6-b4a3-e8853773d02a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uniconfig available 4');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5a398862-901c-4996-9f63-0832c1326db6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input match patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5eeadfe-f04f-4573-9bae-a554cbd32477",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet0/0/0I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet0/0/0I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11044ed6-509c-4986-b4f6-a24b243fddd1",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete  error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33825530-a6b6-417f-85fe-2904ddc85d5f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "put back default error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd2a99c8-24b0-4082-9bc1-43b53b79e09a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n            {\n                \"device-type\": \"ironware\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"vrp\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"nexus\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"^\\\\s+\\\\^.*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\",\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"12.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"*\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"junos\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"4.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default patterns CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ff62693-947f-40f0-938f-ec9371ec2149",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case3",
							"item": [
								{
									"name": "create error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91b17383-2318-4a43-b311-3143edd7b131",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n        \t{\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.3.4\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"xe wildcard error\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount IOS XE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f5a8c8c-571f-4c23-b8cf-a18951b1c1b3",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_xe_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS XE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51d44d01-5e3a-4f11-a633-d9c892fd8885",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_xe_id}}\",\n      \n      \"cli-topology:host\" : \"{{xe4_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"15.2\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 180,\n      \n      \"cli-topology:keepalive-delay\" : 45,\n      \"cli-topology:keepalive-timeout\" : 45\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_xe_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check status connected 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8859c4d4-604a-43aa-a4eb-2a06da2c0e5e",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check status connected 5');",
													"    }",
													"}",
													"",
													"if((postman.getEnvironmentVariable(\"node_id\")) == \"xe4\" ){",
													"    pm.test(\"Check error pattern \" + (postman.getEnvironmentVariable(\"node_id\")), function () {",
													"       if(postman.getEnvironmentVariable(\"version_device\") == \"15.*\"){",
													"            pm.expect(jsonData.node[0][\"cli-topology:connection-status\"]).to.eql(\"connected\");",
													"            pm.expect(jsonData.node[0][\"cli-topology:connected-message\"]).to.eql(\"Success\");",
													"            pm.expect(jsonData.node[0][\"cli-topology:default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"xe wildcard error\");",
													"            pm.expect(jsonData.node[0][ \"cli-topology:default-commit-error-patterns\"]).to.be.empty;",
													"            } else {",
													"                ",
													"            }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "24f1d7d9-a6e8-4cf2-be2b-10c37613f3c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_xe_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "invalid input",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d29ed749-b4f2-46c2-8af1-68608382d835",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "68d9ae9a-4dca-4a52-bee7-1f5dae988103",
												"exec": [
													"console.log(\"Here we wait 10 seconds - be patient. The reasons is that this update was not able properly configure device.\");",
													"setTimeout(function(){}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"name\": \"100\",\n            \"config\": {\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n                \"name\": \"100\"\n            },\n            \"ospfv2\": {\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\": 0,\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"GigabitEthernet1I\",\n                                        \"config\": {\n                                            \"id\": \"GigabitEthernet1I\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"config\": {\n                                \"identifier\": 0\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_xe_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:OSPF/100",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_xe_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"protocols",
												"protocol",
												"frinx-openconfig-policy-types:OSPF",
												"100"
											]
										}
									},
									"response": []
								},
								{
									"name": "failed commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24de2f07-3fee-4beb-9dc1-59cee9b6b9ca",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
													"    for(var i=0;i<jstring.length;i++){",
													"        if(jstring[i][\"node-id\"]===\"xe4\"){",
													"            pm.expect(jstring[i][\"node-id\"]).to.eql(\"xe4\");",
													"            pm.expect(jstring[i][\"error-message\"]).to.include(\"Interface: GigabitEthernet1I cannot be in OSPF router: 100, not in the same VRF\");",
													"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
													"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(\"complete\");",
													"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"fail\");",
													"        }",
													"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
													"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"complete\");",
													"        }",
													"    }",
													"});",
													"tests[\"Body matches string: xe4\"] = responseBody.has(\"xe4\");",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
													"    for(var i=0;i<jstring.length;i++){",
													"        if(jstring[i][\"node-id\"]===\"xe4\"){",
													"            pm.expect(jstring[i][\"node-id\"]).to.eql(\"xe4\");",
													"            pm.expect(jstring[i][\"error-message\"]).to.include(\"Interface: GigabitEthernet1I cannot be in OSPF router: 100, not in the same VRF\");",
													"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
													"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(\"complete\");",
													"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"fail\");",
													"        }",
													"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
													"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(\"complete\");",
													"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(\"complete\");",
													"        }",
													"    }",
													"});",
													"tests[\"Body matches string: xe4\"] = responseBody.has(\"xe4\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20312822-9f94-4b20-94ab-7f541aaad4bb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\",\"{{node_xe_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount xe4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bd2a151-3685-46a1-9cdf-f27035d46c3e",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_xe_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete  error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4089f985-3ab0-4347-a36b-03a131201c7c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "put back default error patterns",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4443b277-236a-42f3-b7a4-78fd0b0425f2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n            {\n                \"device-type\": \"ironware\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"vrp\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"nexus\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"^\\\\s+\\\\^.*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\",\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"12.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"*\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"junos\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"4.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								},
								{
									"name": "check default patterns CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebcae53b-7279-4ac2-a741-98179526da17",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
													"var save;",
													"//ironware",
													"pm.test(\"Check existing pattern \", function () {",
													"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
													"",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"cli-translate-registry:available-cli-device-translations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "93f8eb95-c89f-460c-9765-4805fd9f3bc4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f5052c82-d149-408f-954d-3428dafc94a3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-220",
					"item": [
						{
							"name": "create error patterns",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"id": "b28b3709-53b4-4fea-90d7-50220b7b4de9"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"{{error_pattern_version}}\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n\t        \t\t\t \"\\\\% (?i)Failed to commit(?-i).*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"id": "0ae41511-548b-4626-a251-b34992db1e42"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a8872d5-731b-4999-8fbc-b96b59604bc8",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected 6');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b45f5bc-3e2e-4612-a8d6-c3d3641899ed",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c523ea1-bc69-466a-b58f-234ae6d8da46",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available 6');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1dedf66c-f8c5-4664-9ec7-bc7412c83f36",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "check created error patterns in CONFDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33b44e3f-0ac6-42e5-beb2-5c14141cf98c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
											"",
											"",
											"pm.test(\"Check error pattern xr5\", function () {",
											"    for(var i = 0 ; i < patterns.length; i++){",
											"       if(patterns[i][\"device-version\"] == \"5.*\"){",
											"            pm.expect(patterns[i][\"default-commit-error-patterns\"][\"commit-error-pattern\"][0]).to.eql(\"\\\\% (?i)Ambigious command(?-i).*\");",
											"            }",
											"    }",
											"        ",
											"});",
											"",
											"  pm.test(\"Check error pattern xr5.3.4 \", function () {",
											"    for(var i = 0 ; i < patterns.length; i++){",
											"       if(patterns[i][\"device-version\"] == \"5.3.4\"){",
											"            pm.expect(patterns[i][\"default-commit-error-patterns\"][\"commit-error-pattern\"][0]).to.eql(\"\\\\% (?i)Failed to commit(?-i).*\");",
											"        }   ",
											"    }",
											"});",
											"",
											"pm.test(\"Check error pattern xr6\" , function () {",
											"    for(var i = 0 ; i < patterns.length; i++){",
											"       if(patterns[i][\"device-version\"] == \"6.3.4\"){",
											"            pm.expect(patterns[i][\"default-commit-error-patterns\"][\"commit-error-pattern\"][0]).to.eql(\"\\\\% (?i)Failed to commit(?-i).*\");",
											"            }",
											"    }",
											"});",
											"   ",
											"",
											"    pm.test(\"Check error pattern classic \" + (postman.getEnvironmentVariable(\"node_id\")), function () {",
											"    for(var i = 0 ; i < patterns.length; i++){",
											"       if(patterns[i][\"device-version\"] == \"15.*\"){",
											"            pm.expect(patterns[i][\"default-error-patterns\"][\"error-pattern\"][0]).to.eql(\"xe wildcard error\");",
											"            }",
											"        }",
											"    });",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid input",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"id": "ce9a72c9-47c5-4031-a21b-e7c4f5063ca8"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"second-default\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"second-default\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n                        \n            \"local-aggregates\": {\n                \"aggregate\": [\n                    {\n                        \"prefix\": \"2010:AB8:2::/48\",\n                        \"config\": {\n                            \"prefix\": \"2010:AB8:2::/48\",\n                            \"frinx-cisco-bgp-extension:apply-policy\":[ \"policy2\" ]\n                        }\n                    }\n                ]\n            },\n            \n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": \"666\"\n                    },\n                                        \"afi-safis\": {\n                    \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"99.0.0.99\",\n                            \"config\": {\n                                \"neighbor-address\": \"99.0.0.99\",\n                                \"peer-as\": \"1\",\n                                \"auth-password\": \"frinx18$%\",\n                                \"description\": \"some text\",\n                                \"send-community\": \"BOTH\",\n                                \"remove-private-as\": \"frinx-openconfig-bgp-types:PRIVATE_AS_REMOVE_ALL\",\n                                \"enabled\": false\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"Loopback97\"\n                                }\n                            },\n                            \"ebgp-multihop\": {\n                                \"config\": {\n                                    \"enabled\": true,\n                                    \"multihop-ttl\": \"1\"\n                                }\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\",\n                                    \"config\": {\n                                        \"frinx-cisco-bgp-extension:soft-reconfiguration\": {\n                                            \"always\": true\n                                        },\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV6_UNICAST\"\n                                    },\n                                    \"apply-policy\": {\n                                        \"config\": {\n                                            \"import-policy\": [ \"policy2\" ],\n                                            \"export-policy\": [ \"nexthopself\" ]\n                                        }\n                                    },\n                                     \"ipv6-unicast\": {\n                                        \"config\": {\n                                            \"send-default-route\": \"true\"\n                                        },\n                                        \"prefix-limit\": {\n                                            \"config\": {\n                                                \"max-prefixes\": \"25\"\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/second-default",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{bgp_ni-name}}",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"second-default"
									]
								}
							},
							"response": []
						},
						{
							"name": "failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e209b08-2f9a-4379-b082-dbc80fc8063d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bea7d2cb-4d9b-4cba-9290-a94baf51d45b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "undefined",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational after failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80d6fcdf-929f-4f22-8542-2c1ca8565b7f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "valid configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"id": "32f516e5-d34c-4970-be2c-ebcc1da5d41f"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_create_default}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{rsvp_ni_name}}",
										"mpls",
										"signaling-protocols",
										"rsvp-te",
										"interface-attributes",
										"interface",
										"{{rsvp_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "success commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72d9314d-6015-4b18-9fdf-70807b4fb828",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7254a9df-02da-467b-8f1d-a765df4499c9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "undefined",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete valid configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17a3bb20-11de-4132-90db-49ee7766e0cb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06b03ab2-e211-4822-8839-e9deb1a3c962",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"{{rsvp_ni_name}}",
										"mpls",
										"signaling-protocols",
										"rsvp-te",
										"interface-attributes",
										"interface",
										"{{rsvp_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14b9135a-5247-47f0-86b0-7f8b880a6e38",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "15882733-46b3-4fef-93d9-18a38ffac0f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "undefined",
											"type": "any"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete  error patterns",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d28072f-b198-4ce5-90aa-ee87cc4c7020",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						},
						{
							"name": "put back default patterns CONFDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57a9e10a-b774-460d-a449-bf174d0f9ac5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"available-cli-device-translations\": {\n        \"available-cli-device-translation\": [\n            {\n                \"device-type\": \"ironware\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"vrp\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"15.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"nexus\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"^\\\\s+\\\\^.*\",\n                        \"\\\\% (?i)Incomplete command(?-i).*\",\n                        \"\\\\% (?i)invalid input(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"12.*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)BGP(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"% Configure the peer-group .+ first\",\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"*\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)^\\\\s+\\\\^.*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"junos\",\n                \"device-version\": \"*\",\n                \"default-commit-error-patterns\": {},\n                \"default-error-patterns\": {}\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"6.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"5.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            },\n            {\n                \"device-type\": \"ios xr\",\n                \"device-version\": \"4.*\",\n                \"default-commit-error-patterns\": {\n                    \"commit-error-pattern\": [\n                        \"(^|\\\\n)% (?i)Failed(?-i).*\"\n                    ]\n                },\n                \"default-error-patterns\": {\n                    \"error-pattern\": [\n                        \"(^|\\\\n)% (?i)Incomplete command(?-i).*\",\n                        \"(^|\\\\n)% (?i)invalid input(?-i).*\",\n                        \"(^|\\\\n)% (?i)Ambiguous command(?-i).*\",\n                        \"(^|\\\\n)\\\\s+\\\\^.*\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						},
						{
							"name": "check default patterns CONFDS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02e7ab41-30d4-4018-b079-dd1e262aea39",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"var patterns = pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"];",
											"var save;",
											"//ironware",
											"pm.test(\"Check existing pattern \", function () {",
											"    pm.expect(pm.response.json()[\"available-cli-device-translations\"][\"available-cli-device-translation\"]).to.not.be.empty;",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/cli-translate-registry:available-cli-device-translations",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"cli-translate-registry:available-cli-device-translations"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-207",
					"item": [
						{
							"name": "unmount XR5 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a86640e-099c-4fd6-bc47-d72656e217c2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201,404]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount IOS XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "045a7894-0f5c-4467-a84d-923446d5b547",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201,404]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_xe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount XR5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"id": "cd099ee5-b4e4-4775-ad9c-fdafcf4fc000"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xr5uc status connected XR5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "053fd116-56f1-45c8-b6e1-0b75cd635e5a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xr5uc status connected XR5');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7286598-444f-4fc0-bf9b-98da26cd8992",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf59dbe9-fdf0-48e2-b2a7-26cd1c895d23",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_xe_id}}\",\n      \n      \"cli-topology:host\" : \"{{xe4_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"15.2\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 180,\n      \n      \"cli-topology:keepalive-delay\" : 45,\n      \"cli-topology:keepalive-timeout\" : 45\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_xe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xe uc status connected XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2feab109-37ed-4951-9a1e-e614f7ebf127",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xe uc status connected XE');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "144a838e-a45a-471d-9ee6-7af21c01297c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_xe_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "put config on XR5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f646bc97-70a4-4ec9-a49f-30066779fa68",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": true,\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n\t\t\t\t\"description\":\"AS15169-OS-3-BE16-2\"\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "dry run commit on XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0da25356-aea3-4f3e-9fdf-ef41cb2f648e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"}",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - configuraton status complete\", function() {",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - configuraton empty\", function() {",
											"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.eql(\"\");",
											"    });",
											"}",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_xe_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount XE",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b12d6ef2-8567-41f4-a817-350213aaafc1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_xe_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_xe_id}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "85875386-2165-4219-a2fa-021ca85bd2a4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b01a25ed-d9f8-4682-a53d-4352a5a2f804",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-209",
					"item": [
						{
							"name": "set abnormal value min links",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e1ce866-05c7-4844-a653-ee85dafb3500",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"   pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"interface\": [\n\t{\"name\": \"ae4091\",\n\t\"config\": \n\t\t{\"type\": \"iana-if-type:ieee8023adLag\",\n\t\t\"enabled\": true,\n\t\t\"mtu\": 1500,\n\t\t\"description\": \"TEST\",\n\t\t\"name\": \"ae4091\"},\n\t\t\"frinx-openconfig-if-aggregate:aggregation\": {\n\t\t\t\"config\": {\n\t\t\t\t\"min-links\": 65\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}\n\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/ae4091",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"ae4091"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit fail",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "041f8825-719f-4599-985a-8626f20853a5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate error-type\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");  ",
											"}); ",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-message\"]).to.include(\"Unexpected content in response of rpc\");",
											"  ",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
											"});",
											"pm.test(\"Validate error-type\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");  ",
											"}); ",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-message\"]).to.include(\"Unexpected content in response of rpc\");",
											"  ",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show interafce",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1234e018-cb79-498e-8469-6d3007da4676",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(\"ae4091\");",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(\"ae4091\");",
											"});",
											"",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(1500);",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(\"TEST\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/ae4091",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"ae4091"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FI-228",
					"item": [
						{
							"name": "check blank space not failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8caf56aa-c070-47b9-8b49-e9afe7077145",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n     set interfaces ge-0/0/0 description check-blank-space\n     commit\n     exit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove configuration used blank space",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06dcb37d-68a6-45fd-81cc-fc3b64d9cbd4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n     delete interfaces ge-0/0/0 description\n     commit\n     exit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-433",
					"item": [
						{
							"name": "configure device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "769b8af6-b2d6-4397-b59b-5cc591c626dd",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ntelnet vrf default ipv4 server max-servers 10\nlacp system mac 0123.0123.0123\ncall-home\n service active\n contact smart-licensing\n profile CiscoTAC-1\n  active\n  destination transport-method http\n !\n!\nipv6 access-list D300000000_Ipv6_out\n 10 permit udp any any eq 3784\n!\nipv4 access-list BFD\n 10 permit udp any any eq 3784\n!\nclass-map match-any class_qos_group\n match qos-group 4 60 \n end-class-map\n! \nclass-map match-any class_qos_group2\n match qos-group 4 50 \n end-class-map\n! \npolicy-map policy1\n class class_qos_group\n  set dscp af31\n ! \n class class-default\n !        \n end-policy-map\n! \npolicy-map policy2\n class class_qos_group2\n  set dscp af32\n ! \n class class-default\n ! \n end-policy-map\n! \ninterface Bundle-Ether60\n!\ninterface Bundle-Ether60.70\n description desc_test\n vrf THU\n ipv4 address 10.1.2.3 255.255.255.248\n load-interval 30\n encapsulation dot1q 70\n logging events link-status\n carrier-delay up 500\n!\ninterface Bundle-Ether200\n description TB-002XRV-02-aaaaaaa\n!\ninterface Bundle-Ether200.1\n description 200.1\n!\ninterface Bundle-Ether3133\n!\nexit\n!\nprefix-set CUST_D300000000_in\nend-set\n!\nprefix-set CUST_D300000000_BH_in\n  2400:a140::/32 eq 128\nend-set\n!\nprefix-set CUST_IPv6_D300000000_in\nend-set\n!\nas-path-set 100\n  ios-regex '^(23816_)+$',\n  ios-regex '^(23816_)'\nend-set\n!\ncommunity-set CUST-LP-40\n  no-export\nend-set\n!\ncommunity-set CUST-LP-700\n  no-export\nend-set\n!\ncommunity-set DDosS-CUST-BH\n  17676:1088\nend-set\n!\nroute-policy TESTTEST\n  set med 70\n  pass\nend-policy\n!\nroute-policy ZR-SET-MED\n  pass\nend-policy\n!\nroute-policy SET-COMMUNITY-THU\n  done\nend-policy\n!\nroute-policy CUST_D300000001_in\n  if as-path length ge 75 then\n    drop\n  elseif not as-path in 100 then\n    set med +50\n    set next-hop 2001::\n    pass\n  elseif community matches-any DDosS-CUST-BH and destination in CUST_D300000000_BH_in then\n    set community (17676:2089)\n    set next-hop 169.254.255.254\n  elseif destination in CUST_D300000000_in then\n    set med 100\n  elseif community matches-any CUST-LP-40 then\n    set local-preference 40\n    set community (17676:330) additive\n  elseif community matches-any CUST-LP-700 then\n    set local-preference 700\n    set community (17676:330) additive\n  else\n    set local-preference 1200\n    set community (17676:330) additive\n  endif\nend-policy\n!\nroute-policy POLICY-PEER-GROUP-IN\n  pass\nend-policy\n!\nroute-policy ISIS-REDISTRIBUTE-001\n  done\nend-policy\n!\nroute-policy ISIS-REDISTRIBUTE-002\n  done\nend-policy\n!\nroute-policy POLICY-PEER-GROUP-OUT\n  pass\nend-policy\n!\nroute-policy POLICY-PEER-GROUP-IN-UPDATE\n  pass\nend-policy\n!\nroute-policy POLICY-PEER-GROUP-OUT-UPDATE\n  pass\nend-policy\n!\nroute-policy policy_CUST_BGP-Default_Originate\n  drop\nend-policy\n!\nrouter isis 200\n!\nrouter isis 300\n!\nrouter isis 400\n address-family ipv6 unicast\n !\n!\nrouter ospf 100\n vrf THU\n  max-metric router-lsa include-stub summary-lsa external-lsa\n !\n!\nrouter ospf default\n!\nrouter ospfv3 default\n!\nrouter bgp 20101 instance aaa\n neighbor 2400:2020:40:ff::1\n  remote-as 17676\n  shutdown\n !\n vrf iups\n !\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ae999e1b-7725-4037-ae53-1a6b927e8a58",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7cb404e6-613b-4504-b1ad-f6388f7311c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"id": "4c086334-a3fa-469e-88cd-ea061cae39ee"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-441",
					"item": [
						{
							"name": "retransmit interval configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7bbdb0b-0e4c-4c20-b037-5bc6e5d5cf62",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n!\nrouter isis 300\n interface Bundle-Ether3133\n  retransmit-interval 200\n !\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84826b6e-0cf7-4bde-8b43-5806f6335978",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a2b206f0-f747-4756-9e26-71a4da23240c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "379057d1-54fb-40fc-bb0a-2d734f979d56",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete retransmit interval",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69e12088-1015-4b56-993a-b8510f805f57",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:ISIS/300/isis/interfaces/interface/Bundle-Ether3133/timers/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:ISIS",
										"300",
										"isis",
										"interfaces",
										"interface",
										"Bundle-Ether3133",
										"timers",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbe8f4f8-e35a-4c7d-a741-2cfb6d56dc0b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check removed retransmit interval unified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f607906-e7ca-4dd3-96b4-309bbbdd44be",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:ISIS/300/isis/interfaces/interface/Bundle-Ether3133/timers/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:ISIS",
										"300",
										"isis",
										"interfaces",
										"interface",
										"Bundle-Ether3133",
										"timers",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"id": "0a2c468d-09d7-41cb-886b-dc7578521afd"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-453",
					"item": [
						{
							"name": "configure bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17d89520-dc4e-4a95-8522-e3c5106b519d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:protocol\": [\n        {\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"name\": \"default\",\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": 65535\n                    },\n                    \"afi-safis\": {\n                        \"afi-safi\": [\n                            {\n                                \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                \"config\": {\n                                    \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                }\n                            }\n                        ]\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"10.1.1.1\",\n                            \"config\": {\n                                \"enabled\": true,\n                                \"auth-password\": \"Encrypted[104B0F1C121103]\",\n                                \"neighbor-address\": \"10.1.1.1\",\n                                \"peer-as\": 65534,\n                                \"description\": \"TESTUPDATE\"\n                            },\n                            \"afi-safis\": {\n                                \"afi-safi\": [\n                                    {\n                                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                                        \"config\": {\n                                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                                        }\n                                    }\n                                ]\n                            },\n                            \"transport\": {\n                                \"config\": {\n                                    \"local-address\": \"GigabitEthernet0/0/0/0\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "644f68b9-efda-4fb6-b398-9134c23ed45e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove description and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f6766c9-ea54-4621-b0c4-7fb145cff9b1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:neighbor\": [\n        {\n            \"neighbor-address\": \"10.1.1.1\",\n            \"config\": {\n                \"enabled\": true,\n                \"neighbor-address\": \"10.1.1.1\",\n                \"peer-as\": 65534\n            },\n            \"afi-safis\": {\n                \"afi-safi\": [\n                    {\n                        \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\",\n                        \"config\": {\n                            \"afi-safi-name\": \"frinx-openconfig-bgp-types:IPV4_UNICAST\"\n                        }\n                    }\n                ]\n            },\n            \"transport\": {\n                \"config\": {\n                    \"local-address\": \"GigabitEthernet0/0/0/0\"\n                }\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/10.1.1.1/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"10.1.1.1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71896864-5fd9-47cf-a25d-e665d965e443",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "check removed description and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab9f459-6ed8-44ce-91fc-a86fd7befe18",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = 10.1.1.1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"neighbor-address\"]).to.eql(\"10.1.1.1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = 10.1.1.1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"10.1.1.1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = 65534\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(\"65534\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(\"true\"));",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"",
											"//removed description",
											"pm.test(\"Validate removed description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"]).to.not.have.property(\"description\");",
											"});",
											"//removed password",
											"pm.test(\"Validate removed password\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:neighbor\"][0][\"config\"]).to.not.have.property(\"auth-password\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:neighbor\": [\n        {\n            \"config\": {\n                \"auth-password\": \"Encrypted[11323A2543400E5B02782E76]\",\n                \"description\": \"TESTUPDATE\",\n                \"enabled\": true,\n                \"neighbor-address\": \"10.1.1.1\",\n                \"peer-as\": 65534\n            },\n            \"neighbor-address\": \"10.1.1.1\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/10.1.1.1/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"10.1.1.1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "check removed description and password unified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94b296b9-7598-4073-bd1b-45c6d2df1f09",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = 10.1.1.1\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"neighbor-address\"]).to.eql(\"10.1.1.1\");",
											"});",
											"//neighbor-address",
											"pm.test(\"Validate neighbor-address = 10.1.1.1\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(\"10.1.1.1\");",
											"});",
											"//peer-as",
											"pm.test(\"Validate peer-as = 65534\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(\"65534\"));",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = true\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(\"true\"));",
											"});",
											"//local-address",
											"pm.test(\"Validate local-address = GigabitEthernet0/0/0/0\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"transport\"][\"config\"][\"local-address\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
											"});",
											"",
											"//removed description",
											"pm.test(\"Validate removed description\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"]).to.not.have.property(\"description\");",
											"});",
											"//removed password",
											"pm.test(\"Validate removed password\", function() {",
											"  pm.expect(pm.response.json()[\"neighbor\"][0][\"config\"]).to.not.have.property(\"auth-password\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-network-instance:neighbor\": [\n        {\n            \"config\": {\n                \"auth-password\": \"Encrypted[11323A2543400E5B02782E76]\",\n                \"description\": \"TESTUPDATE\",\n                \"enabled\": true,\n                \"neighbor-address\": \"10.1.1.1\",\n                \"peer-as\": 65534\n            },\n            \"neighbor-address\": \"10.1.1.1\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-network-instance:network-instances/network-instance/default/protocols/protocol/frinx-openconfig-policy-types:BGP/default/bgp/frinx-openconfig-network-instance:neighbors/neighbor/10.1.1.1/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"protocols",
										"protocol",
										"frinx-openconfig-policy-types:BGP",
										"default",
										"bgp",
										"frinx-openconfig-network-instance:neighbors",
										"neighbor",
										"10.1.1.1",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"id": "1b9f2fb1-fa9f-4cbb-a3a8-2631aaaeb664"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-417",
					"item": [
						{
							"name": "configure device 6.6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9a88948-8d56-4abf-953f-9abb208419bb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ninterface Bundle-Ether60\n!\ninterface Bundle-Ether60.70\n description desc_test\n encapsulation dot1q 70\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74183d7f-031a-4b98-abfd-595cad6dfbcc",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "20c84525-97e5-4ba0-a870-edef5b930219",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount device 6.2 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eeadfecb-ea55-4a8d-81e1-967c5300a0df",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"xr62\",\n      \"netconf-node-topology:host\": \"192.168.1.216\",\n      \"netconf-node-topology:port\": 830,\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"cisco\",\n      \"netconf-node-topology:password\": \"cisco\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "check netconf connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55e0107e-8951-430e-96aa-6c43c6839a4f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check netconf connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6c4057b-c8ef-4954-bc10-1cc98b76f838",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount device 6.2 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2712b19-4de8-47ca-96b4-db811d9bb80c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"xr62\",\n      \n      \"cli-topology:host\" : \"192.168.1.216\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "check cli connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72ab98d0-a6ab-4031-a747-51b05c001ad9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check cli connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9156a27b-6f2c-4100-91fa-0ec281fece10",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure device 6.2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e282fb24-6830-4240-b9eb-453900c57236",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ninterface Bundle-Ether60\n!\ninterface Bundle-Ether60.70\n description desc_test\n encapsulation dot1q 70\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/xr62/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"xr62",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eeb9c651-c3f1-4271-a088-b75fe66bbfd1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-result\" in pm.response.json()[\"output\"][\"node-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3cbf7aea-fb90-49a4-8737-003f624a7ee3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\",\"xr62\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore 6.2 configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b18c56a-ab12-49be-9e4b-2afec1884099",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"xr62",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount device 6.2 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c342615-8f19-4fcd-8c3a-4fac1db897ea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount device 6.2 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07602cc7-110a-448d-a8e5-5bb2524f5850",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"xr62"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-458",
					"item": [
						{
							"name": "configure with embedded sections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c6531ca-bb3b-4fb7-a3bc-d8d148d2be69",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n ipv4 access-list 190\n 10 deny ipv4 any any\n!\nipv4 access-list Ingress_Acl\n 10 deny ipv4 any any\n!\ninterface Bundle-Ether103\n description cede\n!\ninterface Bundle-Ether103.100\n description TOOL_TEST\n service-policy input REWRITE_TOS2_in\n service-policy output 100M-Policing-BE\n ipv4 address 1.1.1.1 255.255.255.252\n arp timeout 300\n shutdown\n load-interval 30\n ethernet cfm\n  mep domain DML3 service 500 mep-id 1\n   cos 6\n  !\n !\n encapsulation dot1q 100\n ipv4 access-group Ingress_Acl ingress\n ipv4 access-group 190 egress\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01fe8a15-e3e0-49e3-a597-b948fa2f5ae4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "57113da1-eaff-409b-ab93-75ab05495724",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "260abc09-f80c-4b8f-bc5f-93dd471516c5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "check acl list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5a0e2d3-2ca9-4b8b-a5d6-153c7357ee98",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//set-name",
											"pm.test(\"Validate set-name = Ingress_Acl\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"Ingress_Acl\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//set-name",
											"pm.test(\"Validate set-name = Ingress_Acl\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(\"Ingress_Acl\");",
											"});",
											"",
											"//id",
											"pm.test(\"Validate id = Bundle-Ether103.100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"config\"][\"id\"]).to.eql(\"Bundle-Ether103.100\");",
											"});",
											"",
											"//id",
											"pm.test(\"Validate id = Bundle-Ether103.100\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(\"Bundle-Ether103.100\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//set-name",
											"pm.test(\"Validate set-name = 190\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(\"190\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//set-name",
											"pm.test(\"Validate set-name = 190\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(\"190\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aaae1b5e-5a00-4709-af70-dd27890ae89c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/Bundle-Ether103.100",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl",
										"interfaces",
										"interface",
										"Bundle-Ether103.100"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore 6.6 configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15d43fb3-352b-4a6c-b510-f1f32b8dded3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-455",
					"item": [
						{
							"name": "configure acl",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8ab87a9-f0ca-4ef8-9814-d3412de6d744",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset chassis fpc 0 lite-mode\nset chassis auto-image-upgrade\nset protocols ospf overload\nset protocols ospf area 192.168.10.1 interface ge-0/0/1.0\nset firewall family inet filter management-filter term APTN-VS from source-address 10.10.33.0/24\nset firewall family inet filter management-filter term APTN-VS from destination-port 22\nset firewall family inet filter management-filter term APTN-VS then accept\ncommit\nexit\"\n  }\n}\n\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb8a4ef-828c-4534-8648-c64b20c512f4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d4b39514-fd6d-4548-9966-38e2ba3c1d55",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdf06b39-e35f-4a5e-b3e3-cb34d43549af",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "check acl parsing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdfcd20e-fde7-4594-8e7f-985af1c22291",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"//frinx-acl-extension:term-name",
											"pm.test(\"Validate frinx-acl-extension:term-name = APTN-VS\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"frinx-acl-extension:term-name\"]).to.eql(\"APTN-VS\");",
											"});",
											"",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"config\"][\"sequence-id\"]).to.eql(1);",
											"});",
											"",
											"//forwarding-action",
											"pm.test(\"Validate forwarding-action = frinx-openconfig-acl:ACCEPT\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"actions\"][\"config\"][\"forwarding-action\"]).to.eql(\"frinx-openconfig-acl:ACCEPT\");",
											"});",
											"",
											"//sequence-id",
											"pm.test(\"Validate sequence-id = 1\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"sequence-id\"]).to.eql(1);",
											"});",
											"",
											"//destination-address",
											"pm.test(\"Validate destination-address = 0.0.0.0/0\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"destination-address\"]).to.eql(\"0.0.0.0/0\");",
											"});",
											"",
											"//source-address",
											"pm.test(\"Validate source-address = 10.10.33.0/24\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"ipv4\"][\"config\"][\"source-address\"]).to.eql(\"10.10.33.0/24\");",
											"});",
											"",
											"//destination-port",
											"pm.test(\"Validate destination-port = 22\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"destination-port\"]).to.eql(22);",
											"});",
											"",
											"//source-port",
											"pm.test(\"Validate source-port = ANY\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"acl-entries\"][\"acl-entry\"][0][\"transport\"][\"config\"][\"source-port\"]).to.eql(\"ANY\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"config\"][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = management-filter\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"config\"][\"name\"]).to.eql(\"management-filter\");",
											"});",
											"",
											"//type",
											"pm.test(\"Validate type = frinx-openconfig-acl:ACL_IPV4\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"type\"]).to.eql(\"frinx-openconfig-acl:ACL_IPV4\");",
											"});",
											"",
											"//name",
											"pm.test(\"Validate name = management-filter\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:acl\"][\"acl-sets\"][\"acl-set\"][0][\"name\"]).to.eql(\"management-filter\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ee9ea418-8e69-429b-b5e9-0b33210f32f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-acl:acl"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config junos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c7d5631-c77a-4420-9015-b5104f66bb4e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"root# load override \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UNI-678",
					"item": [
						{
							"name": "configure device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "793c3582-ba71-4754-b8fe-c9f1d914d6de",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n     ipv6 access-list Protect-Router-IPV6-CI111-LAN-IN\n permit tcp host 2001:111:111:111::2 host 2001:111:111:111::1 eq bgp sequence 10\n   permit tcp host 2001:111:111:111::2 eq bgp host 2001:111:111:111::1 sequence 20\n   deny ipv6 any any fragments sequence 30\n   permit icmp any FF02::1:FF00:0/104 nd-ns sequence 40\n   permit icmp host :: host FF02::1 nd-ns sequence 50\n   permit icmp host FF02::1 host FF02::1 nd-ns sequence 60\n   permit icmp host FF02::1 host FF02::1 nd-na sequence 70\n   permit icmp any any echo-request sequence 80\n   permit icmp any any echo-reply sequence 90\n   permit icmp any any packet-too-big sequence 100\n   permit icmp any any time-exceeded sequence 110\n   deny udp any any eq 0 sequence 120\n   deny tcp any any eq 0 sequence 130\n   deny sctp any any eq 0 sequence 140\n   deny ipv6 any host 2001:111:111:111::1 sequence 150\n   deny ipv6 any host 2001:11:11:11::3 sequence 160\n   permit ipv6 any any sequence 170\n     end\"\n  }\n}\n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fae6795-8bbf-4af1-b262-68011f37975d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e7666191-8e6b-44a5-96f9-620faade937f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c6e55553-7d73-4599-9b18-969ace35b309",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"configure replace nvram:startup-config\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Rollback Done\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure replace nvram:startup-config\nyes\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-443",
					"item": [
						{
							"name": "configure description and alias interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c26dc4da-0827-4572-9246-6ba0d519819d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset interfaces ae2192 unit 0 description kristina\nset interfaces ae2192 unit 0 alias kristina\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for output timer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ecde208-1761-4458-9abc-e607a58879a3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"show configuration interfaces ae2192 unit 0 | display set\",\n     \"wait-for-output-timer\" : 2\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1aeb750-1b47-459e-bcbd-0eae1a1841ee",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"load override \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-347",
					"item": [
						{
							"name": "set enabled interface without description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1536a0c2-dd21-496c-b07d-56820b1f3f1b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"   pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"frinx-openconfig-interfaces:interface\": [\n   {\n     \"name\": \"{{eth_intf-id}}\",\n     \"config\": {\n       \"name\": \"{{eth_intf-id}}\",\n       \"type\": \"iana-if-type:ethernetCsmacd\",\n       \"enabled\": true,\n       \"frinx-openconfig-vlan:tpid\": \"frinx-openconfig-vlan-types:TPID_0X8100\"\n     }\n   }\n ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c8c4ac6-4143-42f1-be0d-813696dea0ee",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show enabled interface without description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06f0867e-ffab-415b-897c-cc45ccc2b0a1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate vlan\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"frinx-openconfig-vlan:tpid\"]).to.eql(\"frinx-openconfig-vlan-types:TPID_0X8100\");",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "disable interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6049939b-77f4-427f-9c49-fdd51e3219ff",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"   pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n \"frinx-openconfig-interfaces:interface\": [\n   {\n     \"name\": \"{{eth_intf-id}}\",\n     \"config\": {\n       \"name\": \"{{eth_intf-id}}\",\n       \"type\": \"iana-if-type:ethernetCsmacd\",\n       \"enabled\": false\n     }\n   }\n ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ca224cf-9b36-4799-b7e5-3089090c3f0a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show disabled interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8839c7c5-75eb-4cae-b569-eccc63fc82e1",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"interface\"][0][\"config\"][\"enabled\"]).to.eql(false);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"{{eth_url_intf-id}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-276",
					"item": [
						{
							"name": "configure bgp ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3caecc5e-dedd-44a3-85cd-b069589f682d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Configured data\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"router bgp 17676\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"address-family ipv6 unicast\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"bgp attribute-download\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"neighbor 10.64.2.100\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"remote-as 17676\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"description TB100-007RR-02\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"update-source Loopback0\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"address-family ipv6 labeled-unicast\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.not.contain(\"Invalid input detected at '^' marker\");",
											"",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"conf t\nrouter bgp 17676\n address-family ipv6 unicast\n  bgp attribute-download\n !\n neighbor 10.64.2.100\n  remote-as 17676\n  description TB100-007RR-02\n  update-source Loopback0\n  address-family ipv6 labeled-unicast\n  !\n !\n!\ncommit\nend\n\t\"}\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "Mount IOS XR again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a42ee501-d5d8-4661-b6a3-4b8dbe20ce02",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check xr5uc status connected after unsupported command",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "008e4cea-7b16-4090-8737-3c411ebebe47",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check xr5uc status connected after unsupported command');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5fcf778-485d-48b1-ab3e-fb4b18a82cd2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check xr5uc unified mount point exists after unsupported command",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c63b5744-04fc-426a-892f-073116a12b35",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check xr5uc unified mount point exists after unsupported command');",
											"    }",
											"}",
											"if(pm.response.code == 500){",
											"        tests[\"Failed to mount \"] = false",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74038f84-f6ad-45ab-ae4b-2d485406419e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check xr5uc uniconfig available after unsupported command",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06798225-d28e-41a5-a736-bcae0ec676ff",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check xr5uc uniconfig available after unsupported command');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "171886cf-078f-4964-ab11-70389171375a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete configuration bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "86d59c23-28b8-4270-a61c-d822173fb745",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Configured data\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"no router bgp 17676\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.not.contain(\"Invalid input detected at '^' marker\");",
											"",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"conf t\nno router bgp 17676\ncommit\nend\n\t\"}\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "show deleted configuration bgp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9114756d-f214-4a13-a16b-13d2cd24e37d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Deleted data check\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.not.contain(\"router bgp 17676\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config\n\t\"}\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-257",
					"item": [
						{
							"name": "case1",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eedfd4c8-2af0-4ad4-b4bc-e042e4f58461",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d2cbf95-826b-4907-8ff7-50f1cbcff11b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "184915c6-49c7-454a-9629-92ec40a5c5f1",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6399b58b-aca3-4e3c-a3b0-5afab682861b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56bdcba2-7c1c-4497-88dc-c9439c2c9ddc",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffd5da02-11bb-4979-990a-4d2c4a2a91b7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4112f54-b85b-4a54-9a34-2c4dbbb614fc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": true\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "175fd25c-b5da-4f79-b41b-69d8c2015535",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bdcace6-b2a8-4ab5-b621-26b472a1ac73",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"mpls traffic-eng\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface GigabitEthernet0/0/0/0\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddd3d6d4-aece-4c96-aeff-9cac39f3e8c2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "948b3f02-e16b-432b-8ea6-d9644f3bb3fb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6441a199-5ca9-42b1-86cb-3cfd4769cfe8",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ceabf87-e0dd-45aa-8639-75593472e311",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show empty mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92c0f1d3-4fcf-4d94-a312-0bbb1c566bcb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09584288-6100-42db-a912-ec93dd26760d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e04bb4a-a910-4bf3-aa42-aca0eba467f0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e6f89da-0e3b-4455-8f30-3396ce34f3eb",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case2",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8e5c093-94e7-4d43-b813-104e2cf45685",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "386ed80f-6fe4-4b9c-874c-cda3a7b3ec12",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "790f3e9d-d2b7-4530-8183-57261e1f60a9",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b58f7e57-780c-4750-878b-6de70922aebe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef309905-8f69-4e7f-bc69-b31a5543a56a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cde92629-63bf-42dc-813f-cb91e46c7727",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2638a87b-8f3e-424a-877f-93a74acc7c4d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": true\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c213cec8-74a3-473f-80c2-37b1c02ca40f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07a21881-4b5b-4f2c-9fc1-ce98dda3e592",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"mpls traffic-eng\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface GigabitEthernet0/0/0/0\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b18cc28d-ddea-425c-b5d0-6a335e86cbff",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d1dfea0-280c-4a86-a723-753598abe3bc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2d4333e-c8ee-46c6-8eca-58d88928c859",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": true\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff737ef4-ca40-400c-89f1-ff333c871ac2",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39b09da6-5b45-4a58-9c5e-0340cfe9a6e7",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88277ffb-cc31-4db1-b886-06f30c57997c",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d78cfe5c-ebf0-4816-bf81-bdf4ce418405",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6528c28-53ae-4bb0-858e-e4f4ab7c324a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3c9acaf-7045-4a32-bde2-6158473f392d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4fd33a8-4ad4-466e-9c5e-1eda60890393",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "760c217a-6444-4162-a4ca-c5ff450d4c3e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd6edc8c-ffb5-4c79-8249-546cc8a28146",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case3",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfd1108f-954e-401b-9787-97d9b9994bbb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "180ad027-15d0-4342-80bd-55909cdddf2b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e31d687e-bfdf-40dd-9e49-d5879bb6f344",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case3');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "defc36b8-f272-4a2b-b1e1-9a139282867d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d39e23f-41af-4e5b-9a9b-99a57674bee9",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70719918-b7ec-4bb8-95ac-e1eaaa7f14f5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put invalid mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef59c97d-eb16-40d4-af9b-97eb7339c2cb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": false\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a63d722-6101-4b1f-bb65-fc82b5f92245",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "543f7bc1-a5ab-4ef6-a110-bc0cf973c8f6",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5757636a-d1c1-4f40-bdbc-1f5ac98c9250",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a74da714-a59e-4e9e-b4c5-0b025ec7d29e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee1a537e-31af-4af5-9d2f-36fd9aace32d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13863627-1c07-48b1-a76e-c41cdc08428e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af6d5069-d310-448a-b9a8-0cdae65cbe4f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "107daefb-96ce-4313-aae2-e318f546493b",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "113b917d-b288-42b2-aad0-f48ef1c3fc58",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01184d56-714b-4d7b-90c5-cb6cb3875e47",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f76d91e-1c1d-4cea-ba6a-84346940184b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "694f116b-2c06-4014-825e-0b8208aaa24f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"description": "putting interface with enable false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "888ae7ee-bda1-4171-99fc-e51178d926b5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f720d51c-475c-4159-8b35-99822f6c3f9d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case4",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af9847a8-f62b-4f24-8660-975b463c3785",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8503f619-46f9-447d-bf32-a0d060bf743a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20c6da17-c375-4d7c-badc-d949e8735239",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case4');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "98f093e6-7aa4-4d35-9112-8540c74c9ba2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b074906d-b5d8-4ad6-8cb9-065e497205d3",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3521d9f6-2385-4a35-9ff7-e66b1ca4925e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put invalid mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "723fde16-a6d5-48d7-9ceb-91b8b49c2f8b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"interface\": [\n\t\t{\n\t\t\"interface-id\": \"GigabitEthernet0/0/0/0\",\n\t\t\"config\": {\n\t\t\t\"interface-id\": \"GigabitEthernet0/0/0/0\"\n\t\t\t\n\t\t\t}\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/frinx-openconfig-network-instance:mpls/frinx-openconfig-network-instance:te-interface-attributes/frinx-openconfig-network-instance:interface/GigabitEthernet0%2f0%2f0%2f0",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"frinx-openconfig-network-instance:mpls",
												"frinx-openconfig-network-instance:te-interface-attributes",
												"frinx-openconfig-network-instance:interface",
												"GigabitEthernet0%2f0%2f0%2f0"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa89f780-fd81-4df4-ad44-a61ec80c23f2",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67b6219f-32c7-487a-bea0-066cd27228be",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f31510c-6b93-4f00-b5ac-3d0c251ed217",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d748754-9872-4488-9402-3e013c2fc5a5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13515311-8b85-4bd2-b127-272dd59037fd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fda94716-cd86-4072-b216-c39240905434",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb631308-8f5f-487c-8157-857ed3b24f0e",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7313c1f8-1fd8-4f7e-b5cc-3e1ef46c4a4e",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1de68c7c-677a-450e-8fe2-c7f728fd5682",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34ef5d25-ed33-4e55-9173-3c77c4b2dd8d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da034d58-8eec-4038-af1c-a24c3d35fa72",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "875a20dc-db96-4223-97a6-c8bf386a36ff",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"description": "putting interface with enable false",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "84ea4fd1-7297-46b2-b44f-eeaa04f33534",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "845d453c-f1a7-4259-9ab1-c043e4994dc3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "case5",
							"item": [
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68301834-8792-4876-8af3-d0cd6f55ce9f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Show no configuration\", function () {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount IOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3399cd0-a1d2-4dd1-a7a4-41d07b62c63d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check uc status connected case5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c40db9bd-6a34-45b9-9f66-e07c97f87d95",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check uc status connected case5');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05c4f327-4cb2-4132-bc72-33f2eac53806",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a49776d-b6cb-461d-ace5-3b8cd295d68a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:create-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "read snapshot1 ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7006f1ad-6def-4b4e-af95-919a72547a59",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no mpls in snapshot\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"snapshot1",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										},
										"description": "Reads taken snapshot."
									},
									"response": []
								},
								{
									"name": "put mpls-te traffic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eea2ad7a-8376-46b0-8078-440956beff33",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": true\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff49b49b-f12a-4aa6-98ff-e8c7f3b5a8e7",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53f48f4c-9d15-4c16-a74a-b18e9edc7303",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"mpls traffic-eng\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface GigabitEthernet0/0/0/0\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2031f8f1-55eb-47b9-91c8-6235caa90636",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49e0a88d-89f3-4626-b9e7-54195ff5c002",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update mpls-te to false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "516c6126-1b70-4280-bc1a-d00a149c6262",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": false\n            }\n        },\n        \"te-interface-attributes\": {\n            \"interface\": [\n                {\n                    \"config\": {\n                        \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                    },\n                    \"interface-id\": \"GigabitEthernet0/0/0/0\"\n                }\n            ]\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1cbe31c-7305-49ed-87ea-523f8d35882a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(\"fail\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"error-type\"]).to.eql(\"processing-error\");",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"rollback-status\"]).to.eql(\"complete\");",
													"});",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78185f65-092e-4619-b332-7d6d1ac8ee0e",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94cc7802-cd85-4e5c-84b4-ea615c8e083f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6944538a-2955-49b1-a648-3763264a1b62",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"mpls traffic-eng\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface GigabitEthernet0/0/0/0\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2985705a-ee59-49fd-9b90-f35dbfa33d1c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b20775e-a403-416c-8783-87d730671edd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.true;",
													"});",
													"",
													"pm.test(\"Check mpls interface\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-interface-attributes\"][\"interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"GigabitEthernet0/0/0/0\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f9570a5-3fdf-4eb1-ab40-1a02e728f50b",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c18310bb-1d6e-4f7b-bc0f-8345fa158610",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f11346a-bd18-40a4-994e-32f368cd1138",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e1adb62-07ef-414e-b836-88e319d9d42e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6c78715-8291-411c-94c8-2769e8090035",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "put false attributes mpls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f297e91-42a9-4979-b803-6f00b2e408ae",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-network-instance:mpls\": {\n        \"te-global-attributes\": {\n            \"frinx-cisco-mpls-te-extension:config\": {\n                \"enabled\": false\n            }\n        }\n    }\n}\n"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acee09fd-4324-4a6d-af4a-9f691729fd00",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21c30bcf-1484-4fab-816d-742583943a2c",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
													"",
													"  }",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:sync-from-network"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cda0945-a048-4535-9156-ef16904af94a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"       pm.test(\"Validate result\", function() {",
													"       ",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    }); ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:replace-config-with-operational"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ea11498-3a4a-44a8-816d-89abd04a886f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\nshow running-config mpls traffic-eng\n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d284109e-6849-4aa5-95de-e2b2ad2713b2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.false;",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "show mpls in CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d8e10b9-7c65-4db1-86fd-c354a9947cb5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Check enabled to be true\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:mpls\"][\"te-global-attributes\"][\"frinx-cisco-mpls-te-extension:config\"][\"enabled\"]).to.be.false;",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/mpls",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												"network-instance",
												"default",
												"mpls"
											]
										}
									},
									"response": []
								},
								{
									"name": "replace config with snapshot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fed285be-08fb-4abb-bc26-30a69339db4b",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"",
													"pm.test(\"Validate node result\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"]).to.not.be.empty; ",
													"         ",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"         pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"         }",
													"});    ",
													"    ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"{{node_id}}\"]\n        }\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:replace-config-with-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:replace-config-with-snapshot"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b651908-4d39-4241-b07c-7ed43d090d2f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "show running mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79c437e2-fbbc-4afc-a26c-2e3c0ca336e0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate no configuration\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"No such configuration item(s)\");",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"\n     show running-config mpls traffic-eng \n\t\"}\n }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te OPERDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "312bf0d7-6c87-4517-8a44-ab3b0a46a16f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances"
											]
										}
									},
									"response": []
								},
								{
									"name": "show  mpls-te CONFDS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62839caa-5ecb-4d4b-bd1b-c65d0ad28e55",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate configuration\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"name\"]).to.eql(\"default\");",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:network-instances\"][\"network-instance\"][0][\"mpls\"]).to.be.undefined;",
													"",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-network-instance:network-instances",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete snapshot1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f913870f-5c1e-47b2-a033-4eee32a41163",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													" pm.response.to.have.status(200);",
													"});",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													" if ( [\"output\"] ){",
													"     ",
													" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													" }",
													"});",
													"",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"",
													"  pm.test(\"Validate configuration-status\", function() {",
													"     if ( [\"output\"] ){",
													"         pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"        }",
													"});  ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"name\": \"snapshot1\"\n\t}\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:delete-snapshot",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"snapshot-manager:delete-snapshot"
											]
										},
										"description": "Removes taken snapshot."
									},
									"response": []
								}
							],
							"description": "case1 + change enable to false\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5af787cb-fe9f-4eff-af75-71acfb2a6ecb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c10f2173-3c68-4ead-a6ce-f3d6e9c230fa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-439",
					"item": [
						{
							"name": "configure invalid interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15b0da64-be8b-481d-807e-1eb8c6f90df3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"frinx-openconfig-interfaces:interface\": [\n     {\n       \"name\": \"Bundle-Ether65535aaa\",\n       \"config\": {\n         \"name\": \"Bundle-Ether65535aaa\",\n         \"enabled\": true,\n         \"description\": \"aaa\",\n         \"type\": \"iana-if-type:ieee8023adLag\"\n       }\n     }\n   ]\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether65535aaa",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface",
										"Bundle-Ether65535aaa"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61cdec1a-713d-43f3-9bd2-de3fd4969fbd",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"            pm.expect(jstring[i][\"error-message\"]).to.include(\"YANG framework' detected the 'fatal' condition 'Invalid value\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"            pm.expect(jstring[i][\"error-message\"]).to.include(\"YANG framework' detected the 'fatal' condition 'Invalid value\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"{{node_id}}\"]\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit failed again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfbd4f40-82ed-456b-9124-1af2cbe45d30",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"           // UNI-748",
											"          //  pm.expect(jstring[i][\"error-type\"]).to.eql(\"This operation is not supported\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"      //       UNI-748",
											"      //      pm.expect(jstring[i][\"error-type\"]).to.eql(\"This operation is not supported\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4=",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"{{node_id}}\"]\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational after failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d14641a5-c1e4-4a5f-97fb-bb6e21e7f497",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-442",
					"item": [
						{
							"name": "unmount 6.6.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1190aeda-417f-47b2-bda3-3468009a5207",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/661",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"661"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount 6.2.3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac9ecb0e-2a55-42d5-8643-bd9e254d8715",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/623",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"623"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount 6.2.3 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97223cb8-e8bc-46fd-b1d0-8f87047853b8",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"623\",\n      \"netconf-node-topology:host\": \"192.168.1.216\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"cisco\",\n      \"netconf-node-topology:password\": \"cisco\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/623",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"623"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 6.2.3 connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25724677-5956-4a67-b8e1-06f4fb55adbb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check 6.2.3 connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "812f70e5-a6a9-4db2-b0f3-4ffebcc98d45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/623",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"623"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 6.2.3 unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5ab3acc-2b92-41e5-9bd7-7072a8e8d48c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    pm.test(\"Interface container exists\", function () {",
											"        pm.expect(pm.response.json()).to.have.any.keys('frinx-openconfig-interfaces:interfaces'); ",
											"    });",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check 6.2.3 unified point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98ff6f72-5569-4fd7-a64c-d16f1fba50e7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/623/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"623",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount 6.6.1 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f58109a7-512d-45ab-a047-3e2f7ed89ef9",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"661\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/661",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"661"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 6.6.1 connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "610cda1c-b8d3-4602-ad1e-181fa317800a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check 6.6.1 connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5687beb6-013c-48ee-aaea-8b4143df718a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/661",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"661"
									]
								}
							},
							"response": []
						},
						{
							"name": "check 6.6.1 unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f6c105f-9ced-4fe5-9d66-47bc213c1d62",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    ",
											"    pm.test(\"Interface container exists\", function () {",
											"         pm.expect(pm.response.json()).to.have.any.keys('frinx-openconfig-interfaces:interfaces'); ",
											"    });",
											"",
											"",
											"",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check 6.6.1 unified point exists');",
											"    }",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04befb04-f7ee-4b86-bfba-3315e60e29f1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/661/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"661",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount 6.2.3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91c717ec-b220-4b82-947d-26802d3a5cee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/623",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"623"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount 6.6.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb09d9e6-22fb-43ba-b272-5b101edbec63",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/661",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"661"
									]
								}
							},
							"response": []
						}
					],
					"description": "Mounting devices IOS XR 6.2.3 and 6.6.1 through netconf",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b63eb56-cf24-4640-b587-792181a04cf5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6d38c3ee-2c67-49d2-a811-2c28d888690b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-486",
					"item": [
						{
							"name": "configure service policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46a18e06-4c6f-4baf-9a89-9a339c04348c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether101\ninterface Bundle-Ether101.1999\nservice-policy input AAA\nservice-policy output BBB\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06bfd431-c61c-463c-a0f8-b305855bef5b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60fee10f-884c-4099-8f2d-79c0409d1f7c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "update output policy BBB",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c882c84-c9e7-46e2-9778-df9b7ee0601f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"frinx-openconfig-network-instance:interface\": [\n    {\n      \"interface-id\": \"Bundle-Ether101.1999\",\n      \"config\": {\n        \"interface-id\": \"Bundle-Ether101.1999\",\n        \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"AAA\",\n        \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"CCC\"\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether101.1999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether101.1999"
									]
								}
							},
							"response": []
						},
						{
							"name": "dry run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fba15c30-cfd7-4ef9-917c-09d69b25e429",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no service-policy output BBB', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no service-policy output BBB\");",
											"    });",
											"    pm.test('dryrun - not contains no service-policy input', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.include(\"no service-policy input\");",
											"    });",
											"    pm.test('dryrun - not contains service-policy input AAA', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.include(\"service-policy input AAA\");",
											"    });",
											"}",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no service-policy output BBB', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.include(\"no service-policy output BBB\");",
											"    });",
											"    pm.test('dryrun - not contains no service-policy input', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.include(\"no service-policy input\");",
											"    });",
											"    pm.test('dryrun - not contains service-policy input AAA', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.include(\"service-policy input AAA\");",
											"    });",
											"}",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78c16a39-83fd-499f-b929-3559c70e3966",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show service policy output",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cb37617-376d-4ba0-b5f6-ca39135addfa",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"Bundle-Ether101.1999\");",
											"});",
											"pm.test(\"Validate config interface name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"Bundle-Ether101.1999\");",
											"});",
											"",
											"pm.test(\"Validate input policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"AAA\");",
											"});",
											"pm.test(\"Validate output policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"CCC\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether101.1999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether101.1999"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"id": "16e916a4-dde9-4c38-96df-12a62fcb4abe"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure service policy again",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c4ef185-82a5-4b4c-b5f8-b1dd89aed31f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether101\ninterface Bundle-Ether101.1999\nservice-policy input AAA\nservice-policy output BBB\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d0c2da9-c99f-42a7-bc3b-0f9126700ae3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a25c726-ae3a-4ec3-a3b0-dc38dbbcbbfe",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "update input policy AAA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a3ba21d-ca4d-48e7-bb40-a9f8952ab0de",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"frinx-openconfig-network-instance:interface\": [\n    {\n      \"interface-id\": \"Bundle-Ether101.1999\",\n      \"config\": {\n        \"interface-id\": \"Bundle-Ether101.1999\",\n        \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"CCC\",\n        \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"BBB\"\n      }\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether101.1999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether101.1999"
									]
								}
							},
							"response": []
						},
						{
							"name": "dry run",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76d3e046-367b-4900-8c7c-80c53c8c95d2",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no service-policy input AAA', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).to.include(\"no service-policy input AAA\");",
											"    });",
											"    pm.test('dryrun - not contains no service-policy output', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.include(\"no service-policy output\");",
											"    });",
											"    pm.test('dryrun - not contains service-policy output BBB', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration\"]).not.to.include(\"service-policy output BBB\");",
											"    });",
											"}",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") || \"cisco_xr6\" === postman.getEnvironmentVariable(\"env_type\")){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - node-id\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no service-policy input AAA', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).to.include(\"no service-policy input AAA\");",
											"    });",
											"    pm.test('dryrun - not contains no service-policy output', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.include(\"no service-policy output\");",
											"    });",
											"    pm.test('dryrun - not contains service-policy output BBB', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration\"]).not.to.include(\"service-policy output BBB\");",
											"    });",
											"}",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be207673-a74c-43a8-ad5f-cd77762d7628",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "show service policy input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9de412c-20ed-4970-bd41-36188c3993ff",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(\"Bundle-Ether101.1999\");",
											"});",
											"pm.test(\"Validate config interface name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(\"Bundle-Ether101.1999\");",
											"});",
											"",
											"pm.test(\"Validate input policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(\"CCC\");",
											"});",
											"pm.test(\"Validate output policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(\"BBB\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether101.1999",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether101.1999"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore config",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"id": "a67152ba-365e-4207-9cb7-924d0f61467e"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-450",
					"item": [
						{
							"name": "delete netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e43014d-9863-445b-ad02-522191ef56c6",
										"exec": [
											"pm.test(\"Successful request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc9cab7a-8936-43b8-b27e-43d1891874c9",
										"exec": [
											"pm.test(\"Successful request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "744dfd45-e2c9-4b58-9320-3f77889485e9",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ad726c6-c795-461d-ad7f-1e3bcc904d4e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check if connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81b0e7c2-4db3-47fa-8c86-b49304db4ce6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure device",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e727ba86-3af5-450d-b05c-8ef808179f2f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\ninterface Bundle-Ether11\n shutdown\n!\ninterface Bundle-Ether11.2637\n description IMPHR08-IuPC\n service-policy input SET_PREC_4\n vrf Tcell-GRT\n ipv4 address 10.180.188.58 255.255.255.248\n proxy-arp\n encapsulation dot1q 2637\n!\ninterface Bundle-Ether11.2980\n description IMPHR08-Iu-PS_Control_Plane\n service-policy input SET_PREC_4\n vrf Tcell-GRT\n ipv4 address 10.195.129.2 255.255.255.248\n proxy-arp\n encapsulation dot1q 2980\n!\ninterface Bundle-Ether11.2981\n description IMPHR08-Iu-PS_Control_Plane_2\n service-policy input SET_PREC_4\n vrf Tcell-GRT\n ipv4 address 10.195.129.10 255.255.255.248\n proxy-arp\n encapsulation dot1q 2981\n!\ninterface Bundle-Ether11.2982\n description IMPHR08-Iu-PS_User_Plane\n service-policy input SET_PREC_3\n vrf IUPS\n ipv4 address 10.195.129.18 255.255.255.248\n proxy-arp\n encapsulation dot1q 2982\n!\ninterface Bundle-Ether11.2983\n description IMPHR08-Iu-PS_User_Plane_2\n service-policy input SET_PREC_3\n vrf IUPS\n ipv4 address 10.195.129.26 255.255.255.248\n proxy-arp\n encapsulation dot1q 2983\n!\ninterface Bundle-Ether11.2984\n description IMPHR08-IuR\n service-policy input set_prec_5\n vrf Tcell-GRT\n ipv4 address 10.195.129.34 255.255.255.248\n proxy-arp\n encapsulation dot1q 2984\n!\ninterface Bundle-Ether11.2987\n description IMPHR08-IuCS_User_Plane\n service-policy input set_prec_5\n vrf Tcell-GRT\n ipv4 address 10.195.129.58 255.255.255.248\n proxy-arp\n encapsulation dot1q 2987\n!\ninterface Bundle-Ether11.2988\n description IMPHR08-IuCS_Control_Plane\n service-policy input SET_PREC_4\n vrf Tcell-GRT\n ipv4 address 10.195.129.66 255.255.255.248\n proxy-arp\n encapsulation dot1q 2988\n!\ninterface GigabitEthernet0/0/0/0\n shutdown\n!\ninterface GigabitEthernet0/0/0/1\n shutdown\n!\ninterface GigabitEthernet0/0/0/2\n shutdown\n!\nroute-policy policyExport1\nend-policy\n!\nroute-policy policyExport2\nend-policy\n!\nrouter static\n vrf IUPS\n  address-family ipv4 unicast\n   10.195.129.101/32 Bundle-Ether11.2983 10.195.129.28\n  !\n !\n vrf Tcell-GRT\n  address-family ipv4 unicast\n   10.180.188.206/32 Bundle-Ether11.2637 10.180.188.60\n   10.180.188.207/32 Bundle-Ether11.2637 10.180.188.60\n   10.195.129.96/32 Bundle-Ether11.2980 10.195.129.4\n   10.195.129.97/32 Bundle-Ether11.2980 10.195.129.4\n   10.195.129.98/32 Bundle-Ether11.2981 10.195.129.12\n   10.195.129.99/32 Bundle-Ether11.2981 10.195.129.12\n   10.195.129.102/32 Bundle-Ether11.2984 10.195.129.36\n   10.195.129.105/32 Bundle-Ether11.2987 10.195.129.60\n   10.195.129.106/32 Bundle-Ether11.2988 10.195.129.68\n   10.195.129.107/32 Bundle-Ether11.2988 10.195.129.68\n  !\n !\n!\nrouter hsrp\n interface Bundle-Ether11.2637\n  address-family ipv4\n   hsrp 109\n    timers 1 3\n    preempt\n    priority 110\n    address 10.180.188.57\n   !\n  !\n !\n interface Bundle-Ether11.2980\n  address-family ipv4\n   hsrp 102\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.1\n   !\n  !\n !\n interface Bundle-Ether11.2981\n  address-family ipv4\n   hsrp 103\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.9\n   !\n  !\n !\n interface Bundle-Ether11.2982\n  address-family ipv4\n   hsrp 104\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.17\n   !\n  !\n !\n interface Bundle-Ether11.2983\n  address-family ipv4\n   hsrp 105\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.25\n   !\n  !\n !\n interface Bundle-Ether11.2984\n  address-family ipv4\n   hsrp 106\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.33\n   !\n  !\n !\n interface Bundle-Ether11.2987\n  address-family ipv4\n   hsrp 107\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.57\n   !\n  !\n !\n interface Bundle-Ether11.2988\n  address-family ipv4\n   hsrp 108\n    timers 1 3\n    preempt\n    priority 110\n    address 10.195.129.65\n   !\n  !\n !\n!\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4805210-2d09-4e3f-a6e3-c562e59d965f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli with invalid device version",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f681126-da0d-4661-986f-446baa986cc0",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"8.1.2\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false,\n      \"cli-topology:keepalive-timeout\": 60,\n      \"cli-topology:keepalive-initial-delay\": 60,\n      \"cli-topology:keepalive-delay\": 30\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound cli status connected when invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0d3d807-aa66-47c9-aadd-f90cd251b549",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound cli status connected when invalid');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75c3fe80-ff68-4f9c-9979-11207231d5cc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for cli  failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82757c41-b71d-433c-b6e0-04eab37c3e7d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"failed\") {",
											"    tests[\"Unified FAILED\"] = jsonData.node[0]['unified-topology:connection-status'] === \"failed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for cli failed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a85d3da-92e9-46f3-aa80-89ca68d90f37",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for cli  failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e0d9646-5454-4725-983e-7b3d4857d253",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"failed\") {",
											"    tests[\"Uniconfig FAILED\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"failed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for cli failed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8eca9c7a-8933-4400-9503-5989891ecf5d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete cli invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e88f4a3a-c17a-427f-9960-8090a50531ca",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "678d985a-2693-4ff0-ae2c-1799818d8bd6",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound cli status connecting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fea0111-5c31-4993-b5e7-772e8188dfea",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connecting\") {",
											"    tests[\"Is connecting\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connecting\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound cli status connecting');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c49061c6-1f62-47a1-9086-dbbff06e799f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for cli  installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13f9801f-1dd6-4f14-83ce-d57cfc94e74f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"installing\") {",
											"    tests[\"Unified installing\"] = jsonData.node[0]['unified-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for cli installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5cdc423e-c97d-494b-97e6-5c7bc3dfccdd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for cli  installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5df35fb-89ea-4641-b8f0-15122e474a4a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\") {",
											"    tests[\"Uniconfig installing\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for cli installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e0ebe68-9d28-4e96-8c48-322473d0bb3d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound cli status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1321205a-aa87-4687-8ab6-63485668b185",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound cli status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "98824f78-eccf-4003-ae5f-dcc1c7013e2c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for cli  installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bfae557-c9a3-4d4f-9b7f-f212d33c5b02",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"installed\") {",
											"    tests[\"Unified installed\"] = jsonData.node[0]['unified-topology:connection-status'] === \"installed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for cli installed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a73e1635-1c94-4e54-a69a-0d979557165e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for cli  installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5227afed-421b-4f5c-8c67-16b5b365eda7",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installed\") {",
											"    tests[\"Uniconfig installed\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for cli installed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ed85827-94d2-4891-a96a-ad661755b4e4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecb8e128-614b-49d5-81d3-6cb2c8419be4",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount netconf with wrong passwd",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88e1231f-20fb-40a3-9dae-08700fad22dd",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}4\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180,\n\t  \"netconf-node-topology:max-connection-attempts\": 1,\n      \"netconf-node-topology:connection-timeout-millis\": 5000\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound netconf status unable to connect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a643cc70-3467-48bb-9fb9-9336755fdf7e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"unable-to-connect\") {",
											"    tests[\"Is unable-to-connect\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"unable-to-connect\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound netconf status unable to connect');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4bd78bd7-d408-41ec-b575-75f8ab95a277",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for netconf failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3620ecd1-c1fc-4b7e-a3ee-74a19db7da41",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"failed\") {",
											"    tests[\"unified FAILED\"] = jsonData.node[0]['unified-topology:connection-status'] === \"failed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for netconf failed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1058e099-89d9-42d2-996d-cace4fe9bdaf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for netconf failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1213180-937d-43b7-a956-03a3ec2ef2ae",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"failed\") {",
											"    tests[\"uniconfig FAILED\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"failed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for netconf failed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "749dc8dd-a999-4ad9-ae63-043016e20b1c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete netconf invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"id": "1a7936cc-084f-4fad-984c-2026b5bbaeb9"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount netconf valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50d7ad7e-1676-4baf-ac40-c7e27463e896",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound netconf status connecting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bed2197-740a-4b31-a71e-27333b72da84",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\") {",
											"    tests[\"Is connecting\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound netconf status connecting');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2094ad6-06c2-4a5c-baf8-2551639e18f9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for netconf installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2bce8ba-39e8-455d-b349-d5e05595a94b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"installing\") {",
											"    tests[\"unified installing\"] = jsonData.node[0]['unified-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for netconf installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6c19234-d782-4a51-b41f-8c242bf5bae2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for netconf installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37b5a92c-31b6-499f-95ae-b8b0b0ad3c65",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\") {",
											"    tests[\"uniconfig installing\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for netconf installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e393f0e9-f967-4ac4-ac23-77c36b9165c5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check southbound netconf status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa2786fe-a0e7-4020-8788-a904bcf4e4fd",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check southbound netconf status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d80fbf0c-70e5-4149-aa7e-ead42db09727",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified status for netconf installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84468eb5-ff19-4dc5-ab5b-9d6a20d14aaa",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['unified-topology:connection-status'] === \"installed\") {",
											"    tests[\"unified installed\"] = jsonData.node[0]['unified-topology:connection-status'] === \"installed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified status for netconf installed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b0ce32e-f93d-4925-99e8-9317a184a5d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for netconf installing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b6373b3-ddb2-4c4c-bd52-9b4994ef0edc",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\") {",
											"    tests[\"uniconfig installing\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installing\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for netconf installing');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3898025d-34cf-4e05-b37b-8744ffce5a4d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig status for netconf installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "804d733d-14dc-436f-a4c1-1375fbb08b20",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installed\") {",
											"    tests[\"uniconfig installed\"] = jsonData.node[0]['frinx-uniconfig-topology:connection-status'] === \"installed\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig status for netconf installed');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cf1f9d52-930c-467c-8aa0-d7e63f3abdc8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli for restore configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d84809be-1e15-44b9-b6f1-34eb21a17ede",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f885aa5-6bb5-465e-bf3d-ddcce31cca62",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8fb1d5f9-4585-414d-81b8-2cd7b22832ce",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"id": "888dcbed-6209-4c74-b2a4-70195c2c4b96"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"description": "This is applicable for XRv5 only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ea521a0-ec6d-4002-9538-e9ac0a70cfb7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6acabfea-6110-46a7-94a4-c55af3fc6df9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UNI-744",
					"item": [
						{
							"name": "netconf",
							"item": [
								{
									"name": "unmount ASR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f0c78b6-b677-487b-b561-c864df2fbb1a",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c61a548b-36ab-413a-b141-be32783b62e0",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{topology_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check ASR status connected netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f5c1b98-0181-4601-9424-32efe3a4ae22",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check ASR status connected netconf');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d6bd711c-b9dc-4cca-87d5-d5237b70667c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR netconf with same parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eebf31b3-d421-4a1e-a28c-37ce095f3331",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{topology_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check if device tried to reconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecbe0324-9a12-42f9-856d-159f36e2233d",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// Store the response in variable",
													"var jsonData = JSON.parse(responseBody);",
													"    ",
													"    // If the device remains connected, test passes.",
													"    if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
													"        tests[\"Device should not reconnect\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
													"    }",
													"    ",
													"    // If the ODL tries to reconnect the device, test fails.",
													"    else if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\") {",
													"        tests[\"Device should not reconnect\"] = false;",
													"    }",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "467cf8dd-6a38-46ac-98b7-133863ccb898",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR netconf with different parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75feca84-12ee-4b28-aa80-800f759f6e26",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"     pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{topology_port}},\n      \"netconf-node-topology:keepalive-delay\": 1,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check if device tried to reconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "321e7df7-c17d-4847-b3cb-bcc2ed5d3b44",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// Store the response in variable",
													"var jsonData = JSON.parse(responseBody);",
													"    ",
													"    // If the device remains connected, test passes.",
													"    if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\") {",
													"        tests[\"Device should reconnect\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\";",
													"    }",
													"    ",
													"    // If the ODL tries to reconnect the device, test fails.",
													"    else if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
													"        tests[\"Device should reconnect\"] = false;",
													"    }",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1dd44783-e076-4948-ac67-5738203b8688",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount ASR netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"id": "7acbe816-232a-4255-b3fe-572bda643e67"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "cli",
							"item": [
								{
									"name": "unmount ASR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d17ba36-eb88-4ac7-8aeb-91b40718e2e3",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check ASR unmounted cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												],
												"id": "3e789dcf-a928-4df2-8ad7-c32e4711dddd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													""
												],
												"id": "e47c5098-cf20-454d-b4fc-4f133d86caff"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6726905d-47dc-424b-924c-ff75a842b115",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check ASR status connected cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9105fbe8-856f-4325-9d08-8f8ac38612dc",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check ASR status connected cli');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "267f4ccc-965a-451e-8b32-c71f2fce0c15",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR cli same parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95d27ac3-6b8b-4efe-85e7-c2c205f954bd",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check if device tried to reconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2e53f0b-07cc-4f96-8a75-0281c0f83e68",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// Store the response in variable",
													"var jsonData = JSON.parse(responseBody);",
													"    ",
													"    // If the device remains connected, test passes.",
													"    if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"        tests[\"Device should not reconnect\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    }",
													"    ",
													"    // If the ODL tries to reconnect the device, test fails.",
													"    else if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connecting\") {",
													"        tests[\"Device should not reconnect\"] = false;",
													"    }",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3e46ee4-130f-4f43-88bb-92e2125fdffe",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount ASR cli different parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9707437a-b7fb-4348-991f-5544efd88e08",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"   pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 180,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check if device tried to reconnect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd211d31-628a-4d74-81e6-c618fe9d2804",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"// Store the response in variable",
													"var jsonData = JSON.parse(responseBody);",
													"    ",
													"    // If the device remains connected, test passes.",
													"    if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connecting\") {",
													"        tests[\"Device should reconnect\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connecting\";",
													"    }",
													"    ",
													"    // If the ODL tries to reconnect the device, test fails.",
													"    else if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"        tests[\"Device should reconnect\"] = false;",
													"    }",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79bb247e-1cd3-43c7-acb7-c24246358dce",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check ASR status connected again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c2082d6-170d-4bd0-af53-0148415af10f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check ASR status connected again');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "34865b73-96f1-4268-b7d8-68d320fc79e2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f17b320-bcfb-4cc9-9427-5cf12b878958",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "059868f4-b466-41f7-913d-6cc026c5982a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UNI-810",
					"item": [
						{
							"name": "check xrv6.1.2uc unit installed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1677ae6-5640-4cbd-bec6-46c82e876954",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"",
											"",
											"if (pm.response.code == 200) {",
											"    var jsonData = pm.response.json()[\"units\"][\"unit\"];",
											"    console.log(\"length: \" + jsonData.length);",
											"    if(jsonData.length >= 18){",
											"       tests[\"Installed\"] = true ;",
											"    }",
											"    else{",
											"        console.log(\"Not all features installed yet !  \" );",
											"        setTimeout(function(){}, 1000);",
											"        postman.setNextRequest('check xrv6.1.2uc unit installed');",
											"    }",
											"    //Reset attempt counter",
											"postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > 40) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not installed yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to install\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not installed yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, 1000);",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xrv6.1.2uc unit installed');",
											"    }",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b0814e12-6a98-4227-8000-7b479e58ba2c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/cli-translate-registry:available-cli-device-translations/available-cli-device-translation/ios xr/6.*/units?depth=2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"cli-translate-registry:available-cli-device-translations",
										"available-cli-device-translation",
										"ios xr",
										"6.*",
										"units"
									],
									"query": [
										{
											"key": "depth",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "mount R1 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20c7b60b-509b-4c7c-9554-a93de1fe8e18",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b122c638-9c4e-4588-825b-311f7cc0daf3",
										"exec": [
											"if(parseInt(pm.variables.get(\"counter\")) > 4){",
											"    postman.setNextRequest('mount R2 cli');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"R1\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{topology_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R1 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1b1ac26-b7e1-41b5-9058-11b9cc53500e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5f5dfc5-b810-4620-81c6-ac5fc8360423",
										"exec": [
											"setTimeout(function(){}, parseInt(pm.variables.get(\"waitTime\")));",
											"console.log(pm.variables.get(\"waitTime\"))",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount R2 cli",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4a101341-0790-4408-bbc7-3fec421de691",
										"exec": [
											"if(parseInt(pm.variables.get(\"counter\")) > 4){",
											"    postman.setNextRequest('check R1 unified point exists');",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "793386be-5b89-46d2-8e2d-175068a70e63",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"R2\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R2 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db636de2-1847-4cbf-871f-9aa6a009e44a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cfb2725f-140a-474a-a4e4-a536b122231d",
										"exec": [
											"setTimeout(function(){}, parseInt(pm.variables.get(\"waitTime\")));",
											"pm.variables.set(\"waitTime\",parseInt(pm.variables.get(\"waitTime\"))+30000)",
											"",
											"if(parseInt(pm.variables.get(\"counter\")) <= 4){",
											"    pm.variables.set(\"counter\", parseInt(pm.variables.get(\"counter\"))+1)",
											"    postman.setNextRequest('mount R1 netconf');",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check R1 unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2843a1df-27ee-4cfb-b949-fcef44db6357",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.json()[\"node\"][0][\"unified-topology:status-message\"] != \"creation of southbound mountpoint\"){",
											"    if(pm.response.json()[\"node\"][0][\"unified-topology:connection-status\"] == \"failed\"){",
											"        tests[\"Netconf mount point failed to connect\"] = false",
											"    }else{",
											"    // Reset attempt counter",
											"        pm.expect(pm.response.json()[\"node\"][0][\"unified-topology:connection-status\"]).to.eql(\"installed\");",
											"        tests[\"Netconf connection status connected\"] = true",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"    }",
											"    ",
											"} else {",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        tests[\"Unified status installed\"] = false",
											"    } else {",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check R1 unified point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1e897592-9262-402d-9598-f4d57e4d3025",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check R1 status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cf0557a-def2-4e1f-8a61-759b710e1a37",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.json()[\"node\"][0][\"netconf-node-topology:connection-status\"] != \"connecting\"){",
											"    if(pm.response.json()[\"node\"][0][\"netconf-node-topology:connection-status\"] == \"failed\"){",
											"        tests[\"Netconf mount point failed to connect\"] = false",
											"    }else{",
											"",
											"        pm.expect(pm.response.json()[\"node\"][0][\"netconf-node-topology:connection-status\"]).to.eql(\"connected\");",
											"        tests[\"Netconf connection status connected\"] = true",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"    }",
											"} else {",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        tests[\"Netconf connection status connected\"] = false",
											"    } else {",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check R1 status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "06486e37-5c8e-4858-b266-435888f28a45",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check R1 uniconfig available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e4a75b8-06e3-4d5d-9c0a-4622503e1406",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:status-message\"] == \"installed uniconfig node\"){",
											"    if(pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:connection-status\"] == \"failed\"){",
											"        tests[\"Netconf mount point failed to connect\"] = false",
											"    }else{",
											"    // Reset attempt counter",
											"        pm.expect(pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:connection-status\"]).to.eql(\"installed\");",
											"        pm.expect(pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:status-message\"]).to.eql(\"installed uniconfig node\");",
											"        tests[\"Uniconfig status installed\"] = true",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"    }",
											"",
											"} else {",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"        tests[\"Uniconfig status installed\"] = false",
											"    } else {",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check R1 uniconfig available');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ee37e6b8-d47c-47d1-bedb-4a3b8391c7be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check R2 unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12ef737b-fe2e-41c4-b372-f09cda0f1ba9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.json()[\"node\"][0][\"unified-topology:status-message\"] != \"creation of southbound mountpoint\"){",
											"    if(pm.response.json()[\"node\"][0][\"unified-topology:connection-status\"] == \"failed\"){",
											"        tests[\"CLI mount point failed to connect\"] = false",
											"    }else{",
											"    // Reset attempt counter",
											"        pm.expect(pm.response.json()[\"node\"][0][\"unified-topology:connection-status\"]).to.eql(\"installed\");",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"        tests[\"CLI connection status connected\"] = true",
											"    }",
											"",
											"} else {",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"        tests[\"CLI connection status connected\"] = false",
											"    } else {",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check R2 unified point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1c0f3f81-2337-4fd0-864e-8a2a25054bb7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check R2 status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a20c4bc6-dec8-4247-bd94-f1a33d8553cf",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.json()[\"node\"][0][\"cli-node-topology:connection-message\"] != \"connecting\"){",
											"",
											"    if(pm.response.json()[\"node\"][0][\"cli-node-topology:connection-status\"] == \"failed\"){",
											"        tests[\"CLI mount point failed to connect\"] = false",
											"    }else{",
											"        pm.expect(pm.response.json()[\"node\"][0][\"cli-topology:connection-status\"]).to.eql(\"connected\");",
											"        pm.expect(pm.response.json()[\"node\"][0][\"cli-topology:connected-message\"]).to.eql(\"Success\");",
											"        tests[\"CLI Unified status installed\"] = true",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"    }",
											"} else {",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"        tests[\"CLI Unified status installed\"] = false",
											"    } else {",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check R2 status connected');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d61d203-8b64-42b1-a6d6-f0d2c0a14ba3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check R2 uniconfig available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1e0e3e0-02e3-456a-8552-11d9243fe598",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:status-message\"] == \"installed uniconfig node\"){",
											"    if(pm.response.json()[\"node\"][0][ \"frinx-uniconfig-topology:connection-status\"] == \"failed\"){",
											"        tests[\"CLI mount point failed to connect\"] = false",
											"    }else{",
											"        // Reset attempt counter",
											"        pm.expect(pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:connection-status\"]).to.eql(\"installed\");",
											"        pm.expect(pm.response.json()[\"node\"][0][\"frinx-uniconfig-topology:status-message\"]).to.eql(\"installed uniconfig node\");",
											"        tests[\"Uniconfig status installed\"] = true",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"    }",
											"} else {",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\",JSON.stringify(1))",
											"        tests[\"Uniconfig status installed\"] = false",
											"    } else {",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check R2 uniconfig available');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f79efc7d-6014-49e9-93ae-2325273485bb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R1 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cc06605-d28d-4c7e-845e-495881c4cf97",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "61872509-66c9-4ac9-9983-c246262842f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R2 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f979ad2b-b48d-4525-803b-f81c7dce0b7e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						}
					],
					"description": "Please when you are going to manually test this collection test it through runner or via newman. The folder Mount System Test need to be run multiple times before Check final Status of nodes.\nBUT if you want to do it manually you need to follow this logic:\n\n1. mount R1 ,delete mount R1\n2. mount R2 ,delete mount R2\n3. wait some time and repeat step 1 and 2\n4. if you finish your desired repetition (for test the counter is set up on 4) -> mount R1 and R2 and you can continue from check R1 unified point exist till the end\n5. notice that it take some time after you mount your nodes to have available information of nodes\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49a01c3f-c1f5-4465-a200-ccb25c16858a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "27e8933c-e61c-44a4-8f4c-10a55fd3bebf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-497",
					"item": [
						{
							"name": "unmount 6.2.3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3711bd4b-c6ed-4814-b0e5-b55b567b4bb0",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount 6.2.3 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18711b5b-52fc-4089-b42b-188f3688d1e9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": 22,\n      \"netconf-node-topology:keepalive-delay\": 55,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"cisco\",\n      \"netconf-node-topology:password\": \"cisco\",\n      \"netconf-node-topology:connection-timeout-millis\": 30000,\n      \"netconf-node-topology:default-request-timeout-millis\": 30000,\n\t    \"node-extension:reconcile\": false\n    }\n  ]\n} \n"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab17d9c1-36f9-4151-bf2c-8db01c43c920",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f4f31b5-1f52-47bb-8b6e-5cd2c1dec67e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "713c80fa-3d2f-4a36-b663-a79925fbcc0b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"    pm.test(\"Interface container exists\", function () {",
											"        pm.expect(pm.response.json()).to.have.any.keys('frinx-openconfig-interfaces:interfaces'); ",
											"    });",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71449c1d-57a3-4441-85b2-6dccca67da74",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "put configuration on nonexisting interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e8ddc8a-4cf6-4a3d-b25c-53c6ad5412ae",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"frinx-openconfig-network-instance:interface\": [\n    {\n      \"interface-id\": \"Bundle-Ether4555\",\n      \"config\": {\n        \"interface-id\": \"Bundle-Ether4555\",\n        \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"POL_INGRESS\",\n        \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"POL_EGRESS\"\n      }\n    }\n  ]\n}'"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/default/policy-forwarding/interfaces/interface/Bundle-Ether4555",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-network-instance:network-instances",
										"network-instance",
										"default",
										"policy-forwarding",
										"interfaces",
										"interface",
										"Bundle-Ether4555"
									]
								}
							},
							"response": []
						},
						{
							"name": "fail commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97b3d2bc-7e58-492c-a5ba-74e8ba1d1a5a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"fail\");",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"    var jstring=pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    for(var i=0;i<jstring.length;i++){",
											"        if(jstring[i][\"node-id\"]===postman.getEnvironmentVariable(\"node_id\")){",
											"            pm.expect(jstring[i][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"            pm.expect(jstring[i][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"            pm.expect(jstring[i][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"            pm.expect(jstring[i][\"error-type\"]).to.eql(\"processing-error\");",
											"        }",
											"    }",
											"});",
											"",
											"",
											"",
											"tests[\"Body matches string:\"+ pm.environment.get(\"node_id\")] = responseBody.has(String(postman.getEnvironmentVariable(\"node_id\")));",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational after failed commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "373cd87d-1c1f-4363-b404-6c195952f22c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "677b42a4-66c5-4707-9bd2-4a3177eb5cbe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7cb321b9-d3f8-4edc-8ca2-a25ae2ffabd8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-509",
					"item": [
						{
							"name": "unmount junos netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1fbcd04-1cc5-4e71-afe3-7f4a929ad1e0",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount junos cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74f9f134-e11e-4c68-af85-cf84a920ab09",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount junos netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9258f18f-e999-44aa-ba99-18e941551547",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84cf66cd-881d-4a3f-9361-42259858008f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"node\": [\n        {\n            \"netconf-node-topology:connection-timeout-millis\": 30000,\n            \"netconf-node-topology:default-request-timeout-millis\": 30000,\n            \"netconf-node-topology:host\": \"{{junos_ip}}\",\n            \"netconf-node-topology:keepalive-delay\": 55,\n            \"netconf-node-topology:password\": \"{{password}}\",\n            \"netconf-node-topology:port\": 22,\n            \"netconf-node-topology:tcp-only\": false,\n            \"netconf-node-topology:username\": \"{{username}}\",\n            \"node-extension:reconcile\": false,\n            \"node-id\": \"{{node_id}}\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac96ec4e-3132-4968-98c9-acbad3435e25",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check if connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5de98b28-7e02-4044-a9fe-37aa7c8e90a0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if unified mount point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76c5b5ee-b0d2-4b7e-a1a2-df3ad0caf06f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check if unified mount point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "459786e2-a29f-451d-92f5-39f8e4e84360",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if uniconfig available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91523da4-a2b4-48d5-a198-07bcc2600305",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check if uniconfig available');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f6722698-46a5-46bd-9d5a-18e0579d867b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount Junos cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "842c5d5a-00b8-4884-b31a-44e593642425",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{junos_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"junos\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if cli connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e834985-1e80-40bd-a2a5-4d2584a8f1e2",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check if cli connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a08fa53-b4b8-4970-98db-adb6d9a7059b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a527482-464b-4166-9e79-8c9d36a725e5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n     set chassis fpc 0 lite-mode\n     set chassis auto-image-upgrade\n     set services rpm\n     set interfaces ge-0/0/0 flexible-vlan-tagging\n     set interfaces ae2206 flexible-vlan-tagging\n     set interfaces fxp0 unit 0 family inet address 10.1.12.45/16\n     commit\n     exit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"cli",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57b9248b-e9ec-40a2-bba0-f4d4d8e1d59e",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "804c6eae-bafb-4d85-a7ff-e8ec56cf81e7",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"       pm.test(\"Validate result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    }); ",
											"    ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure subinterface with vlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe3d22cc-ddcc-4c6f-9bf4-413f87abe191",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a6766d3-9fe3-4d0e-aee9-7ed65a1df28f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:subinterface\": [\n        {\n            \"config\": {\n                \"enabled\": true,\n                \"index\": 4001\n            },\n            \"frinx-openconfig-vlan:vlan\": {\n                \"config\": {\n                    \"vlan-id\": 4094\n                }\n            },\n            \"index\": 4001\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/configuration/interfaces/interface/ae2206/subinterfaces/subinterface/4001",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"configuration",
										"interfaces",
										"interface",
										"ae2206",
										"subinterfaces",
										"subinterface",
										"4001"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "430b47ba-8d55-4bac-a297-76ae2c9ce2df",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate node-id\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync-from-network",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f28b321-9ea9-43c5-b38e-3167819891c9",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"pm.test(\"Validate configuration-status\", function() {",
											"  if ( \"node-sync-result\" in pm.response.json()[\"output\"][\"node-sync-results\"] ){",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-sync-results\"][\"node-sync-result\"][0]).to.not.have.own.property(\"error-type\");",
											"",
											"  }",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"    pm.test(\"Validate overall-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate diff",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0ab4907-6eab-4694-8928-d2594b51a911",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"  ",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Configuration and operational datastore is equal \", function() {",
											"  pm.expect(pm.response.json()[\"output\"]).to.not.have.property(\"node-with-diff\");",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
											"",
											"       pm.test(\"Validate node result\", function() {",
											"       ",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"     pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0]).to.not.have.any.keys('deleted-data','created-data','updated-data');",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                    \"node\": [\"{{node_id}}\"]\n                }\n            }\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:calculate-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:calculate-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "show subinterface with vlan-id",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1ce9905-3d3f-4f61-97db-be003ce276b0",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//index",
											"pm.test(\"Validate index = 4001\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:subinterface\"][0][\"index\"]).to.eql(4001);",
											"});",
											"//vlan-id",
											"pm.test(\"Validate vlan-id = 4094\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:subinterface\"][0][\"frinx-openconfig-vlan:vlan\"][\"config\"][\"vlan-id\"]).to.eql(4094);",
											"});",
											"//index",
											"pm.test(\"Validate config index = 4001\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:subinterface\"][0][\"config\"][\"index\"]).to.eql(4001);",
											"});",
											"//enabled",
											"pm.test(\"Validate enabled = true\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:subinterface\"][0][\"config\"][\"enabled\"]).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d1290d44-647e-41cb-87d1-2de2e8f76b2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig-interfaces:subinterface\": [\n        {\n            \"config\": {\n                \"enabled\": true,\n                \"index\": 4001\n            },\n            \"frinx-openconfig-vlan:vlan\": {\n                \"config\": {\n                    \"vlan-id\": 4094\n                }\n            },\n            \"index\": 4001\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/configuration/interfaces/interface/ae2206/subinterfaces/subinterface/4001",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"configuration",
										"interfaces",
										"interface",
										"ae2206",
										"subinterfaces",
										"subinterface",
										"4001"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config junos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56154e5a-0fa3-47f4-99a3-256a3f81ac15",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"load complete\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-495",
					"item": [
						{
							"name": "FRHD-495 BEFORE",
							"item": [
								{
									"name": "unmount 6.6.1 netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12dd8040-5871-4cdb-ae33-86c219534715",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount 6.6.1 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a174b6f4-1ff7-4028-8c67-ca4134a9e8aa",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount 6.2.3 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da1d63a9-81ab-4dbb-b2e4-cafe150fca3e",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"xr62"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount 6.6.1 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c4a1343-83b0-4f49-bb08-dd1d01ef779b",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.6.1 cli connected 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "946a6ec0-fc96-4597-b174-83c7ffb16da5",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.6.1 cli connected 1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "928ab191-ea0e-4ef9-a076-c93ccdd50fd8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.6.1 unified point exists 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70d936ee-2d92-4443-bfab-f5c058a6a8be",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( pm.response.code == 200){",
													"    tests[\"Mount point exists\"] = true",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Mount point exists\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.6.1 unified point exists 1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ade293e0-b041-4bde-9b3f-41684635b590",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount 6.2.3 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f4c3099-9eef-4f34-ac93-93fdc0518524",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"xr62\",\n      \"cli-topology:host\" : \"192.168.1.216\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"6.*\",\n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \"cli-topology:parsing-engine\": \"tree-parser\",\n      \"node-extension:reconcile\": false,\n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \"cli-topology:keepalive-timeout\": 480,\n      \"cli-topology:keepalive-initial-delay\": 60,\n      \"cli-topology:keepalive-delay\": 10\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"xr62"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.2.3 connected 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ae52043-1aec-4f75-9d96-3f6dc52554e4",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.2.3 connected 1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4de486f6-c042-4e90-a421-176d4fe23393",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"xr62"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.2.3 unified point exists 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "608ef41f-9d64-43fa-80d5-6dddd20148b4",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( pm.response.code == 200){",
													"    tests[\"Mount point exists\"] = true",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Mount point exists\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.2.3 unified point exists 1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ced16d18-8e06-4c7f-b671-f04c2316aa42",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/xr62/yang-ext:mount",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"xr62",
												"yang-ext:mount"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.2.3 uniconfig available 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e92b5fe-7e32-4b32-b2c5-adbb8ed17784",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.2.3 uniconfig available 1');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1f0e8e27-9aa1-4578-8015-07b04562d706",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/xr62/frinx-uniconfig-topology:configuration",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"xr62",
												"frinx-uniconfig-topology:configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "prerequisites xr6.6.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8f2e8fb-2eb6-41a0-aebe-99fc0d45de31",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ninterface Bundle-Ether801\n description kristina\n!\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"cli",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "prerequisites xr6.2.3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d35dd495-3b48-4bde-adac-c7afb6f3677c",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ninterface Bundle-Ether100\n description kristina\n!\ncommit\nend\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/cli/node/xr62/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"cli",
												"node",
												"xr62",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount 6.6.1 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ae78b06-c74c-45a3-bec1-bc2c9119dcae",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount 6.2.3 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff4be00b-3cdd-4a52-86ba-d5c02f76b9fd",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"xr62"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount 6.2.3 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7648b27b-4a7e-41a6-a5c4-a7a496534b64",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"xr62\",\n      \"cli-topology:host\" : \"192.168.1.216\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"6.*\",\n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \"cli-topology:parsing-engine\": \"tree-parser\",\n      \"node-extension:reconcile\": false,\n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \"cli-topology:keepalive-timeout\": 480,\n      \"cli-topology:keepalive-initial-delay\": 60,\n      \"cli-topology:keepalive-delay\": 10\n    }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"xr62"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.2.3 connected 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bce10a6-92e8-42fb-9964-419a6b09cea5",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.2.3 connected 2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b2e612c9-e8ad-4156-bf2d-5ba6282d6093",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"xr62"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.2.3 unified point exists 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "368de577-8057-4242-8ed7-13f309bd164a",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( pm.response.code == 200){",
													"    tests[\"Mount point exists\"] = true",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Mount point exists\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.2.3 unified point exists 2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ecee8944-4e7c-4201-a4a2-b2c7ca4a0333",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/xr62/yang-ext:mount",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"xr62",
												"yang-ext:mount"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.2.3 uniconfig available 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a884bba-ccac-4950-8a4c-d8572c9c2667",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (pm.response.code === 200) {",
													"    tests[\"Is connected\"] = true;",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.2.3 uniconfig available 2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ede64b1-e916-4d74-aee4-a620ab73b279",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/xr62/frinx-uniconfig-topology:configuration",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"xr62",
												"frinx-uniconfig-topology:configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount 6.6.1 netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4b97b72-2ef4-4201-a6b7-381eef849082",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": 22,\n      \"netconf-node-topology:keepalive-delay\": 55,\n      \"netconf-node-topology:connection-timeout-millis\": 30000,\n      \"netconf-node-topology:default-request-timeout-millis\": 30000,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"cisco\",\n      \"netconf-node-topology:password\": \"ciscocisco\",\n      \"node-extension:reconcile\": false\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.6.1 netconf connected 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c3d2bf1-ad60-4212-ae96-0d04b3b9f28f",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.6.1 netconf connected 2');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac1d607a-fd91-4491-84fe-f2efab3ce71b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.6.1 unified point exists 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0065bb85-7031-4248-a4c0-6e3cc992fa22",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if ( pm.response.code == 200){",
													"    tests[\"Mount point exists\"] = true",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"    ",
													"    pm.test(\"Interface container exists\", function () {",
													"         pm.expect(pm.response.json()).to.have.any.keys('frinx-openconfig-interfaces:interfaces'); ",
													"    });",
													"",
													"",
													"",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Mount point exists\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.6.1 unified point exists 2');",
													"    }",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f270dfe2-c88f-4caf-aafb-2eb29ee0a04d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT on 6.2.3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b4bb938-2164-4952-ba9e-794bf7543649",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "680f47a2-1fa5-4fc7-8917-2e42b530f059",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"frinx-openconfig-interfaces:subinterface\": [\n    {\n      \"index\": 150,\n      \"config\": {\n        \"index\": 150,\n        \"name\": \"Bundle-Ether100.150\",\n        \"enabled\": true,\n        \"description\": \"D3000000001\"\n      }\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/xr62/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/Bundle-Ether100/subinterfaces/subinterface/150",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"xr62",
												"frinx-uniconfig-topology:configuration",
												"frinx-openconfig-interfaces:interfaces",
												"interface",
												"Bundle-Ether100",
												"subinterfaces",
												"subinterface",
												"150"
											]
										}
									},
									"response": []
								},
								{
									"name": "PUT on 6.6.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1dc1e528-e9f7-4679-a6d9-5fd2bb1a2d3d",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4=",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-interfaces:subinterface\": [\n        {\n            \"config\": {\n                \"description\": \"NEEEEEENNNEEE\",\n                \"enabled\": true,\n                \"index\": 1401,\n                \"name\": \"Bundle-Ether801.1401\"\n            },\n            \"index\": 1401\n        }\n    ]\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/configuration/interfaces/interface/Bundle-Ether801/subinterfaces/subinterface/1401",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"uniconfig",
												"node",
												"{{node_id}}",
												"configuration",
												"interfaces",
												"interface",
												"Bundle-Ether801",
												"subinterfaces",
												"subinterface",
												"1401"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FRHD-495 AFTER",
							"item": [
								{
									"name": "commit 6.2.3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3b21648-751e-4e79-a884-909e80f058eb",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(\"xr62\");",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(\"xr62\");",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"xr62\"]\n                }\n            }\n        }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "commit 6.6.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45ea9a9b-d6eb-4c04-88ab-c71d0057fa73",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
													"",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}",
													"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\"){",
													"    pm.test(\"Validate overall-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate node-id\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"type": "text",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"{{node_id}}\"]\n                }\n            }\n        }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"uniconfig-manager:commit"
											]
										}
									},
									"response": []
								},
								{
									"name": "mount 6.6.1 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0026fc15-b65a-40cf-85a4-fdad457635ed",
												"exec": [
													"console.log(\"Request data: \" + request.data.toString());",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check 6.6.1 cli connected 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a7830e8-b605-4431-a3b7-5cd5b2560910",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"// attempts counter",
													"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
													"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
													"    // Reset attempt counter",
													"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"} else {",
													"    // If too many attempts, abort",
													"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
													"        console.log(\"Not connected yet ! Too many attempts !\")",
													"        // Reset attempt counter",
													"        tests[\"Unable to connect\"] = false",
													"    } else {",
													"        // Schedule next check attempt",
													"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
													"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
													"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
													"        postman.setNextRequest('check 6.6.1 cli connected 3');",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c80f35b8-75b2-4d19-bcee-e883785c1de9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operational",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "restore empty config 6.6.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Config replaced\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
													"});"
												],
												"id": "00e88c45-d3cf-4391-b34e-824153b37412"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "restore empty config 6.2.3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9c8fbb3-c784-46e1-9340-8b34a97e5552",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Success\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Config replaced\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
													"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62/yang-ext:mount/cli-unit-generic:execute-and-read",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"operations",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"xr62",
												"yang-ext:mount",
												"cli-unit-generic:execute-and-read"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount 6.2.3 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40162cf4-0000-4b10-b44d-887af1accf3c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/xr62",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"xr62"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount 6.6.1 cli",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bb36f9c-c208-439e-b2e0-9c6796cdd978",
												"exec": [
													"pm.test(\"Status code 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_cli}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "unmount 6.6.1 netconf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23c434ba-c7af-424f-9e10-6bcc50d456c3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
											"protocol": "http",
											"host": [
												"{{odl_ip}}"
											],
											"port": "8181",
											"path": [
												"restconf",
												"config",
												"network-topology:network-topology",
												"topology",
												"{{topology_id_netconf}}",
												"node",
												"{{node_id}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Mounting devices IOS XR 6.2.3 and 6.6.1 through netconf",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9364bba-fa52-4118-b48f-4b8c6d1cb424",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7e90c17d-43e3-414b-8dc2-4b34556701e1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-527",
					"item": [
						{
							"name": "prerequisites",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf95bc4a-0127-441c-a259-514498487613",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Configured data\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"interface Bundle-Ether102\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.contain(\"description 102-150\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" :\"conf t\ninterface Bundle-Ether102\n!\ninterface Bundle-Ether102.150\n description 102-150\n!\ncommit\nend\n\t\"}\n }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"id": "19434b92-2ba1-4b96-a140-56d8ff5d24c5"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68f47d89-b95b-41ba-8c8c-d85dbae53ea4",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a5c860d-e169-476f-be23-2e67ad13357b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e39df475-f23e-4535-a1ff-d419783d53d9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2568bdb2-8521-4fc7-8170-984253071425",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check unified');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "08aee69b-3464-4a65-8629-b01ed08ea826",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c42d509f-f30b-4428-8a22-b44a5e6e4c9f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "09d9589b-8039-4dfb-b38f-07bae0eac54d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "check LACP",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc160408-34c7-4aac-9293-a68fb526781f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"//interval",
											"pm.test(\"Validate interval = \" + pm.environment.get(\"lacp_interval_slow\"), function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"][0][\"config\"][\"interval\"]).to.eql(pm.environment.get(\"lacp_interval_slow\"));",
											"});",
											"var output = pm.response.json()[\"frinx-openconfig-lacp:lacp\"][\"interfaces\"][\"interface\"]",
											"",
											"pm.test(\"Validate removed subinterface = Bundle-Ether102.150 \", function() {",
											"",
											"  pm.expect(output.length).to.equal(1);",
											"",
											"  pm.expect(output[0][\"name\"]).to.equal(\"Bundle-Ether102\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f3bd58c8-07a8-42ed-9d82-68edfad1a23a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/configuration/lacp",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"configuration",
										"lacp"
									]
								}
							},
							"response": []
						},
						{
							"name": "clean configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"id": "0d6eb1e3-b4c5-4543-aa49-10064d059b20"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26fea5b6-9edc-472a-acd7-118d95c2ee69",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4fc76889-881d-4be9-87ab-2538bd96191a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UNI-1046",
					"item": [
						{
							"name": "install uniconfig enabled false Junos netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be6615fb-7b78-4930-8639-21a0daa1a15c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"success\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"junos1046\",\n      \"netconf-node-topology:host\": \"{{junos_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n      \"netconf-node-topology:dry-run-journal-size\": 100,\n      \"uniconfig-config:uniconfig-native-enabled\": true,\n      \"uniconfig-config:install-uniconfig-node-enabled\": false\n\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=junos1046",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node=junos1046"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "176d3ebe-f31f-430b-90a2-12f616dbe4c2",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check if connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e21068f-c9b0-4cac-adea-09f310630c0f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=junos1046",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node=junos1046"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if unified mount point not exists netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b484bb8-6b44-4005-81ab-718b057c7637",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a5de9dbc-401f-49a8-833c-3df275038cad",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node=junos1046/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id}}",
										"node=junos1046",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if uniconfig not available netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c09e1a14-6be0-4c20-8875-26c45199e541",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2172df46-212c-40be-b2a6-ddf4aef3a087",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos1046/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=junos1046",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "uninstall uniconfig enabled false Junos netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "438bb164-071f-4df7-8e24-4241e68a184d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"success\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=junos1046",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_netconf}}",
										"node=junos1046"
									]
								}
							},
							"response": []
						},
						{
							"name": "install uniconfig enabled false Junos cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "164538eb-388d-4f61-9bdd-91808b2208a3",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"success\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"junos10462\",\n      \n      \"cli-topology:host\" : \"{{junos_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"junos\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"uniconfig-config:uniconfig-native-enabled\": true,\n      \"uniconfig-config:install-uniconfig-node-enabled\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=junos10462",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=junos10462"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if cli connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e725ebc-e69d-45f1-a18a-f6a7e5445c59",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check if cli connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f652590-9ca1-4e68-88b9-e989e196f285",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=junos10462",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=junos10462"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if unified mount point not exists cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77f5a542-d771-4a22-9065-cd542cd9b77b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fae68c0-5962-480d-95c2-d05c6095b9dd",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node=junos10462/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id}}",
										"node=junos10462",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "check if uniconfig not available cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a393b3c2-846d-4757-8cfb-ab48e1c4a4cf",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d53d345d-807c-4a52-be1c-bb47d95ce0db",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=junos10462/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=junos10462",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "uninstall uniconfig enabled false Junos cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bfa0a50-6f3d-4b26-a7f9-717ab8147d42",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"success\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=junos10462",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=junos10462"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "FRHD-510",
					"item": [
						{
							"name": "unmount xrv6.2.3 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5082f424-3f01-4bcb-98ce-757476b1dbaa",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount xrv6.2.3 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d319ca2-6e8e-4848-bf65-73c83a7c04fb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount xrv6.2.3 netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d3c4696-4bea-4d70-9a5a-b68c4d685377",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xrv6.2.3uc status connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cbc76a3-395d-42eb-87eb-4eea9310a50a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xrv6.2.3uc status connected');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6af7f029-30ef-4eb1-a69c-c7fd75c8f893",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xrv6.2.3uc unified point exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1b67f77-f3a8-4c91-b3f2-cbaa22785b50",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if ( pm.response.code == 200){",
											"    tests[\"Mount point exists\"] = true",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Mount point exists\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xrv6.2.3uc unified point exists');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb27c47e-2460-4ea7-9b6f-0e8ac929a1a6",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id}}/node/{{node_id}}/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount xrv6.2.3 cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d522023-7533-4b7a-ab75-2eac97ddc6c5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false\n    }\n  }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xrv6.2.3 status connected CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac9d7400-e13e-41f3-868b-3f6690d93586",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xrv6.2.3 status connected CLI');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ea111b9-89e0-4052-936b-a0be359a6592",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check xrv6.2.3 uniconfig available",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d224785-5abb-4640-9149-26054ea65f6c",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check xrv6.2.3 uniconfig available');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b87f54c-00dc-43c4-86ee-c6055e22e81a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty config before",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9b3b6dc7-a22a-4e2c-a56e-6ce563f07d1a",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "full configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01c32ebf-fb32-42f5-9d21-736b9a0b237b",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config placed\", function() {",
											" pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"conf t\");",
											" pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"logging buffered 10000000\");",
											" pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"logging facility local5\");",
											" pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"logging 221.111.51.134 vrf default severity info\");",
											" pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"logging 221.111.79.127 vrf default severity info\");",
											" pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"logging 221.111.79.127 vrf default severity info\");",
											" pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"commit\");",
											" });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bb6c1f85-dd64-4f74-ad34-7eb9677390b8",
										"exec": [
											"postman.setEnvironmentVariable(\"response_time\",0)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nhostname xr623\nlogging trap debugging\nlogging console disable\nlogging buffered 10000000\nlogging buffered debugging\nlogging facility local5\nlogging 221.111.4.81 vrf default severity info\nlogging 221.111.4.82 vrf default severity info\nlogging 221.111.51.134 vrf default severity info\nlogging 221.111.51.215 vrf default severity info\nlogging 221.111.79.127 vrf default severity info\nlogging 219.188.193.107 vrf default severity info\nlogging 219.188.193.108 vrf default severity info\nlogging suppress rule MMAP_PEER_CONNECT\n alarm OS MMAP_PEER CONNECT\n!\nlogging suppress apply rule MMAP_PEER_CONNECT\n all-of-router\n!\nlogging source-interface Loopback0\nservice timestamps log datetime localtime msec show-timezone year\nservice timestamps debug datetime localtime msec show-timezone year\ndomain lookup disable\ntelnet vrf Mgmt-intf ipv4 server max-servers 20\ncinetd rate-limit 20\nradius source-interface Loopback0 vrf default\nradius-server host 219.188.193.56 auth-port 1812 acct-port 1813\n key 7 06070831415C071F00181A0F0E0D253E23\n!\nhostname xr623\nusername cisco\n group root-lr\n group cisco-support\n secret 5 $1$claD$2AZTrU4EIBlUg6yMUHBc7/\n!\ncall-home\n service active\n contact smart-licensing\n profile CiscoTAC-1\n  active\n  destination transport-method http\n !\n!\nvrf iups\n!\nsnmp-server ifindex persist\nsnmp-server ifmib stats cache\nsnmp-server host 221.111.51.93 traps grugru\nsnmp-server host 221.111.51.106 traps grugru\nsnmp-server host 221.111.51.222 traps grugru\nsnmp-server host 221.111.79.85 traps grugru\nsnmp-server community grugru RO IPv4 61\nsnmp-server community public RO\nsnmp-server traps rf\nsnmp-server traps bfd\nsnmp-server traps ntp\nsnmp-server traps snmp\nsnmp-server traps snmp linkup\nsnmp-server traps snmp linkdown\nsnmp-server traps snmp coldstart\nsnmp-server traps snmp warmstart\nsnmp-server traps flash removal\nsnmp-server traps flash insertion\nsnmp-server traps entity\nsnmp-server traps system\nsnmp-server trap-source Loopback0\nipv4 conflict-policy static\nipv6 conflict-policy static\nntp\n server 219.188.200.128\n access-group ipv4 peer 68\n access-group ipv6 peer 68\n source Loopback0\n update-calendar\n!\nbfd\n bundle coexistence bob-blb logical\n!\nconfiguration display interface slot-order\ncall-home\n service active\n contact smart-licensing\n profile CiscoTAC-1\n  active\n  destination transport-method http\n !\n!\ncontrol-plane\n management-plane\n  inband\n   interface all\n    allow all\n   !\n  !\n !\n!\nexception choice 1 filepath harddisk:\nipv4 virtual address 10.222.182.150/24\nipv6 access-list 65\n 10 deny ipv6 any any\n!\nipv6 access-list 68\n 10 permit ipv6 host 2400:2020:40:fff::1 any\n 20 permit ipv6 host 2400:2020:40:fff::2 any\n!\nipv4 access-list 190\n 10 deny ipv4 10.0.0.0/8 any\n!\nipv4 access-list BFD\n 10 permit udp any any eq 3784\n!\nipv4 access-list Ingress_Acl\n 10 permit ipv4 any any\n!\ninterface Bundle-Ether100\n!\ninterface Bundle-Ether100.150\n description D3000000001\n ipv4 address 1.1.1.1 255.255.255.252\n arp timeout 300\n load-interval 30\n encapsulation dot1q 150\n!\ninterface Bundle-Ether1234\n!\ninterface Bundle-Ether1234.3504\n description TEST_OD\n service-policy input REWRITE_TOS2_in\n service-policy output 100M_PolicyName\n ipv4 address 192.168.10.10 255.255.255.252\n arp timeout 300\n load-interval 30\n encapsulation dot1q 3504\n ipv4 access-group Ingress_Acl ingress\n ipv4 access-group 190 egress\n!\ninterface Bundle-Ether1311\n!\ninterface Bundle-Ether3133\n service-policy input POL_INGRESS\n service-policy output POL_EGRESS\n!\ninterface Bundle-Ether3133.1\n encapsulation dot1q 100\n ipv4 access-group Ingress_Acl ingress\n ipv4 access-group BFD egress\n!\ninterface Bundle-Ether3133.150\n description aaa--001\n!\ninterface Bundle-Ether3133.159\n description D3000000001\n ipv4 address 1.1.1.1 255.255.255.252\n arp timeout 300\n load-interval 30\n encapsulation dot1q 159\n!\ninterface Bundle-Ether3133.160\n description D3000000001\n ipv4 address 1.1.1.1 255.255.255.252\n arp timeout 300\n load-interval 30\n encapsulation dot1q 160\n!\ninterface MgmtEth0/RP0/CPU0/0\n ipv4 address {{xr_ip}} 255.255.255.0\n!\ninterface GigabitEthernet0/0/0/0\n shutdown\n!\nroute-policy POL_EGRESS\n  done\nend-policy\n!\nroute-policy POL_INGRESS\n  done\nend-policy\n!\nrouter isis 300\n interface Bundle-Ether3133\n !\n!\nrouter ospf 100\n!\nrouter bgp 17676\n address-family ipv4 unicast\n  network 10.1.1.0/30\n  network 11.1.1.0/30\n  network 100.0.100.0/24\n !\n!\nnetconf-yang agent\n ssh\n!\nssh server v2\nssh server rate-limit 180\ncommit\nend\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "check netconf layer performance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69069f4d-d002-4c99-beb5-9c2103e257cb",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"console.log(\"ResponseTime: \" + pm.response.responseTime)",
											"var time = pm.response.responseTime",
											"pm.test(\"Response Time should be less than 300 [ms]\", function (){",
											"  if(time > 300){",
											"    tests[\"Time limit, request take longer than expected\"] = false",
											"",
											"  }",
											"  else{",
											"    postman.setEnvironmentVariable(\"response_time\",pm.response.responseTime)",
											"    tests[\"Time limit is OK\"] = true",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}/yang-ext:mount/Cisco-IOS-XR-ifmgr-oper:interface-properties",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"Cisco-IOS-XR-ifmgr-oper:interface-properties"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified performance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d0467e7-16ec-459c-a2f9-73df4a072442",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"console.log(\"ResponseTime: \" + pm.response.responseTime)",
											"var time = pm.response.responseTime",
											"pm.test(\"Response Time is less than \"+(parseInt(postman.getEnvironmentVariable(\"response_time\"))*8)+\" [ms]\", function (){",
											"  if(time > (parseInt(postman.getEnvironmentVariable(\"response_time\"))*25)){",
											"    tests[\"Time limit must be under \"+(parseInt(postman.getEnvironmentVariable(\"response_time\"))*8)+\", request take longer than expected\"] = false",
											"  }",
											"  else{",
											"    tests[\"Time limit is OK\"] = true",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unified interfaces performance",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "704aa2af-c5aa-4112-8160-40bb8e18032d",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"console.log(\"ResponseTime: \" + pm.response.responseTime)",
											"var time = pm.response.responseTime",
											"pm.test(\"Response Time should be less than \"+postman.getEnvironmentVariable(\"response_time\")+\" [ms]\", function (){",
											"  if(time > (parseInt(postman.getEnvironmentVariable(\"response_time\"))*8)){",
											"    tests[\"Time limit, request take longer than expected\"] = false",
											"  }",
											"  else{",
											"    tests[\"Time limit is OK\"] = true",
											"  }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/unified/node/{{node_id}}/yang-ext:mount/frinx-openconfig-interfaces:interfaces",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"unified",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"frinx-openconfig-interfaces:interfaces"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty config after",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e08c69d2-ab8c-4e80-852e-2b6f6247dacf",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_cli}}",
										"node",
										"{{node_id}}",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0f0e0e1b-8b48-4b58-9b2c-2ecd508a530b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "7cd9f3e6-825c-4cc2-bb0c-2123ed0d7c36",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2a4220ca-1958-4812-a171-c41200a6c5b8",
			"key": "counter",
			"value": "0",
			"type": "string"
		},
		{
			"id": "94c969c2-2787-4436-84f1-2a2fd5868b2c",
			"key": "waitTime",
			"value": "3000",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}