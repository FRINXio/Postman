{
	"info": {
		"_postman_id": "70a6d283-9f4c-4d31-85e0-411d6e9ea071",
		"name": "pc_uniconfig_rp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR5 RP CRUD",
			"description": null,
			"item": [
				{
					"name": "XR5 RP CRUD Setup",
					"description": null,
					"item": [
						{
							"name": "create prefix-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"prefix-set\": [\n            {\n                \"name\": \"{{rp_prefix_set}}\",\n                \"prefixes\": {\n                    \"prefix\": [\n                        {\n                            \"ip-prefix\": \"dddd:aaaa::/76\",\n                            \"masklength-range\": \"4..88\",\n                            \"config\": {\n                                \"masklength-range\": \"4..88\",\n                                \"ip-prefix\": \"dddd:aaaa::/76\"\n                            }\n                        },\n                        {\n                            \"ip-prefix\": \"1.2.3.4/4\",\n                            \"masklength-range\": \"5..5\",\n                            \"config\": {\n                                \"masklength-range\": \"5..5\",\n                                \"ip-prefix\": \"1.2.3.4/4\"\n                            }\n                        }\n                    ]\n                },\n                \"config\": {\n                    \"name\": \"{{rp_prefix_set}}\"\n                }\n            }\n        ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets/prefix-set/{{rp_prefix_set}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"prefix-sets",
										"prefix-set",
										"{{rp_prefix_set}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create community-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"community-set\": [\n            {\n                \"community-set-name\": \"{{rp_community_set}}\",\n                \"config\": {\n                    \"community-set-name\": \"{{rp_community_set}}\"\n                }\n            }\n        ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets/community-set/{{rp_community_set}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"community-sets",
										"community-set",
										"{{rp_community_set}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create as-path",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n        \"as-path-set\": [\n            {\n                \"as-path-set-name\": \"{{rp_as_path}}\",\n                \"config\": {\n                    \"as-path-set-member\": [\n                        \"ios-regex '*'\",\n                        \"originates-from '3243'\",\n                        \"length eq 444\",\n                        \"unique-length eq 44\",\n                        \"neighbor-is '1.1'\",\n                        \"passes-through '54'\"\n                    ],\n                    \"as-path-set-name\": \"{{rp_as_path}}\"\n                }\n            }\n       ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets/as-path-set/{{rp_as_path}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"as-path-sets",
										"as-path-set",
										"{{rp_as_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit rp setup",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate prefix-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate prefix-set length\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate nr of prefixes\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"][\"prefix-set\"][0][\"prefixes\"][\"prefix\"].length).to.eql(2);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"prefix-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate community-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate community-set-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:community-sets\"][\"community-set\"][0][\"config\"][\"community-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
											"});",
											"pm.test(\"Validate community-set-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:community-sets\"][\"community-set\"][0][\"community-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"community-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate as-path",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of as-paths\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate as-path-set-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"as-path-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
											"});",
											"pm.test(\"Validate as-path-set-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-name\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
											"});",
											"pm.test(\"Validate ios-regex\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][0]).to.eql(\"ios-regex '*'\");",
											"});",
											"pm.test(\"Validate originates-from\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][1]).to.eql(\"originates-from '3243'\");",
											"});",
											"pm.test(\"Validate length eq 444\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][2]).to.eql(\"length eq 444\");",
											"});",
											"pm.test(\"Validate unique-length eq 44\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][3]).to.eql(\"unique-length eq 44\");",
											"});",
											"pm.test(\"Validate neighbor-is '1.1'\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][4]).to.eql(\"neighbor-is '1.1'\");",
											"});",
											"pm.test(\"Validate passes-through '54'\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"][\"as-path-set\"][0][\"config\"][\"as-path-set-member\"][5]).to.eql(\"passes-through '54'\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"as-path-sets"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 RP CRUD Teardown",
					"description": null,
					"item": [
						{
							"name": "delete prefix-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets/prefix-set/{{rp_prefix_set}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"prefix-sets",
										"prefix-set",
										"{{rp_prefix_set}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete community-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets/community-set/{{rp_community_set}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"community-sets",
										"community-set",
										"{{rp_community_set}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete as-path",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets/as-path-set/{{rp_as_path}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"as-path-sets",
										"as-path-set",
										"{{rp_as_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "commit rp teardown",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate no prefix-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404 or 200\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if ( pm.response.code === 200 ) {",
											"    pm.test(\"no prefix sets present\", function() {",
											"        pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:prefix-sets\"]).to.eql(JSON.parse(\"{}\"))",
											"    });",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/prefix-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"prefix-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate no community-set",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404 or 200\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if ( pm.response.code === 200 ) {",
											"    pm.test(\"no community sets present\", function() {",
											"        pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:community-sets\"]).to.eql(JSON.parse(\"{}\"))",
											"    });",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/community-sets",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"community-sets"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate no as-path",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404 or 200\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if ( pm.response.code === 200 ) {",
											"    pm.test(\"no as-path sets present\", function() {",
											"        pm.expect(pm.response.json()[\"frinx-openconfig-bgp-policy:as-path-sets\"]).to.eql(JSON.parse(\"{}\"))",
											"    });",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/defined-sets/frinx-openconfig-bgp-policy:bgp-defined-sets/as-path-sets/",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"defined-sets",
										"frinx-openconfig-bgp-policy:bgp-defined-sets",
										"as-path-sets",
										""
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"description": null,
			"item": [
				{
					"name": "RP CRUD",
					"description": null,
					"item": [
						{
							"name": "create rouring policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n            \"statements\": {\n                \"statement\": [\n                    {\n                        \"name\": \"1\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"{{rp_prefix_set}}\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"1\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"REJECT_ROUTE\"\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"2\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"{{rp_community_set}}\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"2\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-as-path-prepend\": {\n                                    \"config\": {\n                                        \"repeat-n\": 3,\n                                        \"asn\": 123\n                                    }\n                                },\n                                \"config\": {\n                                    \"set-med\": 1\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"3\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"{{rp_prefix_set}}\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-as-path-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"as-path-set\": \"{{rp_as_path}}\"\n                                    }\n                                }\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"3\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 2\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"4\",\n                        \"config\": {\n                            \"name\": \"4\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"config\": {\n                                    \"set-med\": 3\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "feb53157-1873-4ef0-98df-ed41f61c6a79",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains  if destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains    drop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   drop\");",
											"    });",
											"    pm.test('dryrun - contains    set med 2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set med 2\");",
											"    });",
											"    pm.test('dryrun - contains  set med 3', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" set med 3\");",
											"    });",
											"    pm.test('dryrun - contains  elseif as-path in as_path_1 and destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif as-path in as_path_1 and destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains    set med 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set med 1\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any community_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any community_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains  done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" done\");",
											"    });",
											"    pm.test('dryrun - contains    done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   done\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "13a5fed1-66ce-4276-b3bb-9501fa87a633",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy creation",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(4);",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(1);",
											"});",
											"pm.test(\"Validate repeat-n\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(3);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(123);",
											"});",
											"pm.test(\"Validate as-path-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate set-med\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][3][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"config\"][\"set-med\"]).to.eql(3);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update1 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n          \"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"ACCEPT_ROUTE\"\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update1 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f2ab82a-f1c8-47a8-88c4-cb5b9d4e6b60",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains  done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" done\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1740b061-a410-456e-948b-0b1633fd7be9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update1 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated1",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update2 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\t\"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                    \"set-as-path-prepend\": {\n                                        \"config\": {\n                                            \"repeat-n\": 2,\n                                            \"asn\": 23\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update2 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efce2519-f705-4395-8dfd-01e6f7faa1fe",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e1f057ec-4685-476e-9498-de775bc95505",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update2 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated2",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate repeat-n\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"repeat-n\"]).to.eql(2);",
											"});",
											"pm.test(\"Validate asn\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-as-path-prepend\"][\"config\"][\"asn\"]).to.eql(23);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update3 rouring policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"match-prefix-set\": {\n                                    \"config\": {\n                                        \"prefix-set\": \"{{rp_prefix_set}}\",\n                                        \"match-set-options\": \"ANY\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        },\n                        {\n                            \"name\": \"2\",\n                            \"config\": {\n                                \"name\": \"2\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"ACCEPT_ROUTE\"\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update3 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1394973-44d1-4f2a-a0ca-97be3a23dc07",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains  if destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains    drop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   drop\");",
											"    });",
											"    pm.test('dryrun - contains  done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" done\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fb675601-6d75-4614-9ebc-3a8b69fe62be",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update3 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated3",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(2);",
											"});",
											"",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update4 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n\t\t\t\t\"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 44,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_LE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update4 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0654ca71-74a5-4300-b185-2b00dd355b2f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains    drop', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   drop\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains  if as-path length le 44 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if as-path length le 44 then\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d3d7b447-a036-45c9-ae71-840ed12fca82",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update4 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated4",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"REJECT_ROUTE\");",
											"});",
											"",
											"pm.test(\"Validate operator\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"operator\"]).to.eql(\"frinx-openconfig-policy-types:ATTRIBUTE_LE\");",
											"});",
											"pm.test(\"Validate value\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"as-path-length\"][\"config\"][\"value\"]).to.eql(44);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "update5 routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"{{rp_policy}}\",\n            \"config\": {\n                \"name\": \"{{rp_policy}}\"\n            },\n            \"statements\": {\n                \"statement\": [\n                    {\n                        \"name\": \"1\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"{{rp_prefix_set}}\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"{{rp_community_set}}\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"1\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"1:1\"\n                                            ]\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"2\",\n                        \"conditions\": {\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-community-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"community-set\": \"{{rp_community_set}}\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"2\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"44:1\",\n                                                \"44:41\",\n                                                \"442:4\",\n                                                \"44:43\",\n                                                \"44:7\",\n                                                \"441:4\",\n                                                \"44:2\"\n                                            ]\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    {\n                        \"name\": \"3\",\n                        \"conditions\": {\n                            \"match-prefix-set\": {\n                                \"config\": {\n                                    \"prefix-set\": \"{{rp_prefix_set}}\",\n                                    \"match-set-options\": \"ANY\"\n                                }\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                \"match-as-path-set\": {\n                                    \"config\": {\n                                        \"match-set-options\": \"ANY\",\n                                        \"as-path-set\": \"{{rp_as_path}}\"\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"call-policy\": \"route_policy_TMP2\"\n                            }\n                        },\n                        \"config\": {\n                            \"name\": \"3\"\n                        },\n                        \"actions\": {\n                            \"config\": {\n                                \"policy-result\": \"ACCEPT_ROUTE\"\n                            },\n                            \"frinx-openconfig-bgp-policy:bgp-actions\": {\n                                \"set-community\": {\n                                    \"config\": {\n                                        \"options\": \"ADD\",\n                                        \"method\": \"INLINE\"\n                                    },\n                                    \"inline\": {\n                                        \"config\": {\n                                            \"communities\": [\n                                                \"44:4\",\n                                                \"1:1\"\n                                            ]\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update5 dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f87435a3-3764-484f-8362-2a3b5af62686",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)         ",
											"        ",
											"pm.test(\"Status code is 200\", function () {         ",
											"    pm.response.to.have.status(200);",
											"});",
											"        ",
											"pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"    pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"        ",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"       pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"        ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"        ",
											"    pm.test('dryrun - contains    apply route_policy_TMP2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   apply route_policy_TMP2\");",
											"    });",
											"    pm.test('dryrun - contains    set community (44:4, 1:1) additive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set community (44:4, 1:1) additive\");",
											"    });",
											"    pm.test('dryrun - contains  if community matches-any community_set_1 and destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" if community matches-any community_set_1 and destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif as-path in as_path_1 and destination in prefix_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif as-path in as_path_1 and destination in prefix_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains  elseif community matches-any community_set_1 then', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\" elseif community matches-any community_set_1 then\");",
											"    });",
											"    pm.test('dryrun - contains    done', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   done\");",
											"    });",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains    set community (44:4, 44:1, 44:41, 442:4, 44:43, 44:7, 441:4, 44:2) additive', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"   set community (44:4, 44:1, 44:41, 442:4, 44:43, 44:7, 441:4, 44:2) additive\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e5e83f80-e189-4046-ac7e-eac8fb8a3449",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "update5 commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy updated5",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Number of routing policies\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"].length).to.eql(1);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"rp_policy\"));",
											"});",
											"pm.test(\"Validate number of statements\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"].length).to.eql(3);",
											"});",
											"",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"name\"]).to.eql(\"1\");",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"config\"][\"name\"]).to.eql(\"1\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"]).to.eql([\"44:4\",\"1:1\"]);",
											"});",
											"",
											"pm.test(\"Validate options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
											"});",
											"pm.test(\"Validate method\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][0][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											"",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"config\"][\"name\"]).to.eql(\"2\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate community-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-community-set\"][\"config\"][\"community-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_community_set\"));",
											"});",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][1][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"]).to.eql([\"44:4\",\"44:1\",\"44:41\",\"442:4\",\"44:43\",\"44:7\",\"441:4\",\"44:2\"]);",
											"});",
											"",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"name\"]).to.eql(\"3\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"config\"][\"name\"]).to.eql(\"3\");",
											"});",
											"pm.test(\"Validate call-policy\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"config\"][\"call-policy\"]).to.eql(\"route_policy_TMP2\");",
											"});",
											"pm.test(\"Validate as-path-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"as-path-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_as_path\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"frinx-openconfig-bgp-policy:bgp-conditions\"][\"match-as-path-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"pm.test(\"Validate prefix-set\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"prefix-set\"]).to.eql(postman.getEnvironmentVariable(\"rp_prefix_set\"));",
											"});",
											"pm.test(\"Validate match-set-options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"conditions\"][\"match-prefix-set\"][\"config\"][\"match-set-options\"]).to.eql(\"ANY\");",
											"});",
											"",
											"pm.test(\"Validate policy-result\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"config\"][\"policy-result\"]).to.eql(\"ACCEPT_ROUTE\");",
											"});",
											"pm.test(\"Validate \", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"inline\"][\"config\"][\"communities\"]).to.eql([\"44:4\",\"1:1\"]);",
											"});",
											"",
											"pm.test(\"Validate options\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"options\"]).to.eql(\"ADD\");",
											"});",
											"pm.test(\"Validate method\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"][\"policy-definition\"][0][\"statements\"][\"statement\"][2][\"actions\"][\"frinx-openconfig-bgp-policy:bgp-actions\"][\"set-community\"][\"config\"][\"method\"]).to.eql(\"INLINE\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove routing policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"policy-definition\": [\n        {\n            \"name\": \"route_policy_3\",\n            \"config\": {\n                \"name\": \"route_policy_3\"\n            },\n\t\t\t\t\"statements\": {\n                    \"statement\": [\n                        {\n                            \"name\": \"1\",\n                            \"conditions\": {\n                                \"frinx-openconfig-bgp-policy:bgp-conditions\": {\n                                    \"as-path-length\": {\n                                        \"config\": {\n                                            \"value\": 44,\n                                            \"operator\": \"frinx-openconfig-policy-types:ATTRIBUTE_LE\"\n                                        }\n                                    }\n                                }\n                            },\n                            \"config\": {\n                                \"name\": \"1\"\n                            },\n                            \"actions\": {\n                                \"config\": {\n                                    \"policy-result\": \"REJECT_ROUTE\"\n                                }\n                            }\n                        }\n                    ]\n                }\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions/policy-definition/{{rp_policy}}",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions",
										"policy-definition",
										"{{rp_policy}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "711f27c2-e33d-4f93-97bd-87a5e733b432",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"route-policy policy_1\");",
											"    });",
											"    pm.test('dryrun - contains no route-policy policy_1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no route-policy policy_1\");",
											"    });",
											"} else {",
											"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
											"}",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3a0fbb0c-e2af-4e87-aa04-d8e5c5162ba2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"dryrun-manager:dryrun-commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"uniconfig-manager:commit"
									]
								}
							},
							"response": []
						},
						{
							"name": "validate route policy removed",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404 or 200\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
											"});",
											"",
											"if ( pm.response.code === 200 ) {",
											"    pm.test(\"no routing policies present\", function() {",
											"        pm.expect(pm.response.json()[\"frinx-openconfig-routing-policy:policy-definitions\"]).to.eql(JSON.parse(\"{}\"))",
											"    });",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    <vrf xmlns=\"urn:opendaylight:params:xml:ns:yang:ios-cli\">\n        <id>2</id>\n        <address-type>random</address-type>\n        <unicast>no</unicast>\n    </vrf>"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-routing-policy:routing-policy/policy-definitions",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"{{node_id}}",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-routing-policy:routing-policy",
										"policy-definitions"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}