{
	"info": {
		"_postman_id": "f168fc6d-06a4-456a-8157-ae8e9b960f17",
		"name": "pc_unative_RPC_subtree_manager",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR5 RPC subtree",
			"item": [
				{
					"name": "XR5 RPC subtree Setup",
					"item": [
						{
							"name": "install XR5 cli R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R1\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{xr_ip}}\",\n            \"cli-topology:port\": \"{{topology_port}}\",\n            \"cli-topology:transport-type\": \"{{protocol}}\",\n            \"cli-topology:device-type\": \"ios xr\",\n            \"cli-topology:device-version\": \"5.3.4\",\n            \"cli-topology:username\": \"{{username}}\",\n            \"cli-topology:password\": \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"cli-topology:dry-run-journal-size\": 150,\n            \"node-extension:reconcile\": false,\n            \"uniconfig-config:install-uniconfig-node-enabled\": true\n\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "install XR5 cli R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R2\",\n        \"cli\": {\n            \"cli-topology:host\": \"{{xr2_ip}}\",\n            \"cli-topology:port\": \"{{topology_port}}\",\n            \"cli-topology:transport-type\": \"{{protocol}}\",\n            \"cli-topology:device-type\": \"ios xr\",\n            \"cli-topology:device-version\": \"5.3.4\",\n            \"cli-topology:username\": \"{{username}}\",\n            \"cli-topology:password\": \"{{password}}\",\n            \"cli-topology:journal-size\": 150,\n            \"cli-topology:dry-run-journal-size\": 150,\n            \"node-extension:reconcile\": false,\n            \"uniconfig-config:install-uniconfig-node-enabled\": true\n\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:install-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:install-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "sync from network",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:sync-from-network"
									]
								}
							},
							"response": []
						},
						{
							"name": "replace config with operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"if (postman.getEnvironmentVariable(\"release\") == \"carbon\"){",
											"",
											"pm.test(\"Validate result\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"}",
											"else if (postman.getEnvironmentVariable(\"release\") == \"oxygen\") {",
											"    pm.test(\"Overall status: \" + pm.response.json()[\"output\"][\"overall-status\"], function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(\"complete\");",
											"    });",
											"",
											"    var result = pm.response.json()[\"output\"][\"node-results\"][\"node-result\"];",
											"    pm.test(\"Number of nodes in output should be 2\", function() {",
											"        pm.expect(result.length).to.eql(2);",
											"    })",
											"    pm.test(\"Status of all output nodes should be 'complete'\", function() {",
											"        result.forEach(function(nodeResult, index) {",
											"            pm.expect(nodeResult[\"node-id\"]).to.be.oneOf([\"R1\", \"R2\"]);",
											"            pm.expect(nodeResult[\"status\"]).to.eq(\"complete\")",
											"        });",
											"    })",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"input\": {\n                \"target-nodes\": {\n                     \"node\": [\"R1\",\"R2\"]\n\n                }\n            }\n        }"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"uniconfig-manager:replace-config-with-operational"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node=R1/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R1",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						},
						{
							"name": "restore empty config R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Config replaced\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load \"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
											"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload {{conf_file_stored}}\ncommit replace\nyes\nend\n\"\n  }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node=R2/yang-ext:mount/cli-unit-generic:execute-and-read",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"network-topology:network-topology",
										"topology={{topology_id_cli}}",
										"node=R2",
										"yang-ext:mount",
										"cli-unit-generic:execute-and-read"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "XR5 RPC subtree Teardown",
					"item": [
						{
							"name": "uninstall XR5 cli R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R1\",\n        \"connection-type\": \"cli\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						},
						{
							"name": "uninstall XR5 cli R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate complete\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"node-id\": \"R2\",\n        \"connection-type\": \"cli\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/connection-manager:uninstall-node",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"connection-manager:uninstall-node"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "RPC subtree calculate-subtree-diff",
					"item": [
						{
							"name": "configure Gig1 description on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:description\": \"temp description\"\n}"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface description exists on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure Gig1 status on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:enabled\": \"true\"\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/enabled",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"enabled"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface status on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:enabled\"]).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/enabled",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"enabled"
									]
								}
							},
							"response": []
						},
						{
							"name": "copy R1 Gig1 description and satus to R2 Gig1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {       ",
											"     pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\" : \"merge\",\n        \"source-paths\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:description\",\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:enabled\"],\n        \"target-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-many-to-one",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-many-to-one"
									]
								}
							},
							"response": []
						},
						{
							"name": "check changed Gig1 description and status on R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface config\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"enabled\"]).to.eql(true);",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate subtree diff between R1 Gig1 and R2 Gig1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {       ",
											"     pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"]).to.not.have.own.property(\"created-data\");",
											"     pm.expect(pm.response.json()[\"output\"]).to.not.have.own.property(\"updated-data\");",
											"     pm.expect(pm.response.json()[\"output\"]).to.not.have.own.property(\"deleted-data\");",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1\"],\n        \"target-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:calculate-subtree-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:calculate-subtree-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate subtree diff between R1 Gig2 and R2 Gig1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {       ",
											"     pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"created-data\"][0][\"data\"].has(\"temp description\"));",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F2\"],\n        \"target-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:calculate-subtree-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:calculate-subtree-diff"
									]
								}
							},
							"response": []
						},
						{
							"name": "calculate subtree diff between R2 Gig1 OPER vs CONF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {       ",
											"     pm.expect(pm.response.json()[\"output\"][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"created-data\"][0][\"data\"].has(\"temp description\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"updated-data\"][0][\"data-actual\"].has(\"true\"));",
											"     pm.expect(pm.response.json()[\"output\"][\"updated-data\"][0][\"data-intended\"].has(\"false\"));",
											"    pm.expect(pm.response.json()[\"output\"]).to.not.have.own.property(\"deleted-data\");",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1\"],\n        \"target-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1\"],\n        \"source-datastore\": \"OPERATIONAL\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:calculate-subtree-diff",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:calculate-subtree-diff"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC subtree copy-many-to-one-success",
					"item": [
						{
							"name": "configure Gig1 description on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:description\": \"temp description\"\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface description exists on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure Gig2 status on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:enabled\": \"true\"\n}"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F2/config/enabled",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F2",
										"config",
										"enabled"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface status on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:enabled\"]).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F2/config/enabled",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F2",
										"config",
										"enabled"
									]
								}
							},
							"response": []
						},
						{
							"name": "copy R1 Gig1 description and R1 Gig2 satus to R2 Gig0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {       ",
											"     pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\" : \"merge\",\n        \"source-paths\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:description\",\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F2/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:enabled\"],\n        \"target-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F0/frinx-openconfig-interfaces:config\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-many-to-one",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-many-to-one"
									]
								}
							},
							"response": []
						},
						{
							"name": "check changed Gig0 description and status on R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface config\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"enabled\"]).to.eql(true);",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F0/config",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F0",
										"config"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC subtree copy-many-to-one-failed",
					"item": [
						{
							"name": "configure Gig1 description on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:description\": \"temp description\"\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface description exists on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "configure Gig2 status on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([201,204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:enabled\": \"true\"\n}"
								},
								"url": {
									"raw": "http://{{follower1}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F2/config/enabled",
									"protocol": "http",
									"host": [
										"{{follower1}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F2",
										"config",
										"enabled"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface status on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:enabled\"]).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F2/config/enabled",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F2",
										"config",
										"enabled"
									]
								}
							},
							"response": []
						},
						{
							"name": "copy R1 Gig1 description and status to R2 Gig0 (wrong target path)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() { ",
											"    pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											"    pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.contain(\"Failed to find schema node with identifier \");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\" : \"replace\",\n        \"source-paths\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:description\", \"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F0/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:enabled\"],\n        \"target-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F0\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-many-to-one",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-many-to-one"
									]
								}
							},
							"response": []
						},
						{
							"name": "check no changed Gig0 on R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface config\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"enabled\"]).to.eql(false);",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"]).to.not.have.own.property(\"description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F0/config",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F0",
										"config"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC subtree copy-one-to-many-success",
					"item": [
						{
							"name": "configure interface description on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:description\": \"temp description\"\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface description exists on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "copy R1 Gig1 description to R2 Gig2 and Gig0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {       ",
											"     pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\" : \"replace\",\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:description\"],\n        \"target-paths\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F2/frinx-openconfig-interfaces:config\", \"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F0/frinx-openconfig-interfaces:config\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-one-to-many",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-one-to-many"
									]
								}
							},
							"response": []
						},
						{
							"name": "check description exists on Gig0 R2 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F0/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F0",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check description exists on Gig2 R2 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F2/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F2",
										"config",
										"description"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC subtree copy-one-to-many-failed",
					"item": [
						{
							"name": "configure interface description on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:description\": \"temp description\"\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface description exists on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "copy R1 Gig1 description to R2 Gig2 and Gig0 (wrong target paths)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() { ",
											"    pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											"    pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.contain(\"Failed to find schema node with identifier \");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\" : \"replace\",\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:description\"],\n        \"target-paths\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F2\", \"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F0\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-one-to-many",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-one-to-many"
									]
								}
							},
							"response": []
						},
						{
							"name": "check non existing description on Gig0 R2 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F0/config/description?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F0",
										"config",
										"description"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check non existing description on Gig2 R2 config",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F2/config/description?content=nonconfig",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F2",
										"config",
										"description"
									],
									"query": [
										{
											"key": "content",
											"value": "nonconfig"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC subtree copy-one-to-one-success",
					"item": [
						{
							"name": "configure interface description on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:description\": \"temp description\"\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface description exists on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "copy R1 Gig1 config  to R2 Gig1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate result\", function() {       ",
											"     pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"}); ",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\": \"merge\",\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config\"],\n        \"target-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-one-to-one",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-one-to-one"
									]
								}
							},
							"response": []
						},
						{
							"name": "check changed interface config R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:config\"][\"description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RPC subtree copy-one-to-one-failed",
					"item": [
						{
							"name": "configure interface description on R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"frinx-openconfig:interfaces:description\": \"temp description\"\n}"
								},
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "check interface description exists on config R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate interface description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:description\"]).to.eql(\"temp description\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{follower2}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{follower2}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R1",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						},
						{
							"name": "copy R1 Gig1 description  to R2 Gig1 (wrong target path)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() { ",
											"    pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"fail\");",
											"    pm.expect(pm.response.json()[\"output\"][\"error-message\"]).to.contain(\"Failed to find schema node with identifier \");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\" : {\n        \"operation\": \"replace\",\n        \"source-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R1/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1/frinx-openconfig-interfaces:config/frinx-openconfig-interfaces:description\"],\n        \"target-path\": [\"/network-topology:network-topology/network-topology:topology=uniconfig/network-topology:node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/frinx-openconfig-interfaces:interface=GigabitEthernet0%2F0%2F0%2F1\"],\n        \"source-datastore\": \"CONFIGURATION\",\n        \"target-datastore\": \"CONFIGURATION\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/operations/subtree-manager:copy-one-to-one",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"operations",
										"subtree-manager:copy-one-to-one"
									]
								}
							},
							"response": []
						},
						{
							"name": "check not changed  interface description on config R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=R2/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=GigabitEthernet0%2F0%2F0%2F1/config/description",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"rests",
										"data",
										"network-topology:network-topology",
										"topology=uniconfig",
										"node=R2",
										"frinx-uniconfig-topology:configuration",
										"frinx-openconfig-interfaces:interfaces",
										"interface=GigabitEthernet0%2F0%2F0%2F1",
										"config",
										"description"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}