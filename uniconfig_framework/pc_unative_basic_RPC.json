{
	"info": {
		"_postman_id": "d9fbf0c4-9065-4a19-94d8-7ed8e5b7c5d4",
		"name": "pc_unative_basic_RPC",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Prerequisites",
			"item": [
				{
					"name": "uniconfig health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed7629dc-74c6-473f-b6d6-6cb76db4bc4e",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate data created\", function() {",
									"    pm.expect(pm.response.json()[\"output\"][\"healthy\"]).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:health",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:health"
							]
						}
					},
					"response": []
				},
				{
					"name": "mount xr6 by cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd79e492-4e8b-40e8-9436-51113b7fed41",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"xr6\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"6.1.2\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \n      \"node-extension:reconcile\": false,\n      \"uniconfig-config:uniconfig-native-enabled\": true\n    }\n  }",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check if xr6 is connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09da514e-fc33-4fdb-ac3e-ed79285b8d20",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check if xr6 is connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5376d1fe-d278-4c3d-bedd-2d5143f06b96",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "restore empty config xr6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb4ad345-e8bb-44df-b495-46cf3ba930dd",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Config replaced\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"(config)#load disk0:/\"+postman.getEnvironmentVariable(\"conf_file_stored\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"Loading.\");",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"This commit will replace or remove the entire running configuration.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nload disk0:/initial_configuration.txt\ncommit replace\nyes\nend\n\"\n  }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount xr6 cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1e5a9d2-aa0a-4cf2-af22-7b57708472c7",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66cd42e3-1782-404a-91e8-17faea662d69",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "705ab032-44f9-41ce-974b-11398beb9232",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount xr6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "136575a1-0714-4a11-b53c-fd34ed96d5ce",
								"exec": [
									"pm.test(\"Successful DEL request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204,404]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6774e11e-7586-4724-9b08-44b59c9000d0",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1420e709-751c-41b1-a4e2-9f041ddb7c62",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount junos netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d964906-10b3-4845-bef6-00ddb1cd4337",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edf88d0e-063a-4148-993b-487d938b1a98",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c56c6355-91c7-451d-a3e7-7e2e9059d783",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "restore empty config junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0ede5ee-74b4-492d-aaf2-cd8619ee0d0d",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Config replaced\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"output\"]).to.include(\"load complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nload override {{conf_file_stored}}\ncommit\nexit\"\n  }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"cli-unit-generic:execute-and-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "unmount junos cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "197fa885-5b2a-4d40-a548-29419340ebda",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f83f361-c74c-4370-882b-f3d2a2678791",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f4870b7c-2245-4e40-8191-95e68693dda4",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operational",
								"network-topology:network-topology",
								"topology",
								"{{topology_id_cli}}",
								"node",
								"{{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check xr6 unit installed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c99b9b1a-2a5a-49d8-92b7-72d950d734e1",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"",
									"if (pm.response.code == 200) {",
									"    var jsonData = pm.response.json()[\"units\"][\"unit\"];",
									"    console.log(\"length: \" + jsonData.length);",
									"    if(jsonData.length >= 20){",
									"       tests[\"Installed\"] = true ;",
									"    }",
									"    else{",
									"        console.log(\"Not all features installed yet !  \" );",
									"        setTimeout(function(){}, 10000);",
									"        postman.setNextRequest('check xr6 unit installed');",
									"    }",
									"    //Reset attempt counter",
									"postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > 50) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not installed yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to install\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not installed yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, 10000);",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check xr6 unit installed');",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "112b52e8-f504-41e4-8597-d5335739fbcb",
								"exec": [
									"if (postman.getEnvironmentVariable(\"env_type\") === \"cisco_xr6\"){",
									"    postman.setEnvironmentVariable(\"version\",\"6.*\");",
									"    ",
									"}",
									"else if(postman.getEnvironmentVariable(\"env_type\") === \"cisco_xr5\"){",
									"        postman.setEnvironmentVariable(\"version\",\"5.*\");",
									"",
									"}",
									"else if(postman.getEnvironmentVariable(\"env_type\") === \"cisco_xr7\"){",
									"        postman.setEnvironmentVariable(\"version\",\"7.*\");",
									"",
									"}",
									"else {",
									"            postman.setEnvironmentVariable(\"version\",\"*\");",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/cli-translate-registry:available-cli-device-translations/available-cli-device-translation=ios xr,{{uri_version_xr}}/units?depth=3",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"cli-translate-registry:available-cli-device-translations",
								"available-cli-device-translation=ios xr,{{uri_version_xr}}",
								"units"
							],
							"query": [
								{
									"key": "depth",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mount xr6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "130ddf6b-7b6a-42b6-b273-893671ac58fd",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"xr6\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"cisco\",\n      \"netconf-node-topology:password\": \"cisco\",\n\t  \"netconf-node-topology:dry-run-journal-size\": 180,\n      \"uniconfig-config:uniconfig-native-enabled\": true,\n      \"uniconfig-config:blacklist\": {\n        \"uniconfig-config:path\": [\"openconfig-interfaces:interfaces\", \"ietf-interfaces:interfaces\", \"openconfig-vlan:vlans\", \"openconfig-routing-policy:routing-policy\"]\n      }\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check xr6ua status connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e067904-bf0d-4c16-bc16-dd86d26e8bf5",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check xr6ua status connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5fcbcf0a-191f-4c4b-850e-745ef64d990e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check xr6ua unified point exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ae4d16f-ca11-447b-9c78-b17d2c034299",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if ( pm.response.code == 200){",
									"    tests[\"Mount point exists\"] = true",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Mount point exists\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check xr6ua unified point exists');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8638123b-f226-4c01-95ea-7cc13ef036ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check xr6ua uniconfig available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f64c8a9-81ca-4069-9bc8-882efe73471f",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (pm.response.code === 200) {",
									"    tests[\"Is connected\"] = true;",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check xr6ua uniconfig available');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1c6dfe67-d53e-4c48-81f0-9750fd2c5e80",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua unit installed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f10344ee-0eaa-425c-90a8-8d63734d3551",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"if (pm.response.code == 200) {",
									"    var jsonData = pm.response.json()[\"available-unitopo-device-translations\"][\"unit\"];",
									"    console.log(\"length: \" + jsonData.length);",
									"    if(jsonData.length >= 29){",
									"       tests[\"Installed\"] = true ;",
									"    }",
									"    else{",
									"        console.log(\"Not all features installed yet !  \" );",
									"        setTimeout(function(){}, 1000);",
									"        postman.setNextRequest('check junos ua unit installed');",
									"    }",
									"    //Reset attempt counter",
									"postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > 40) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not installed yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to install\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not installed yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, 1000);",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua unit installed');",
									"    }",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f9c1c142-85a4-45bd-a1d1-b42c6a6097cb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/unitopo-translate-registry:available-unitopo-device-translations?depth=3",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"unitopo-translate-registry:available-unitopo-device-translations"
							],
							"query": [
								{
									"key": "depth",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mount Junos netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73795cda-37fa-4ea7-aa39-e191d84cb817",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{junos_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\",\n      \"netconf-node-topology:dry-run-journal-size\": 100,\n      \"uniconfig-config:uniconfig-native-enabled\": true\n\n    }\n  ]\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6107a5b1-d272-4f7d-962f-8f4be983e25b",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6c1db56d-1dba-40ac-a740-1c3ecf140927",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua unified mount point exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b84632a-ccce-44ba-b80e-3a27da15f0fb",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if ( pm.response.code == 200){",
									"    tests[\"Mount point exists\"] = true",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Mount point exists\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua unified mount point exists');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "84ab0042-cdc1-4748-8977-019e650d9b1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id}}/node={{node_id}}/yang-ext:mount",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id}}",
								"node={{node_id}}",
								"yang-ext:mount"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua uniconfig available",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97c136a3-b6f9-4314-b909-5f5241c3c5d9",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (pm.response.code === 200) {",
									"    tests[\"Is connected\"] = true;",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua uniconfig available');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5726846-0faa-4ab4-9fae-519bb37945d3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "SNAPSHOT",
			"item": [
				{
					"name": "maximum snapshot limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2249792a-c562-4b39-87fa-61f01c01d851",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"limit\": 2\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:maximum-snapshot-limit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:maximum-snapshot-limit"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "create snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62d4f8fa-eb5a-47c5-a478-3c43d5057bca",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72d0c401-832a-4c6f-af88-7877423a8243",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"before-demo\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "869907c7-5c1d-4ae0-b1ad-8257049ae295",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"pm.test(\"no iosxr loopback 1970\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"1970\");",
									"});",
									"",
									"pm.test(\"no junos loopback lo0\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"lo0\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=before-demo",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=before-demo"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create interface XR6",
			"item": [
				{
					"name": "show all interfaces xr (blacklisted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5c6a630-c5c8-48b7-951f-6b698ec6368b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"frinx-openconfig-interfaces:interfaces"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show all interfaces xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6866aa2d-c614-4ec0-9e47-623edf70aee1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5e6d58b-a053-4fec-ba20-cf2de9b322e9",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bddb777-c3ad-454f-8ea5-231a535b5967",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback1970\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b11d22e6-6878-4126-aac3-c2846ab5045e",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8a2ee6b-8f64-4649-bd98-f6d32cbf4e94",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db1add0d-5db1-4887-b971-6eb5beab4f37",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "143fbf1c-b33c-4fdb-b43b-b4ee5ea026bf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "DRYRUN: dry run commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "011649a0-83b8-4712-8355-c8f066b21cfc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ebc9d70-2c8b-4bfb-bdcf-9a3762e40c63",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "032017da-9569-4ba4-a3d9-d7b752836b52",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2e1749d-78ce-47c2-988b-17fe21ee5d88",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f160753-9ab9-4361-a0c4-b5bc2f673036",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62b93900-0b6a-41c7-b215-e75b2148fdbb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"loopback 1970 present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-iosxr-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-iosxr-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete interface XR6",
			"item": [
				{
					"name": "delete xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ef89bbf-5724-4d3c-8882-856ea7a1b30f",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49a5d102-e578-47b8-826c-e1624f14268c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9011266-f19d-4630-b96f-f77101472eb4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ed81412-c216-4230-a84a-1c1ecb1c7ba2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd93cba-11f8-4646-b3d3-8b3940914a87",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e918e8e-6233-4f96-a171-13bb5b73882f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Prepare interface then rollback",
			"item": [
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb0401a7-6eef-4551-9743-5a7fbbcf221a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76fda62e-f936-4199-8d6f-4944485a89b9",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback1970\",\n            \"description\": \"stanov loopback\",\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dbb07166-7cc7-4adb-942e-bdecf853900f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d474c872-e661-4dfd-be38-a3e9b346317c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1da44ca1-a1cf-41c4-b72e-73047a078fd7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						},
						"description": "Syncs device configuration to actual uniconfig node. Input contains list of nodes which to sync from network.\n\nThis should be called after configuration on device was changed manually."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3308752e-e3d6-4574-9813-8bf54e4858bf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: replace config with operational xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d293a31-0fad-4593-9df1-395606c7f9e1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:replace-config-with-operational"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with actual (OPER DS) uniconfig topology.\n\nThis is usually used after RPC sync-from-network so we have same state in CONF DS and OPER DS."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea02221e-298f-4088-82c7-615ad0670ae8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2ad5909-6519-4bc1-8228-9099816a5209",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98a7b38d-b998-4446-9e89-e0c5ded66c16",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Replace config datastore with snapshot",
			"item": [
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0053c9bc-2d07-4ca4-9373-ed696c495282",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9556139c-a28b-467f-9f67-95bc4c1f086c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba9a5069-85fe-47d6-84ec-f599682fc79a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc98889a-2da8-4ab9-852e-785c9c2cc4b8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff for xr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a06a6319-7647-43e1-a54e-41b736ea511c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b09311c5-d2a6-44d6-8be0-3fe0a9198a69",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c003a948-6273-4716-8963-4fc1b3970e97",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e25f3ed-3fc9-47d7-a028-6307f42c5f47",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create interface JUNOS",
			"item": [
				{
					"name": "UNICONFIG: actual uniconfig topology junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "519d2f37-0060-4371-8a2a-65abfd73d552",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						},
						"description": "Reads actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show all interfaces junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "435d396b-09fb-4ed0-ad61-08f892b789f8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ccbb8f95-c3a2-443e-81eb-e62aac4e8c00",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c860f57b-c164-4a91-bada-710d352d2bcd",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88466d7b-b6bb-44e6-ac43-6827c155beaf",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"lo0\",\n            \"unit\": [\n                {\n                    \"name\": \"123\",\n                    \"description\": \"foo\"\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4b05441-aace-4f18-b895-24f246b2d779",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2da058fb-f174-43cc-bb39-5cb187b300e5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2452df3-5ecf-4004-b532-a92202c2121c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af424709-4b8c-4113-8292-e1040a0c66c1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f26942d-0500-423c-af98-5d1631573a9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e220a02c-3490-471c-9a2e-646d36cf170b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-lo0-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-lo0-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69a848e5-bb5a-4775-9e6b-5ffc760249c4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:fail\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"fail\");",
									"});",
									"",
									"pm.test(\"error: Max. no of snapshots exceeded\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"error-message\"]).to.contains(\"Maximum number of snapshots exceeded.\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: maximum snapshot limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d0693d7-789c-46e8-9b38-d048612995ad",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"limit\": 4\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:maximum-snapshot-limit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:maximum-snapshot-limit"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: create snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a604d0a6-d7bc-4417-9078-4f19c4c036c3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:create-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6434c3b1-5266-49a2-a297-701a577eac14",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][2][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e32d8ae3-c0f7-4a07-996d-c5b63b6c6744",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"topology-id created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"topology\"][0][\"topology-id\"]).to.eql(\"created-lo0-loopback\");",
									"});",
									"",
									"pm.test(\"lo0.123 present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-lo0-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-lo0-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d574f66-31dd-4ab9-9fc8-4d369c365ab0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Delete interface JUNOS",
			"item": [
				{
					"name": "junos interface add description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7079d20-9287-4c4b-9849-b9bf686403da",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c8c7e76-ea53-418c-8451-746bd4826bb3",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=config",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "config"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "180bf912-887c-4fc6-9f88-9510b975fbaa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ee5f89d-94a8-4cec-a81a-ae29f1f68849",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "DRYRUN: dry run commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f40ad40-febd-4d7b-8a3a-d2836fe24104",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"dryrun-manager:dryrun-commit"
							]
						}
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71c7f071-b7a5-47a3-8831-99866adb83e7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d9651f8-4303-4cb2-8e21-133eead3776d",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "RPC for both devices",
			"item": [
				{
					"name": "SNAPSHOT: replace config with snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0c9b6b7-63e4-462b-b059-8b290ce55b5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60958a0d-48b6-4e7d-b13e-116716cfddaa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a24f2272-90f2-464d-b593-2cc584efc594",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff XR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b46b423-15a4-47e3-b520-1600795e262d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94af74f3-60cc-4757-b96f-7c3c4a24c189",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae33b039-8272-4bd5-a565-bc9606dd32e9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"updated-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"updated-data\"]).not.to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: sync from network",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3985d65b-8c29-47da-aa4d-64e81137a4f3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						},
						"description": "Syncs device configuration to actual uniconfig node. Input contains list of nodes which to sync from network.\n\nThis should be called after configuration on device was changed manually."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10910177-0c6f-4af9-8329-ef9786a75eb1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: replace config with operational JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eaa0a7a3-45ce-4114-99d1-6b701022451c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:replace-config-with-operational"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with actual (OPER DS) uniconfig topology.\n\nThis is usually used after RPC sync-from-network so we have same state in CONF DS and OPER DS."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff JUNOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1183bb55-08cc-4f68-97c4-831b622338d3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show interface junos",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cff91de9-45ff-4bf5-8c2f-f61928698fd7",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "401b7bab-207a-4024-b6b1-ce992b91ea77",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created xr loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60b0aa9-90d0-456e-8726-cc2352b1754c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot created lo0 loopback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa68612a-109b-4000-8b66-176f4c76bb00",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba5866c-910d-4e9b-ac0a-e583a2007d52",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"junos deleted-data not exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).not.to.exist;",
									"});",
									"",
									"pm.test(\"junos created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).to.exist;",
									"});",
									"",
									"pm.test(\"iosxr created-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5e38c16-96ed-4ba9-82f0-941cfb452b2c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bba7588-2670-468a-abf5-e620773f6d49",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e74c5be-d0df-4507-baef-1299fe8362a0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Loopback1970 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface-configuration\"][0][\"interface-name\"]).to.eql(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a71ad073-9fc3-4d4f-91bd-ffab47a7059b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"lo0 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"name\"]).to.eql(\"lo0\");",
									"});",
									"",
									"pm.test(\"lo0.123 found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"interface\"][0][\"unit\"][0][\"name\"]).to.eql(\"123\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: replace config with snapshot before demo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad601543-4080-45a1-98d9-9fed5d2302e1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\",\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:replace-config-with-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:replace-config-with-snapshot"
							]
						},
						"description": "Replaces intended (CONF DS) uniconfig topology with snapshot topology.\r\n\r\nThis is used when we want to manully rollback to some state in the past.\r\n\r\nUsually RPC commit is called afterwards."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: calculate diff",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af4fcc0b-1a80-47c4-99e7-ba43e65a1d0d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});",
									"",
									"",
									"pm.test(\"junos deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"] == postman.getEnvironmentVariable(\"node_id\")) {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).not.to.exist;",
									"    }",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"] == postman.getEnvironmentVariable(\"node_id\")) {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).not.to.exist;",
									"    }",
									"});",
									"",
									"pm.test(\"iosxr deleted-data exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"] == \"xr6\") {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(\"xr6\");",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][0][\"created-data\"]).not.to.exist;",
									"    }",
									"    if (jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"] == \"xr6\") {",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"node-id\"]).to.eql(\"xr6\");",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"deleted-data\"]).to.exist;",
									"        pm.expect(jsonData.output[\"node-results\"][\"node-result\"][1][\"created-data\"]).not.to.exist;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": { \n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:calculate-diff",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:calculate-diff"
							]
						},
						"description": "Calculates difference between intended (CONF DS) uniconfig topology and actual (OPER DS) uniconfig topology.\n\nResult describes diff from intended uniconfig topology point of view."
					},
					"response": []
				},
				{
					"name": "UNICONFIG: commit  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d6b5a72-663b-4b67-92ab-dd9c2ffd88ff",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\"xr6\",\"{{node_id}}\"]\n\t\t}\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:commit"
							]
						},
						"description": "Commits intended configuration from intended uniconfig topology as desired configuration for devices. Configuration is firstly calculated as diff between intended and actual uniconfig topology."
					},
					"response": []
				},
				{
					"name": "show xr interface Loopback1970 (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f75bb099-c9e5-4bf5-acef-01eb2c56aeb1",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=xr6/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration=act,Loopback1970?content=nonconfig",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node=xr6",
								"frinx-uniconfig-topology:configuration",
								"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
								"interface-configuration=act,Loopback1970"
							],
							"query": [
								{
									"key": "content",
									"value": "nonconfig"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "show interface junos (nonconfig)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7660126-d9d4-490f-a0a7-52b7a4ae124b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node={{node_id}}/frinx-uniconfig-topology:configuration/configuration:configuration/interfaces/interface=lo0",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=uniconfig",
								"node={{node_id}}",
								"frinx-uniconfig-topology:configuration",
								"configuration:configuration",
								"interfaces",
								"interface=lo0"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02beab64-92ad-40b2-8098-5422690f6988",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name before-demo\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"before-demo\");",
									"});",
									"",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][2][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35f63e80-8bf6-49bd-8e9e-aa0ee75eab0d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"before-demo\"\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0889f7e6-775c-44b2-9e39-28baaf9133b5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"snapshot name created-iosxr-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][0][\"name\"]).to.eql(\"created-iosxr-loopback\");",
									"});",
									"",
									"pm.test(\"snapshot name created-lo0-loopback\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"snapshots-metadata\"][\"snapshot\"][1][\"name\"]).to.eql(\"created-lo0-loopback\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac8379a-2cd8-47bb-b71c-b7196394b3ce",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=before-demo",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=before-demo"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b249eb0c-eeef-4866-b71d-0c523df5005c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-iosxr-loopback\"\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: delete snapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "168b224e-72bd-4f15-8e13-3327faf5b1d6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"overall-status:complete\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.output[\"overall-status\"]).to.eql(\"complete\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\"name\": \"created-lo0-loopback\"\n\t}\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/snapshot-manager:delete-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"snapshot-manager:delete-snapshot"
							]
						},
						"description": "Creates snapshot of actual (OPER DS) uniconfig topology."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot  ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "363751b7-9dcb-4859-8de2-50eda758a84b",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error data missing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(\"data-missing\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=created-iosxr-loopback",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology=created-iosxr-loopback"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "SNAPSHOT: snapshot metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f74b9eeb-8ad0-4d30-bcfe-3d268b1b7558",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"no data for device junos\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"lo0\");",
									"});",
									"",
									"pm.test(\"no data for device iosxr\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"Loopback1970\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/snapshot-manager:snapshots-metadata",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"snapshot-manager:snapshots-metadata"
							]
						},
						"description": "Reads taken snapshot."
					},
					"response": []
				},
				{
					"name": "unmount xr6 netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc98788b-eced-48bc-af69-4795d91eaa77",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "check unmounted netconf",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b199795e-18b5-4992-91ec-6aef6150a005",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"No data expected\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d3161207-76a0-4c4f-94c8-7a2378c0388d",
								"exec": [
									"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node=xr6",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node=xr6"
							]
						}
					},
					"response": []
				},
				{
					"name": "mount junos cli",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45b3183f-f904-45bd-bfdc-7cab6ac9d54b",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{junos_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"junos\",\n      \"cli-topology:device-version\" : \"{{version_device}}\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"uniconfig-config:uniconfig-native-enabled\": true\n    }\n  }",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check junos ua cli status connected",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7bfe1c49-7a60-4ab1-b742-853147595a74",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"// attempts counter",
									"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
									"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
									"    // Reset attempt counter",
									"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"} else {",
									"    // If too many attempts, abort",
									"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
									"        console.log(\"Not connected yet ! Too many attempts !\")",
									"        // Reset attempt counter",
									"        tests[\"Unable to connect\"] = false",
									"    } else {",
									"        // Schedule next check attempt",
									"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
									"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
									"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
									"        postman.setNextRequest('check junos ua cli status connected');",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b1f74b31-1b63-4703-927a-edd30628e938",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_cli}}/node={{node_id}}",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_cli}}",
								"node={{node_id}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}