{
	"info": {
		"_postman_id": "35c07e03-000d-466a-a68c-8ad35bc4c433",
		"name": "pc_uniconfig-native_RPC_create_snapshot",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "XR6 Create snapshot",
			"item": [
				{
					"name": "XR6 Create snapshot Setup",
					"item": [
						{
							"name": "permit XR models",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3305c24-a72f-4c7b-ab54-9ad98f0df011",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n    \"direct-unit-matcher\": [\n    \t{\n    \t\t\"name\": \"xr\",\n    \t\t\"capability-regex-matcher\": [\".*Cisco.*\", \".*cisco.*\", \".*openconfig.*\", \".*ietf.*\"]\n    \t}\n    ]\n    \n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/direct-unit-matcher:direct-unit-matchers/direct-unit-matcher/xr",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"direct-unit-matcher:direct-unit-matchers",
										"direct-unit-matcher",
										"xr"
									]
								}
							},
							"response": []
						},
						{
							"name": "blacklist openconfig for XR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3305c24-a72f-4c7b-ab54-9ad98f0df011",
										"exec": [
											"tests[\"Successful PUT request\"] = responseCode.code === 200 || responseCode.code === 201;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"blacklisted-read\": {\n        \"matcher-ref\": \"xr\",\n        \"paths\": {\n            \"path\": [\n                \"interfaces\", \"vlans\"\n            ]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/uniconfig-manager:blacklisted-reads/blacklisted-read/xr",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"uniconfig-manager:blacklisted-reads",
										"blacklisted-read",
										"xr"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount IOS XR netconf R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bdd58ba-9beb-4e52-ad37-c983dfef2a47",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"R1\",\n      \"netconf-node-topology:host\": \"{{xr_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03edc63a-086a-4d3a-ba5b-b748277d7052",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected R1');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d8ee786-69ec-443f-b558-6a6f2a3b409f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70042dae-e1e4-40c9-82ed-7181a12e65b2",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available R1');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a9889b3-07f5-43de-af08-2d9d08a1757c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "mount IOS XR netconf R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2bdd58ba-9beb-4e52-ad37-c983dfef2a47",
										"exec": [
											"console.log(\"Request data: \" + request.data.toString());",
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"R2\",\n      \"netconf-node-topology:host\": \"{{xr2_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check status connected R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8ccc4de-6ebe-46d3-b1b3-828b4c3794a5",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check status connected R2');",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d8ee786-69ec-443f-b558-6a6f2a3b409f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check uniconfig available R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8244745e-748f-4b8e-a8ca-7d92f7fdbb65",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (pm.response.code === 200) {",
											"    tests[\"Is connected\"] = true;",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Uniconfig for node not availableyet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('check uniconfig available R2');",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a9889b3-07f5-43de-af08-2d9d08a1757c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a93518d-5d69-4f08-ba74-d3828613c263",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a93518d-5d69-4f08-ba74-d3828613c263",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "create interface R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38384ba3-c33e-44f6-944f-e87fa16e3e38",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "create interface R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "38384ba3-c33e-44f6-944f-e87fa16e3e38",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface-configuration\": [\n        {\n            \"active\": \"act\",\n            \"interface-name\": \"Loopback123\",\n            \"description\": \"description from uniconfig native\",\n            \"Cisco-IOS-XR-ipv4-io-cfg:ipv4-network\": {\n                \"addresses\": {\n                    \"primary\": {\n                        \"address\": \"1.2.3.4\",\n                        \"netmask\": \"255.255.255.128\",\n                        \"route-tag\": 22\n                    }\n                }\n            },\n            \"interface-virtual\": [\n                null\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete snapshot 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8054653a-6bf0-45bb-8b7c-fbbf198af797",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR6 Create snapshot Teardown",
					"item": [
						{
							"name": "unmount R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2482feee-2ffa-42f9-a8a3-5716e4ebc98f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted netconf R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d2f628a-5867-4154-8ca2-6452269bf852",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f3ac61b-ac5e-4c6e-816b-dffa48caf759",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "unmount R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2482feee-2ffa-42f9-a8a3-5716e4ebc98f",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check unmounted netconf R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d2f628a-5867-4154-8ca2-6452269bf852",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"pm.test(\"No data expected\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f3ac61b-ac5e-4c6e-816b-dffa48caf759",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"{{topology_id_netconf}}",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete snapshot 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8054653a-6bf0-45bb-8b7c-fbbf198af797",
										"exec": [
											"pm.test(\"Success\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404,200]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting snapshot 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f712eb7-1abc-4610-9da7-45d54b4f35b9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1",
										"node",
										"R1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "Create snapshot one-router",
					"item": [
						{
							"name": "create snapshot R1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c6b0b46-fed2-4ff0-a2b1-18f25a57c7dc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											"     ",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"R1\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								}
							},
							"response": []
						},
						{
							"name": "check node exists R1 one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "405cc087-b911-4745-979f-f0e9d4e9d9ef",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate node name\", function() {",
											" pm.expect(pm.response.json()[\"node\"][0][\"node-id\"]).to.eql(\"R1\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface R1 one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a93518d-5d69-4f08-ba74-d3828613c263",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting node R2 one router",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd221adb-ce7d-46d6-a3d2-7b6b83064485",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody);",
											"",
											"pm.test(\"Success\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1",
										"node",
										"R2"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create snapshot all-routers",
					"item": [
						{
							"name": "create snapshot R1 and R2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84be0c04-b211-4067-ab49-26691db36e4d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate configuration-status\", function() {",
											" if ( [\"output\"] ){",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											" }",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\"\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								}
							},
							"response": []
						},
						{
							"name": "check node exists R1 all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60034778-8b7a-457d-bbe0-aaa5efdea5f8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate node name\", function() {",
											" pm.expect(pm.response.json()[\"node\"][0][\"node-id\"]).to.eql(\"R1\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/R1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1",
										"node",
										"R1"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface R1 all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a93518d-5d69-4f08-ba74-d3828613c263",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R1/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R1",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						},
						{
							"name": "check node exists R2 all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3612eb25-bad1-4f1e-9fb7-039065a1760c",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate node name\", function() {",
											" pm.expect(pm.response.json()[\"node\"][0][\"node-id\"]).to.eql(\"R2\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1/node/R2",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1",
										"node",
										"R2"
									]
								}
							},
							"response": []
						},
						{
							"name": "check nonexisting interface R2 all routers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a93518d-5d69-4f08-ba74-d3828613c263",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/R2/frinx-uniconfig-topology:configuration/Cisco-IOS-XR-ifmgr-cfg:interface-configurations/interface-configuration/act/Loopback123",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operational",
										"network-topology:network-topology",
										"topology",
										"uniconfig",
										"node",
										"R2",
										"frinx-uniconfig-topology:configuration",
										"Cisco-IOS-XR-ifmgr-cfg:interface-configurations",
										"interface-configuration",
										"act",
										"Loopback123"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Create snapshot bad-input",
					"item": [
						{
							"name": "create snapshot R1 and R3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e835ccc-6029-4f7c-a6b8-c78588b83675",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate result\", function() {",
											" pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"complete\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"input\": {\n        \"name\": \"snapshot1\",\n        \"target-nodes\": {\n            \"node\": [\"R1\", \"R3\"]\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/operations/snapshot-manager:create-snapshot",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"operations",
										"snapshot-manager:create-snapshot"
									]
								}
							},
							"response": []
						},
						{
							"name": "check snapshot 1 bad input",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83146209-507a-4ff6-b884-dda2d79e5c4e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											" pm.response.to.have.status(200);",
											"});",
											"",
											"var list = pm.response.json()[\"topology\"][0][\"node\"]",
											"var items=[];",
											"for(var i = 0;i < list.length;i++){",
											"    items[i]=list[i][\"node-id\"];",
											"}",
											"",
											"pm.test(\"Validate data created R1\", function() {",
											"    for(var i = 0;i < list.length;i++){",
											"        if (items[i] == \"R1\") {",
											"            pm.expect(list[i][\"node-id\"]).to.eql(\"R1\");",
											"            ",
											"        } else",
											"        pm.expect(items).to.be.an('array').that.includes(\"R1\");",
											"    }",
											"});",
											"",
											"pm.test(\"Validate failed result \", function() {",
											"            pm.expect(items).to.not.have.members([\"R3\"]);",
											"});",
											"",
											"pm.test(\"Validate snapshot name\", function() {",
											" pm.expect(pm.response.json()[\"topology\"][0][\"topology-id\"]).to.eql(\"snapshot1\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									}
								],
								"url": {
									"raw": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/snapshot1",
									"protocol": "http",
									"host": [
										"{{odl_ip}}"
									],
									"port": "8181",
									"path": [
										"restconf",
										"config",
										"network-topology:network-topology",
										"topology",
										"snapshot1"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}