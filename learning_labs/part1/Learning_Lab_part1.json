{
	"info": {
		"_postman_id": "a8341e46-1905-4f71-a87b-b82c7cac7edf",
		"name": "LAB1_NEW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Mount IOS XE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7396ee3-7293-4651-9471-840049faebcf",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code\", function () {",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"cli-10000\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"15.2\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 180,\n      \n      \"cli-topology:keepalive-delay\" : 45,\n      \"cli-topology:keepalive-timeout\" : 45\n    }\n  }"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=cli/node=cli-10000",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"data",
						"network-topology:network-topology",
						"topology=cli",
						"node=cli-10000"
					]
				}
			},
			"response": []
		},
		{
			"name": "check xe uc status connected",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ffc53c24-96c7-42ab-8cbf-54f6a1454e94",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"// attempts counter",
							"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
							"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
							"    // Reset attempt counter",
							"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
							"} else {",
							"    // If too many attempts, abort",
							"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
							"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
							"        console.log(\"Not connected yet ! Too many attempts !\")",
							"        // Reset attempt counter",
							"        tests[\"Unable to connect\"] = false",
							"    } else {",
							"        // Schedule next check attempt",
							"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
							"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
							"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
							"        postman.setNextRequest('check xe uc status connected');",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6177712c-ce12-4d3f-a3cd-337e4d20e17e",
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=cli-10000?content=nonconfig",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"data",
						"network-topology:network-topology",
						"topology=uniconfig",
						"node=cli-10000"
					],
					"query": [
						{
							"key": "content",
							"value": "nonconfig"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "show all interfaces",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "01bba807-1a74-4ee3-9434-1bbd371c8952",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"var json_string = pm.response.json()[\"frinx-openconfig-interfaces:interfaces\"][\"interface\"];",
							"",
							"var interfaces =[];",
							"var confifc=[];",
							"for(var i= 0;i<json_string.length;i++){",
							"    interfaces.push(json_string[i][\"name\"]);",
							"    confifc.push(json_string[i][\"config\"][\"name\"] );",
							"    console.log(\"interface\"+ interfaces[i]);",
							"}",
							"",
							"pm.test(\"Validate name \"+postman.getEnvironmentVariable(\"test_interface1\"), function() {",
							"    var found = interfaces.includes(postman.getEnvironmentVariable(\"test_interface1\"));",
							"    var foundconf = confifc.includes(postman.getEnvironmentVariable(\"test_interface1\"));",
							"    console.log(found);",
							"    pm.expect(found).to.be.true;",
							"    pm.expect(foundconf).to.be.true;",
							"",
							"});",
							"",
							"pm.test(\"Validate name \"+ postman.getEnvironmentVariable(\"test_interface2\"), function() {",
							"    var found = interfaces.includes(postman.getEnvironmentVariable(\"test_interface2\"));",
							"    var foundconf = confifc.includes(postman.getEnvironmentVariable(\"test_interface2\"));",
							"    console.log(found);",
							"    pm.expect(found).to.be.true;",
							"    pm.expect(foundconf).to.be.true;",
							"",
							"      ",
							"});",
							"",
							"pm.test(\"Validate name \"+ postman.getEnvironmentVariable(\"test_interface3\"), function() {",
							"    var found = interfaces.includes(postman.getEnvironmentVariable(\"test_interface3\"));",
							"    var foundconf = confifc.includes(postman.getEnvironmentVariable(\"test_interface3\"));",
							"    console.log(found);",
							"    pm.expect(found).to.be.true;",
							"    pm.expect(foundconf).to.be.true;",
							"",
							"      ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=cli-10000/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces?content=nonconfig",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"data",
						"network-topology:network-topology",
						"topology=uniconfig",
						"node=cli-10000",
						"frinx-uniconfig-topology:configuration",
						"frinx-openconfig-interfaces:interfaces"
					],
					"query": [
						{
							"key": "content",
							"value": "nonconfig"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create loopback",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f3fbe7d3-78be-439f-995e-f1eea6ffe389",
						"exec": [
							"console.log(\"Request data: \" + request.data.toString());",
							"console.log(\"Response: \" + responseBody)",
							"pm.test(\"Status code is 201\", function () {",
							"  pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"Loopback11\",\n            \"config\": {\n                \"type\": \"iana-if-type:softwareLoopback\",\n                \"enabled\": true,\n                \"name\": \"Loopback11\"\n            }\n        }\n    ]\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=cli-10000/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=Loopback11",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"data",
						"network-topology:network-topology",
						"topology=uniconfig",
						"node=cli-10000",
						"frinx-uniconfig-topology:configuration",
						"frinx-openconfig-interfaces:interfaces",
						"interface=Loopback11"
					]
				}
			},
			"response": []
		},
		{
			"name": "commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d10b6b2-68ab-47e0-802a-a99c7585f043",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Validate overall-configuration-status\", function() {",
							"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"Validate configuration-status\", function() {",
							"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"Validate nodeId\", function() {",
							"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"cli-10000\"\n            ]\n        }\n    }\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"operations",
						"uniconfig-manager:commit"
					]
				}
			},
			"response": []
		},
		{
			"name": "set ip address on loopback",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "515e5882-0dac-41c7-bb15-dadbd990b30d",
						"exec": [
							"console.log(\"Request data: \" + request.data.toString());",
							"console.log(\"Response: \" + responseBody)",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"frinx-openconfig-interfaces:interface\": [\n        {\n            \"name\": \"Loopback11\",\n            \"config\": {\n                \"type\": \"iana-if-type:softwareLoopback\",\n                \"enabled\": true,\n                \"name\": \"Loopback11\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"9.9.9.9\",\n                                        \"config\": {\n                                            \"ip\": \"9.9.9.9\",\n                                            \"prefix-length\": 24\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=cli-10000/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface=Loopback11",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"data",
						"network-topology:network-topology",
						"topology=uniconfig",
						"node=cli-10000",
						"frinx-uniconfig-topology:configuration",
						"frinx-openconfig-interfaces:interfaces",
						"interface=Loopback11"
					]
				}
			},
			"response": []
		},
		{
			"name": "commit",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d10b6b2-68ab-47e0-802a-a99c7585f043",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Validate overall-configuration-status\", function() {",
							"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"Validate configuration-status\", function() {",
							"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
							"});",
							"pm.test(\"Validate nodeId\", function() {",
							"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"cli-10000\"\n            ]\n        }\n    }\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:commit",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"operations",
						"uniconfig-manager:commit"
					]
				}
			},
			"response": []
		},
		{
			"name": "show all interfaces",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "01bba807-1a74-4ee3-9434-1bbd371c8952",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"var json_string = pm.response.json()[\"frinx-openconfig-interfaces:interfaces\"][\"interface\"];",
							"",
							"var interfaces =[];",
							"var confifc=[];",
							"for(var i= 0;i<json_string.length;i++){",
							"    interfaces.push(json_string[i][\"name\"]);",
							"    confifc.push(json_string[i][\"config\"][\"name\"] );",
							"    console.log(\"interface\"+ interfaces[i]);",
							"}",
							"",
							"pm.test(\"Validate name \"+postman.getEnvironmentVariable(\"test_interface1\"), function() {",
							"    var found = interfaces.includes(postman.getEnvironmentVariable(\"test_interface1\"));",
							"    var foundconf = confifc.includes(postman.getEnvironmentVariable(\"test_interface1\"));",
							"    console.log(found);",
							"    pm.expect(found).to.be.true;",
							"    pm.expect(foundconf).to.be.true;",
							"",
							"});",
							"",
							"pm.test(\"Validate name \"+ postman.getEnvironmentVariable(\"test_interface2\"), function() {",
							"    var found = interfaces.includes(postman.getEnvironmentVariable(\"test_interface2\"));",
							"    var foundconf = confifc.includes(postman.getEnvironmentVariable(\"test_interface2\"));",
							"    console.log(found);",
							"    pm.expect(found).to.be.true;",
							"    pm.expect(foundconf).to.be.true;",
							"",
							"      ",
							"});",
							"",
							"pm.test(\"Validate name \"+ postman.getEnvironmentVariable(\"test_interface3\"), function() {",
							"    var found = interfaces.includes(postman.getEnvironmentVariable(\"test_interface3\"));",
							"    var foundconf = confifc.includes(postman.getEnvironmentVariable(\"test_interface3\"));",
							"    console.log(found);",
							"    pm.expect(found).to.be.true;",
							"    pm.expect(foundconf).to.be.true;",
							"",
							"      ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=uniconfig/node=cli-10000/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces?content=nonconfig",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"data",
						"network-topology:network-topology",
						"topology=uniconfig",
						"node=cli-10000",
						"frinx-uniconfig-topology:configuration",
						"frinx-openconfig-interfaces:interfaces"
					],
					"query": [
						{
							"key": "content",
							"value": "nonconfig"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Unmount IOS XE",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7396ee3-7293-4651-9471-840049faebcf",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code\", function () {",
							"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"cli-10000\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"15.2\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 180,\n      \n      \"cli-topology:keepalive-delay\" : 45,\n      \"cli-topology:keepalive-timeout\" : 45\n    }\n  }"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology=cli/node=cli-10000",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"data",
						"network-topology:network-topology",
						"topology=cli",
						"node=cli-10000"
					]
				}
			},
			"response": []
		},
		{
			"name": "sync from network",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7962ea75-1246-4bb4-9630-14f712bc9df7",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"cli-10000\"\n            ]\n        }\n    }\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"operations",
						"uniconfig-manager:sync-from-network"
					]
				}
			},
			"response": []
		},
		{
			"name": "replace config with operational",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "17633f9f-f6cb-46ba-b3d4-41691e09b158",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Result complete\", function () {",
							"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(\"complete\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46YWRtaW4="
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\n            \"input\": {\n                \"target-nodes\": {\n                }\n            }\n        }"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:replace-config-with-operational",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"operations",
						"uniconfig-manager:replace-config-with-operational"
					]
				}
			},
			"response": []
		},
		{
			"name": "calculate-diff",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3068f6e-7e41-404d-b184-2a1574124834",
						"exec": [
							"console.log(\"Response: \" + responseBody)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/xml"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"cli-10000\"\n            ]\n        }\n    }\n}"
				},
				"url": {
					"raw": "http://localhost:8181/rests/operations/uniconfig-manager:calculate-diff",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8181",
					"path": [
						"rests",
						"operations",
						"uniconfig-manager:calculate-diff"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dry run commit",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"input\": {\n        \"target-nodes\": {\n            \"node\": [\n                \"cli-10000\"\n            ]\n        }\n    }\n}"
				},
				"url": {
					"raw": "http://{{odl_ip}}:8181/rests/operations/dryrun-manager:dryrun-commit",
					"protocol": "http",
					"host": [
						"{{odl_ip}}"
					],
					"port": "8181",
					"path": [
						"rests",
						"operations",
						"dryrun-manager:dryrun-commit"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}