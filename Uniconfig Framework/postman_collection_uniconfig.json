{
	"info": {
		"name": "FRINX Uniconfig",
		"_postman_id": "3fb78e80-3402-dc21-b5e4-940ac19322a7",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "IOS XR5",
			"item": [
				{
					"name": "XR5 Mount",
					"item": [
						{
							"name": "Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "072369ad-2d73-46c0-8331-ff9ba737f625",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{xr_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"ios xr\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"cli-topology:dry-run-journal-size\": 150,\n      \"safe-command-execution\": false\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check status connected CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check status connected CLI');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 Unmount",
					"item": [
						{
							"name": "DELETE Mount IOS XR cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e541407-40fd-407c-9c9d-13eba641ea9f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check unmounted CLI",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8227115-e2da-496e-bd6e-76578bf85acb",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b8f6147b-5715-4c04-9158-c5e10c01beb7",
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LACP CRUD",
					"item": [
						{
							"name": "XR5 LACP CRUD Setup",
							"item": [
								{
									"name": "create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c16edf48-581d-4456-9ca5-c684eb373a45",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c62a45ba-132b-44e0-9d47-135488146df4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e31297c7-1961-463b-9aa5-57fa37688b14",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 MPLS-TE CRUD",
					"item": [
						{
							"name": "XR5 MPLS-TE CRUD Setup",
							"item": [
								{
									"name": "Delete mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5de8184a-f097-41b3-9912-c74234f9c05a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0ab70bfb-91ab-4dee-af71-d470ef9b620c",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "831e2e7b-57e5-47b2-9cec-18d2498c3d05",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show nonexisting mpls-te",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe9f6c71-3a9c-4271-81c5-e176f3e8ad38",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 MPLS-TUNNEL CRUD",
					"item": [
						{
							"name": "XR5 MPLS-TUNNEL CRUD Setup",
							"item": [
								{
									"name": "Create tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa5bc205-c2d0-4436-9202-62f205570dcf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6fedcd0f-22e9-4f78-b602-a2b494b71985",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_100}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8ccdae5-c09f-4f38-9709-1d33982ac4f3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show configured tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2714f1ea-10e9-440b-a09a-603a20c7579e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate shortcut-eligible\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\")));",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"",
													"pm.test(\"Validate destination not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"p2p-tunnel-attributes\")",
													"});",
													"",
													"pm.test(\"Validate cisco-mpls-te-extension not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\")",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 MPLS-TUNNEL CRUD Teardown",
							"item": [
								{
									"name": "Delete tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8908a74-3593-4c48-817b-fccb573348e9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aaa86ba8-e8a0-4687-837f-ef3fe3948e21",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad96b9bf-7e7a-4b7e-92f7-9c3a64b03484",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"        pm.test('dryrun - contains no interface tunnel-te 100', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface tunnel-te 100\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3af265ed-f173-4877-bbe3-6f357792bcc9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd9eeafa-8da2-4545-b930-04a032f3ad54",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dcfd127a-4fc5-4251-bf66-f764a00ead21",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 BGP CRUD",
					"item": [
						{
							"name": "XR5 BGP CRUD Setup",
							"item": [
								{
									"name": "delete previouse bgp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7765160d-af57-4805-955b-0cc767ddfbc5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no router bgp {{bgp_as}}\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "configure neighbor group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0f170a-15d7-49e9-862f-a25c4827debd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n router bgp {{bgp_as}} instance {{bgp_process-name}}\n neighbor-group {{bgp_group}}\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "bgp sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d584e16b-3e69-45a3-8dc2-cc06a616a1e1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"error-type not present\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "bgp replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd0c130d-57b0-42bf-b83a-6344e2f966c3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC CRUD",
					"item": [
						{
							"name": "XR5 IFC CRUD Setup",
							"item": [
								{
									"name": "create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fe044b3-5dba-4469-aea2-6b110a95f55f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "interface commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e142d939-f7b3-49b0-a6b2-7308272e2d08",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cbdd446-299f-49da-8479-b75a44c25e80",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 IFC CRUD Teardown",
							"item": [
								{
									"name": "make interface empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c47287b2-5cfa-4f63-804c-7113006e5a46",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": \"{{eth_enabled_false}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "interface commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57c9bce2-1156-43d0-ad36-fbac70cd3d04",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2911158e-65e4-4fd6-a401-03feba062f0f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC-FULL CRUD",
					"item": [
						{
							"name": "XR5 IFC-FULL CRUD Setup",
							"item": [
								{
									"name": "create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d248d5e-dc09-4e51-82e6-1a32711a6088",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"mtu\": {{eth_mtu}},\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_false}}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b70ec636-dc13-457f-8de3-16409cd9b61c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05e5662b-7ea0-44a3-9ebc-c0f1ecfd3487",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG CRUD",
					"item": [
						{
							"name": "XR5 LAG CRUD Setup",
							"item": [
								{
									"name": "create lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a44f6f0f-8173-451f-9b40-5f6bb083d57f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "create lag commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2645d89-c5cb-40ea-a62c-e16e4ec27207",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "553e28b2-8ff9-4fd3-b6b2-9de40c814fb6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 LAG CRUD Teardown",
							"item": [
								{
									"name": "delete lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e71620a9-6579-497c-94a2-328301339e3f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "204c07aa-5d13-4a95-a622-4896890e3fbb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84aeaa90-4447-4daf-a7b0-2f040d40a20a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Lag not in interfaces\", function () {",
													"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"))",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfcc7682-242f-40e8-8c46-2b36b6eb4093",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 LAG-FULL CRUD",
					"item": [
						{
							"name": "XR5 LAG-FULL CRUD Setup",
							"item": [
								{
									"name": "delete lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57b02d1c-a9d4-49db-81e1-f3e9243ed17e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2fafdec-4703-4677-8937-6abbc6a6e9ff",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 OSPF CRUD",
					"item": [
						{
							"name": "XR5 OSPF CRUD Setup",
							"item": [
								{
									"name": "show nonexisting ospf process",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "335fcc50-cb26-41ca-bea0-f38a8b89f04c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 SYSLOG CRUD",
					"item": [
						{
							"name": "XR5 SYSLOG CRUD Setup",
							"item": [
								{
									"name": "create lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18b841b3-614d-449f-bea5-0d8a5234dd7d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "create lag interface commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33dcb1d5-24e8-42ee-ab8f-5b92ce077fb9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdeb43c6-bae1-4d72-b7c2-5ecdcb1b219e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 SYSLOG CRUD Teardown",
							"item": [
								{
									"name": "delete lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4791ffb-4f8b-44b7-bb4e-345a4ff9f025",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag interface commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01a6349d-981a-45b5-a082-49b945576bd3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21f802f8-d7d2-491a-85c4-34c68288e1e8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\")+\" not included\", function() {",
													"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"))",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a2b11f5-1be4-44bd-a118-83a8362ecc82",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 PF-IFC CRUD",
					"item": [
						{
							"name": "XR5 PF-IFC CRUD Setup",
							"item": [
								{
									"name": "configure policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76813169-d270-4d0f-ab02-9778418ff822",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\npolicy-map {{output_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{output_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\npolicy-map {{input_policy2}}\n class class-default\n  shape average percent 50\n  exit\n  end-policy-map\n commit\n end\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6327aba-44fc-4367-8b5a-44f86c0bb9a7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"error-type not present\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "delete interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b86e0436-faa2-4857-8f30-6ab1c018d318",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25832b39-d5d8-495a-948b-a7ae8d7d6976",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show nonexisting policy on interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a47f981-1b63-470f-ac99-9ef7bfa7c64b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "create lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a44f6f0f-8173-451f-9b40-5f6bb083d57f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{policy_interface}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{policy_interface}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{policy_interface}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "create lag commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2645d89-c5cb-40ea-a62c-e16e4ec27207",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57bef280-35c9-4cb3-bb6e-9112249ec0d8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{policy_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 PF-IFC CRUD Teardown",
							"item": [
								{
									"name": "delete policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5918057-3d25-4cdd-8db6-32a141062f77",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno policy-map {{output_policy}}\nno policy-map {{input_policy}}\nno policy-map {{output_policy2}}\nno policy-map {{input_policy2}}\n commit\n end\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6327aba-44fc-4367-8b5a-44f86c0bb9a7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"error-type not present\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "delete interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ba7bc4b-0579-46e2-86c1-62059ed63744",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,404]);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "show deleted policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31d43d86-f6c9-4896-a6ec-d8688a5a9dd6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "delete lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e71620a9-6579-497c-94a2-328301339e3f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "delete lag commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "204c07aa-5d13-4a95-a622-4896890e3fbb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ee23fb0-b27c-40ad-87d1-37d71ff959f5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Lag not in interfaces\", function () {",
													"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"policy_interface\"))",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfcc7682-242f-40e8-8c46-2b36b6eb4093",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{policy_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 RSVP CRUD",
					"item": [
						{
							"name": "XR5 RSVP CRUD Setup",
							"item": [
								{
									"name": "delete previouse rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c2fc765-25a3-4b47-a301-37a3c7e242ec",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\n no rsvp\n commit\nend\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90471601-e81e-471c-911e-ba0f9a2d9ffb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"error-type not present\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "show nonexisting rsvp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2217529e-fb19-4802-b001-96a6f27fc6b2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4856b607-b5ca-48f8-9a9c-688c74f5bd96",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t}\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 IFC-ACL CRUD",
					"item": [
						{
							"name": "XR5 IFC-ACL CRUD Setup",
							"item": [
								{
									"name": "create ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "178a8027-cfd2-4a5b-9115-f35e6b49a92a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nipv4 access-list {{iacl_in-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_in-acl-name2}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name1}} 10 deny ipv4 any any\nipv4 access-list {{iacl_out-acl-name2}} 10 deny ipv4 any any\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6327aba-44fc-4367-8b5a-44f86c0bb9a7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"error-type not present\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cba7b671-b6a5-41d6-95f3-47ac0260b3df",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 IFC-ACL CRUD Teardown",
							"item": [
								{
									"name": "delete ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "643ab221-bb0c-447e-af5c-ce27362053eb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"conf t\nno ipv4 access-list {{iacl_in-acl-name1}}\nno ipv4 access-list {{iacl_in-acl-name2}}\nno ipv4 access-list {{iacl_out-acl-name1}}\nno ipv4 access-list {{iacl_out-acl-name2}}\ncommit\nend\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a0432d9-8871-4348-b44d-0187c0eba63b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"error-type not present\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc56fd5e-f209-43b9-86d0-3531095258f8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "XR5 SNMP",
					"item": [
						{
							"name": "XR5 SNMP Gig Setup",
							"item": [
								{
									"name": "update snmp => enable snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5b18ad3-ffea-412d-b628-8dc5f88b7196",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "enable commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71c82691-42a0-4e1c-9ac5-6ef342c2fec3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show enabled snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99d1c671-9f5b-4109-9c1d-9944cffa34d1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"snmp_inf_id_physical\"));",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"snmp_inf_id_physical\"));",
													"});",
													"",
													"pm.test(\"Validate snmp trap event set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"]).to.have.property(\"enabled-trap-for-event\")",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"]).to.eql(\"frinx-event-types:LINK_UP_DOWN\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 SNMP Lag Setup",
							"item": [
								{
									"name": "create lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae5b2d60-bf30-4f98-964f-54b2930b4b47",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03014ef6-de15-4304-aa75-0b16998861f7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79b4a419-3df6-4b5d-b423-6fbbf5b8efe9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "XR5 SNMP Lag Teardown",
							"item": [
								{
									"name": "delete lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5610a47-a7f0-4ca3-b262-9e739820334d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea8e13e7-29e7-465a-a558-12bee1a04f25",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc9d8aa6-8737-4d35-a58f-f088efad2521",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Junos",
			"item": [
				{
					"name": "Junos Mount",
					"item": [
						{
							"name": "Mount Junos netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7789d127-acf2-4f0e-9e6c-9e4fa2b479aa",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"node\": [\n    {\n      \"node-id\": \"{{node_id}}\",\n      \"netconf-node-topology:host\": \"{{junos_ip}}\",\n      \"netconf-node-topology:port\": {{netconf_port}},\n      \"netconf-node-topology:keepalive-delay\": 0,\n      \"netconf-node-topology:tcp-only\": false,\n      \"netconf-node-topology:username\": \"{{username}}\",\n      \"netconf-node-topology:password\": \"{{password}}\"\n    }\n  ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos connected",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44786e05-7c85-4395-9859-2ff473fdbeb0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['netconf-node-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check junos connected');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d139b612-c034-4638-9f97-f627ae168a35",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Mount Junos cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f02f6edd-94eb-44f5-99df-726ffe3865c7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"{{node_id}}\",\n      \n      \"cli-topology:host\" : \"{{junos_ip}}\",\n      \"cli-topology:port\" : \"{{topology_port}}\",\n      \"cli-topology:transport-type\" : \"{{protocol}}\",\n      \n      \"cli-topology:device-type\" : \"junos\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"{{username}}\",\n      \"cli-topology:password\" : \"{{password}}\",\n      \n      \"cli-topology:journal-size\": 150,\n      \"safe-command-execution\": false\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos cli status",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db057f06-ac17-4557-a73d-3bd60c96eee0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"// attempts counter",
											"var attempt = JSON.parse(postman.getEnvironmentVariable(\"attempt\"));",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"if (responseBody.has(\"node\") && jsonData.node[0]['cli-topology:connection-status'] === \"connected\") {",
											"    tests[\"Is connected\"] = jsonData.node[0]['cli-topology:connection-status'] === \"connected\";",
											"    // Reset attempt counter",
											"    postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"} else {",
											"    // If too many attempts, abort",
											"    if (attempt > JSON.parse(postman.getEnvironmentVariable(\"connect_attempts\"))) {",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(1));",
											"        console.log(\"Not connected yet ! Too many attempts !\")",
											"        // Reset attempt counter",
											"        tests[\"Unable to connect\"] = false",
											"    } else {",
											"        // Schedule next check attempt",
											"        console.log(\"Not connected yet ! Waiting, attempt : \" + attempt)",
											"        setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											"        postman.setEnvironmentVariable(\"attempt\", JSON.stringify(attempt + 1));",
											"        postman.setNextRequest('Check junos cli status');",
											"    }",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1abe88c3-4e80-4faa-8e3b-3a078b18fa69",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos Unmount",
					"item": [
						{
							"name": "Delete junos mount netconf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb4f4c71-a250-460e-a076-57b7f9db9161",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos netconf unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acfb8e23-3e40-4e54-97e2-541e19cac72a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a1a7c24-3870-4a94-9bb2-f8636cb9ef78",
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_netconf}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Delete junos mount cli",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c11549ae-3902-4ca6-8c88-433d2a448e3b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						},
						{
							"name": "Check junos cli unmounted",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b2a198c-4f59-45a2-9cc7-0e8e77fa66d7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0bca85f4-4f81-40f8-a270-dde641bd2ac5",
										"type": "text/javascript",
										"exec": [
											"setTimeout(function(){}, JSON.parse(postman.getEnvironmentVariable(\"connect_attempt_delay\")));",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos IFC CRUD",
					"item": [
						{
							"name": "Junos IFC CRUD Setup",
							"item": [
								{
									"name": "create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b092de68-377c-43aa-a4c8-b9dc70a7d63c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "364e17a5-670c-4770-a137-e6d83ca56ff2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e96f82c-545d-4d12-b898-19ebce3f9b83",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos IFC CRUD Teardown",
							"item": [
								{
									"name": "make interface empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85d30531-064b-43d6-8f6d-672acada78e8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": \"{{eth_enabled_false}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02734006-1c3e-4878-bd4c-86eb716f7328",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "549f1dfe-db20-4298-b781-19601ba3b73b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos LAG CRUD",
					"item": [
						{
							"name": "Junos LAG CRUD Setup",
							"item": [
								{
									"name": "create lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fa88bf9-0efc-4538-b080-bab470c0c8b8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "859ac975-e97e-414c-9aaf-f9f891354a70",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59c86533-dac3-46a1-968e-aade9ebad552",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1bfe5e9-78d8-4915-846c-b09208dc51a5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n\t\t\t    \"description\": \"{{eth_description}}\",\n    \t        \"enabled\": {{eth_enabled_true}}\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{lag_inf-id}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfc9a915-caac-4e35-a380-548be9d43b7a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bf0739b-058b-452f-8eb0-0baec77bc68b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos LAG CRUD Teardown",
							"item": [
								{
									"name": "make interface empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14a741d7-4579-4b77-92c2-4351b9af4904",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": \"{{eth_enabled_false}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f33d6a47-3bfa-48aa-b696-0161219970d4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show cleaned empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4148c5e0-da3e-40ae-b4c5-7d9490322942",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"].length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_false\")));",
													"});",
													"pm.test(\"Validate description not rpesence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\");",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "696ce692-d790-447d-adaa-66ce77c1dd21",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10e7b9d0-0117-4c0c-a648-cb2f97e2e97d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface from interface list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61bea025-1614-4a5e-82af-71056c497b75",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Lag not in interfaces\", function () {",
													"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"))",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
									},
									"response": []
								},
								{
									"name": "show deleted lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67733991-4fe7-41d5-bfd7-0bb3180b05a1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos PF-IFC CRUD",
					"description": "",
					"item": [
						{
							"name": "Junos PF-IFC CRUD Setup",
							"description": "",
							"item": [
								{
									"name": "configure",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f72de88c-0e77-4721-9bb5-095a907868b1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset class-of-service forwarding-classes queue 0 data-queue\nset class-of-service classifiers exp {{pf_exp_name}} forwarding-class data-queue loss-priority low code-points 000\nset class-of-service classifiers inet-precedence {{pf_inet_precedence_name}} import default\nset class-of-service schedulers sched\nset class-of-service forwarding-classes queue 1 scheduler-class\nset class-of-service scheduler-maps {{pf_sched_map_name}} forwarding-class scheduler-class scheduler sched\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos PF-IFC CRUD Teardown",
							"description": "",
							"item": [
								{
									"name": "deconfigure",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cebc0a48-fa6c-436a-b6b9-fc93d0674858",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\n delete class-of-service\n commit\n exit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos IFC-ACL CRUD",
					"item": [
						{
							"name": "Junos IFC-ACL CRUD Setup",
							"item": [
								{
									"name": "create ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91489968-2f11-4358-b5c9-ea12c71833f4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset firewall family inet filter {{iacl_in-acl-name1}} term term1 from address 20.20.20.21/32\nset firewall family inet filter {{iacl_in-acl-name2}} term term2 from address 20.20.20.22/32\nset firewall family inet filter {{iacl_out-acl-name1}} term term3 from address 20.20.20.23/32\nset firewall family inet filter {{iacl_out-acl-name2}} term term4 from address 20.20.20.24/32\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5dd5bd9-a472-4316-81c6-c0cdd8bf98f8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"No error occured\", function() {",
													"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9712a33e-1bb9-495e-8bc3-823f6ebf07eb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"No error occured\", function() {",
													"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos IFC-ACL CRUD Teardown",
							"item": [
								{
									"name": "delete ifc acls",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a7b4765-80e7-4294-b57a-4aa59e4ccd09",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete firewall\ncommit\nexit\"\n  }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3ed03c8-74f5-45b3-94b9-a5296932175d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"No error occured\", function() {",
													"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08aac9fc-feda-4623-84f8-375cd674ac30",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"No error occured\", function() {",
													"  pm.expect(pm.response.text()).not.to.include(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos BGP CRUD",
					"item": [
						{
							"name": "Junos BGP CRUD Setup",
							"item": [
								{
									"name": "delete previouse bgp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7765160d-af57-4805-955b-0cc767ddfbc5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete routing-options autonomous-system {{bgp_as}}\ndelete protocols bgp group {{bgp_group}} type internal\ndelete protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "set bgp groups precondition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7765160d-af57-4805-955b-0cc767ddfbc5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\nset routing-options autonomous-system {{bgp_as}}\nset protocols bgp group {{bgp_group}} type internal\nset protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "bgp sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d584e16b-3e69-45a3-8dc2-cc06a616a1e1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"error-type not present\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "bgp replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd0c130d-57b0-42bf-b83a-6344e2f966c3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Junos BGP CRUD Teardown",
							"item": [
								{
									"name": "delete previouse bgp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7765160d-af57-4805-955b-0cc767ddfbc5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\" :\n  {\n     \"ios-cli:command\" : \"configure\ndelete routing-options autonomous-system {{bgp_as}}\ndelete protocols bgp group {{bgp_group}} type internal\ndelete protocols bgp group {{bgp_group2}} type internal\ncommit\nexit\"\n  }\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/network-topology:network-topology/topology/{{topology_id_cli}}/node/{{node_id}}/yang-ext:mount/cli-unit-generic:execute-and-read"
									},
									"response": []
								},
								{
									"name": "bgp sync-from-network",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d584e16b-3e69-45a3-8dc2-cc06a616a1e1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													"",
													"pm.test(\"error-type not present\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-sync-status-results\"][\"node-sync-status-result\"][0]).to.not.have.own.property(\"error-type\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:sync-from-network"
									},
									"response": []
								},
								{
									"name": "bgp replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd0c130d-57b0-42bf-b83a-6344e2f966c3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Junos LACP CRUD",
					"item": [
						{
							"name": "Junos LACP CRUD Setup",
							"item": [
								{
									"name": "create empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c16edf48-581d-4456-9ca5-c684eb373a45",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code\", function () {",
													"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lacp_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{lacp_intf-id}}\",\n                \"enabled\": false\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c62a45ba-132b-44e0-9d47-135488146df4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"",
													"pm.test(\"Validate configuration-status\", function() {",
													"  if ( \"node-config-results\" in pm.response.json()[\"output\"] ){",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"  }",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created empty interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e31297c7-1961-463b-9aa5-57fa37688b14",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "SYSLOG CRUD",
					"item": [
						{
							"name": "create syslog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1578b4b-f30e-48ea-ae8b-03469289646e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n                \"enabled-logging-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "create syslog dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a14ac723-063e-47bb-9333-68cc83fddd86",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    ",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains conf t', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"conf t\");",
											"    });",
											"    pm.test('dryrun - contains interface Bundle-Ether7029', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Bundle-Ether7029\");",
											"    });",
											"    pm.test('dryrun - contains logging events link-status', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"logging events link-status\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "create syslog commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f85eb79c-5e55-40ba-9211-35d77dc6e2d1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created syslog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce3a3dd6-75fc-4a3c-8a25-69a29b9e5783",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-logging:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-logging:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate event-name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-logging:interface\"][0][\"config\"][\"enabled-logging-for-event\"][0][\"event-name\"]).to.eql(\"frinx-event-types:LINK_UP_DOWN\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "update syslog => delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14945087-799b-4b69-9a00-b470ae5ce1cd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "430b0e34-2763-4b20-b2d0-ef49bb07d851",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains conf t', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"conf t\");",
											"    });",
											"    pm.test('dryrun - contains interface Bundle-Ether7029', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Bundle-Ether7029\");",
											"    });",
											"    pm.test('dryrun - contains no logging events link-status', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no logging events link-status\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "update syslog commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7d28c09-265b-4791-92f0-2424c083cbd5",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted syslog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "016ce974-9150-4c9d-aba8-d654d930099f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-logging:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-logging:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate event-name\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"frinx-event-types:LINK_UP_DOWN\");",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "delete syslog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "396dcfd2-c8d7-4c10-9272-87c2009276c3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "delete syslog commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff10777e-fa02-4cc8-b84a-cdae1b8fd10f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"});",
											"pm.test(\"Validate rollback-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"rollback-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted syslog",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc466851-d72b-4345-83dc-85e8081280ba",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-logging:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-logging:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate event-name\", function() {",
											"  pm.expect(pm.response.text()).not.to.include(\"frinx-event-types:LINK_UP_DOWN\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-logging:logging/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "syslog replace-config-with-operational",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65159759-a5fc-4e66-a706-b1df2445a96b",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"password": "admin",
										"username": "admin"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\n\t\t\t\t\"{{node_id}}\"\n\t\t\t]\n\t\t}\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC-FULL CRUD",
					"item": [
						{
							"name": "create filled interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a1dfa4d-f504-48d6-ae0a-41b960668c23",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_true}}\n            },\n        \t\"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n        \t},\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            },\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id}}\"\n\t\t\t\t}\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "486e0677-ad9c-4908-b97d-333c63abc5dd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains dampening 1 750 2000 4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"dampening 1 750 2000 4\");",
											"    });",
											"    pm.test('dryrun - contains carrier-delay up 10 down 20', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"carrier-delay up 10 down 20\");",
											"    });",
											"    pm.test('dryrun - contains bundle id 151 mode on', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bundle id 151 mode on\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9b08d16-8970-405b-bcac-d76429d3a152",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created filled interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "737a7277-1dc6-470c-94ba-cae71b9690da",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate number of interfaces\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Validate hold-time down\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_down\")));",
											"});",
											"pm.test(\"Validate hold-time up\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_up\")));",
											"});",
											"",
											"",
											"pm.test(\"Validate damping suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_suppress\")));",
											"});",
											"pm.test(\"Validate damping max-suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_max-suppress\")));",
											"});",
											"pm.test(\"Validate damping half-life\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_half-time\")));",
											"});",
											"pm.test(\"Validate damping reuse\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_reuse\")));",
											"});",
											"pm.test(\"Validate damping enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id\"));",
											"});",
											"",
											"",
											"",
											"pm.test(\"Validate ethernet presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"pm.test(\"Validate damping presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
											"});",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "update interface ip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64f06e44-3e18-45bc-bd57-00c68172dd0f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_true}}\n            },\n        \t\"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_down}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n        \t},\n        \t\"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a6f8488-788e-4571-a177-e8e3ade64d0e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no bundle id', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bundle id\");",
											"    });",
											"    pm.test('dryrun - contains no carrier-delay', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no carrier-delay\");",
											"    });",
											"    pm.test('dryrun - contains no lacp period short', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no lacp period short\");",
											"    });",
											"    pm.test('dryrun - contains no dampening', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no dampening\");",
											"    });",
											"    pm.test('dryrun - contains dampening 1 750 2500 4', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"dampening 1 750 2500 4\");",
											"    });",
											"    pm.test('dryrun - contains carrier-delay up 20 down 20', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"carrier-delay up 20 down 20\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
											"    });",
											"    pm.test('dryrun - contains ip address 6.6.6.6 255.255.255.0', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ip address 6.6.6.6 255.255.255.0\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0c7ef62-2f2f-4d18-8340-a4dae3aaee3d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf3faf7c-752c-471a-a26c-93d221263c95",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate number of interfaces\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Validate hold-time down\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_down\")));",
											"});",
											"pm.test(\"Validate hold-time up\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_down\")));",
											"});",
											"",
											"",
											"pm.test(\"Validate damping suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_suppress_upd\")));",
											"});",
											"pm.test(\"Validate damping max-suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_max-suppress\")));",
											"});",
											"pm.test(\"Validate damping half-life\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_half-time\")));",
											"});",
											"pm.test(\"Validate damping reuse\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_reuse\")));",
											"});",
											"pm.test(\"Validate damping enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"pm.test(\"Validate subinterfaces presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
											"});",
											"pm.test(\"Validate prefix-length\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length\")));",
											"});",
											"",
											"",
											"pm.test(\"Validate ethernet presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"pm.test(\"Validate damping presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
											"});",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "make interface empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fa1de1f-0465-4fa4-88a3-3562d1c48191",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{eth_intf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ethernetCsmacd\",\n                \"name\": \"{{eth_intf-id}}\",\n                \"enabled\": {{eth_enabled_true}}\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33abe38f-6771-47d0-973f-7a56825a2082",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7968c15a-6421-47f3-a932-f87a943c4e16",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate number of interfaces\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"].length).to.eql(1);",
											"});",
											"",
											"pm.test(\"Validate config name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"pm.test(\"Validate config enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
											"});",
											"",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
											"});",
											"",
											"pm.test(\"Validate subinterfaces presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Validate ethernet presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"pm.test(\"Validate damping presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC CRUD",
					"item": [
						{
							"name": "IFC CRUD Config",
							"item": [
								{
									"name": "update interface config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "418597d4-ea92-4f55-a6b2-7a47c77cd191",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"frinx-openconfig-interfaces:config\": {\n    \t\t\"type\": \"iana-if-type:ethernetCsmacd\",\n            \"mtu\": {{eth_mtu}},\n\t\t    \"description\": \"{{eth_description_upd}}\",\n            \"enabled\": {{eth_enabled_true}}\n    }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/config"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ef767bd-b708-41bc-be20-dea7dc8e767d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated interface config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23b46270-e0c7-4a97-9d50-0f13e122b957",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"eth_description_upd\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_mtu\")));",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD HoldTime",
							"item": [
								{
									"name": "create hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afbca41a-61b9-4a6f-9fff-a41162faf734",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_down}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "create hold-time commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1ec3016-aea9-4bba-a694-ab38bd47a98c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bba50f97-7f62-4011-976f-60b50d3a4f0c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"hold-time\");",
													"});",
													"pm.test(\"Validate hold-time down\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_down\")));",
													"});",
													"pm.test(\"Validate hold-time up\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_up\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef8d427d-fdea-42bb-a490-f653cb933705",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"hold-time\": {\n                \"config\": {\n                    \"up\": {{eth_hold_time_up}},\n                    \"down\": {{eth_hold_time_up}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30dcc95f-be92-4d7b-bfe9-d58662b9a7e5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b2c6357-7ee5-41a3-9538-3e9af3d0e294",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"hold-time\");",
													"});",
													"pm.test(\"Validate hold-time down\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"down\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_up\")));",
													"});",
													"pm.test(\"Validate hold-time up\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"hold-time\"][\"config\"][\"up\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_hold_time_up\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "066e5c42-4fd5-44c8-bdc9-5a33520c24ff",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/hold-time"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b517928-6f39-4850-9913-a09142c23d7b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted hold-time",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0272d7ac-5a7a-486d-8e00-116555c7a87d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Subinterface",
							"item": [
								{
									"name": "create subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d4f3186-9db6-4757-b7e2-bdb15e32162f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b70b518f-ebcb-4197-8515-1a7271017e94",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32ee38e2-d2e5-4999-88fa-508335005690",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update subinterface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23a8ffc5-e127-47b6-8b4d-36240e079453",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{eth_ifc_ip2}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{eth_ifc_ip2}}\",\n                                            \"prefix-length\": {{eth_ifc_pref_length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dc2d7b6-fe21-4cce-acf5-5c3af5095726",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adcc05f0-ee66-4305-b855-138cc7db0dd7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip2\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"eth_ifc_ip2\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_ifc_pref_length\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bce89c34-94b5-48b3-8e60-8078c8feb6de",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8acc3cff-3875-48aa-99c7-ae7258d8d422",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show empty subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b2597a2-eca8-440c-973f-c13d77a1b9ec",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Damping",
							"item": [
								{
									"name": "create frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4747e48-28fd-41ba-b1b2-f52c142b4875",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse}},\n                    \"suppress\": {{eth_suppress}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e9f04de-169c-4e69-8de8-34c73d3f26f8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36cb0fdd-19b4-4532-9940-6c83406c9b7d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate damping suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_suppress\")));",
													"});",
													"pm.test(\"Validate damping max-suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_max-suppress\")));",
													"});",
													"pm.test(\"Validate damping half-life\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_half-time\")));",
													"});",
													"pm.test(\"Validate damping reuse\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_reuse\")));",
													"});",
													"pm.test(\"Validate damping enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c5ec55f-f1d1-4977-adce-b31e256aa90a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": true,\n                    \"half-life\": {{eth_half-time}},\n                    \"reuse\": {{eth_reuse_upd}},\n                    \"suppress\": {{eth_suppress_upd}},\n                    \"max-suppress\": {{eth_max-suppress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82485d7c-5178-47dc-9475-0794e46c08f9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f79ee130-efa1-4fa2-81f7-5b9a1f5c3b7c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate damping suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_suppress_upd\")));",
													"});",
													"pm.test(\"Validate damping max-suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_max-suppress\")));",
													"});",
													"pm.test(\"Validate damping half-life\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_half-time\")));",
													"});",
													"pm.test(\"Validate damping reuse\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_reuse_upd\")));",
													"});",
													"pm.test(\"Validate damping enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8750b86c-4a6c-4f8c-b269-159f19977430",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-damping:damping"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07296e99-ffd8-4101-a593-b013fa8a5bb7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted frinx-damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a163ba3-249e-446e-8b54-90cbf17b0ae0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "886e6448-c20a-437a-8ecd-18b53b731086",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9418a9e-ea1c-41e2-ae4e-1f83a924399f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD Ethernet",
							"item": [
								{
									"name": "create frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0425c5f2-c483-45be-9b84-a6512a6635a1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dfec3ad-5461-41ff-802a-7aeb96e2559f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4277581-ef3a-4a9f-9d6c-ca6882e8ea77",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8774002f-b354-4d04-8847-df4ff0a5450e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lag_prefix}}{{eth_bundle_id_upd}}\"\n\t\t\t\t}\n            }\n\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a10553d-7b66-47b2-acd7-8fc284f93a52",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1a47549-fa9d-453d-afd0-5e4c388d453e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"eth_bundle_id_upd\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be5579d3-0ab4-487a-ab89-ab1674ae9145",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6956a77a-3fa0-41c7-aa0f-d8f9aa038233",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"//    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"//        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"//    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3ae71e1-895e-4c59-87e4-4ec0739635d0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted frinx-eth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e58dd5c-7043-47c9-8037-6a20e54d2046",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC CRUD  Statistics",
							"item": [
								{
									"name": "create frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d345d38f-aa99-498a-960e-6b6e353fae35",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe025f55-9a64-40bb-a518-55c220c65bf3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "064a8c01-e121-4550-b734-5866c12e34f5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate load-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_load_interval\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8684951-31eb-4d84-89e5-0e8a15509219",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"frinx-cisco-if-extension:statistics\": {\n                \"config\": {\n                    \"load-interval\": {{eth_load_interval_upd}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20c13e84-1ba8-4df1-a743-4882da384841",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65d5a3b8-b755-46a9-83d5-4fec483f94bd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													"",
													"pm.test(\"Validate load-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_load_interval_upd\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76779030-7cf2-42fc-97f9-f4ca4f37aada",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}/frinx-cisco-if-extension:statistics"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3043a102-aa3d-4f51-a35e-be6cae6dae99",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted frinx-stats",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb5e6a00-47ea-4bbb-b84b-a20d40c054cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"eth_enabled_true\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"description\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"]).to.not.have.property(\"mtu\")",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"eth_intf-id\"));",
													"});",
													"",
													"pm.test(\"Subinterface not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Statistics not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Ethernet not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
													"});",
													"",
													"pm.test(\"Damping not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate hold-time presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{eth_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SNMP",
					"item": [
						{
							"name": "SNMP Gig",
							"item": [
								{
									"name": "create snmp => disable snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77965022-3b19-4919-9755-8611a4be0db3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "update dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fb6f4fa-131d-4131-b64e-63be9084ed6a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\"target-nodes\": {\n\t\t\t\"node\": [\n\t\t\t\t\"{{node_id}}\"\n\t\t\t]\n\t\t}\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3f48eab-5857-415b-a3d7-44a3095e41c2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c77d9d63-47c1-4b55-8483-b9f39e5ed20e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"snmp_inf_id_physical\"));",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"snmp_inf_id_physical\"));",
													"});",
													"",
													"pm.test(\"Validate snmp trap event unset\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"]).to.not.have.property(\"enabled-trap-for-event\")",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "update snmp => enable snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d75f34f-58f6-44f7-bf49-b5e113f3aee2",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{snmp_inf_id_physical}}\",\n            \"config\": {\n                \"interface-id\": \"{{snmp_inf_id_physical}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "920cf672-c723-40ae-a5d9-ba0b78ddc580",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains snmp-server interface GigabitEthernet0/0/0/4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"snmp-server interface GigabitEthernet0/0/0/4\");",
													"    });",
													"    pm.test('dryrun - contains no notification linkupdown disable', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no notification linkupdown disable\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc1bef77-ee5a-4d06-b458-26e3c4628d03",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show enabled snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ca48b63-da2f-466b-af60-2cf3b13e4769",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"snmp_inf_id_physical\"));",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"snmp_inf_id_physical\"));",
													"});",
													"",
													"pm.test(\"Validate snmp trap event set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"]).to.have.property(\"enabled-trap-for-event\")",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"]).to.eql(\"frinx-event-types:LINK_UP_DOWN\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "delete snmp => disable snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75bdef65-f8a2-4e67-9a70-46d28f3438b9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "268c06eb-d8e0-4a7d-b603-2071110b6198",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains snmp-server interface GigabitEthernet0/0/0/4', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"snmp-server interface GigabitEthernet0/0/0/4\");",
													"    });",
													"    pm.test('dryrun - contains notification linkupdown disable', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"notification linkupdown disable\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d2d18cb-59d1-455d-9b6a-503d63f5da4d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a4e1bf3-0679-4040-84e0-fdd9544faeeb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{snmp_url_inf_id_physical}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SNMP Lag",
							"item": [
								{
									"name": "create snmp => enable snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c69fca88-9133-4a9c-a645-cf1ba110c697",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b96bdd0-fcfb-4d59-a1d6-2541f50004bc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show enabled snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bac0ab54-739f-41f6-9ad4-df885ac5d0c0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate snmp trap event set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"]).to.have.property(\"enabled-trap-for-event\")",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"]).to.eql(\"frinx-event-types:LINK_UP_DOWN\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "update snmp => disable snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77965022-3b19-4919-9755-8611a4be0db3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b96bdd0-fcfb-4d59-a1d6-2541f50004bc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdf74d18-ff40-4a90-85a8-e61fa8d75a19",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate snmp trap event unset\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"]).to.not.have.property(\"enabled-trap-for-event\")",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete snmp => disable snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e1ff45d-2acf-4594-8f4f-029349beaffa",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42f88601-cb74-4239-bbef-c296a23dc535",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fc7447e-751a-438c-896b-aea40dd6a1bf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "SNMP Non",
							"item": [
								{
									"name": "create snmp - while no interface is present",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bcc31ef-e9a9-4111-9e83-f640470c15e8",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"interface-id\": \"{{lag_prefix}}{{lag_inf-id}}\",\n                \"enabled-trap-for-event\": [\n                    {\n                        \"event-name\": \"frinx-event-types:LINK_UP_DOWN\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "468db904-2177-40b4-8842-5dc81de262ed",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show enabled snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ae3ce59-95dd-4118-85cd-c94a02666b01",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate snmp trap event set\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"]).to.have.property(\"enabled-trap-for-event\")",
													"  pm.expect(pm.response.json()[\"frinx-snmp:interface\"][0][\"config\"][\"enabled-trap-for-event\"][0][\"event-name\"]).to.eql(\"frinx-event-types:LINK_UP_DOWN\");",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete snmp while interface does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86105036-284b-482a-969f-17edba554394",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "448d93e0-9d0c-4555-adef-c05159ef1baf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show disabled snmp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8d4bce7-f857-4955-a0bf-1bbc16518f77",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-snmp:snmp/interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "PF-IFC CRUD",
					"item": [
						{
							"name": "PF-IFC CRUD CiscoExt",
							"description": "",
							"item": [
								{
									"name": "create interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c752af8-5788-41de-b062-4aafde58980c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n\n{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{policy_interface}}\",\n            \"config\": {\n                \"interface-id\": \"{{policy_interface}}\",\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"{{input_policy}}\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"{{output_policy}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "426e7ab6-230e-44e7-a70b-2954656454f6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ac138a2-552e-4f2d-ac8f-bf3daee8f4cb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show policy on interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29df394c-3d5f-4ca2-b1ed-52b675e36f7d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"pm.test(\"Validate config interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:input-service-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(postman.getEnvironmentVariable(\"input_policy\"));",
													"});",
													"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:output-service-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(postman.getEnvironmentVariable(\"output_policy\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "update interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be658ff8-c8f2-4e79-97e5-af8f1a03545a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n\n{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n                \"frinx-cisco-pf-interfaces-extension:input-service-policy\": \"{{input_policy2}}\",\n                \"frinx-cisco-pf-interfaces-extension:output-service-policy\": \"{{output_policy2}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "update dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e202af4e-b8a7-4896-b24a-28d670ee0509",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59200c8c-4870-4cbf-8fe8-66a6f4fdc559",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19060ea2-3431-49d6-9695-d95fdf5ce8e4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"pm.test(\"Validate config interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:input-service-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:input-service-policy\"]).to.eql(postman.getEnvironmentVariable(\"input_policy2\"));",
													"});",
													"pm.test(\"Validate frinx-cisco-pf-interfaces-extension:output-service-policy\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-cisco-pf-interfaces-extension:output-service-policy\"]).to.eql(postman.getEnvironmentVariable(\"output_policy2\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "delete interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab780035-fdf0-4022-8f8e-05db89e68f03",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00b3b838-5d88-4800-a8f6-4466070fd045",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains conf t', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"conf t\");",
													"    });",
													"    pm.test('dryrun - contains no service-policy input', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no service-policy input\");",
													"    });",
													"    pm.test('dryrun - contains no service-policy output', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no service-policy output\");",
													"    });",
													"    pm.test('dryrun - contains interface Bundle-Ether666', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Bundle-Ether666\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab6c4752-85a3-4200-a4a8-91d7525d61ea",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df1712d1-38c7-4cf7-8557-76edbfd38488",
												"type": "text/javascript",
												"exec": [
													"",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "PF-IFC CRUD JunosExt",
							"description": "",
							"item": [
								{
									"name": "create interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c73f24b8-b802-4ca1-91d0-e9c8e1e5d682",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": {{policy_interface}},\n            \"config\": {\n                \"interface-id\": {{policy_interface}},\n\t\t\t\t\"frinx-juniper-pf-interfaces-extension:scheduler-map\": \"{{pf_sched_map_name}}\",\n                \"frinx-juniper-pf-interfaces-extension:classifiers\": {\n                    \"exp\": {\n                           \"name\": \"{{pf_exp_name}}\"\n                \t},\n                    \"inet-precedence\": {\n                            \"name\": \"{{pf_inet_precedence_name}}\"\n                    }\n                }            \n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c0ea693-4bd9-4938-b427-a1eb119ac37f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show policy on interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3136c226-777e-448a-9a2b-49ab8cec4fc4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-juniper-pf-interfaces-extension:classifiers\"][\"inet-precedence\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"pf_inet_precedence_name\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-juniper-pf-interfaces-extension:classifiers\"][\"exp\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"pf_exp_name\"));",
													"});",
													"pm.test(\"Validate interface-id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"policy_interface\"));",
													"});",
													"pm.test(\"Validate frinx-juniper-pf-interfaces-extension:scheduler-map\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"frinx-juniper-pf-interfaces-extension:scheduler-map\"]).to.eql(postman.getEnvironmentVariable(\"pf_sched_map_name\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "delete interface policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84fc14b8-c9ee-4727-b6e8-9b82bc35f1d3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f5c221f-8bbc-4718-b758-ee4abf4b452c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "048784aa-3fc8-4576-966b-93d80e24921f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{pf_ni-name}}/policy-forwarding/interfaces/interface/{{policy_interface}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "RSVP CRUD",
					"item": [
						{
							"name": "create rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92e9c5a6-61e9-42a3-8c2c-61924ba2c3d7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4b8b0901-f715-44ce-bb5f-cb6fccb4e16d",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_create}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5cfa192-7502-4814-9d6e-0f5d9441295f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/1\");",
											"    });",
											"    pm.test('dryrun - contains bandwidth 100', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bandwidth 100\");",
											"    });",
											"    pm.test('dryrun - contains rsvp', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"rsvp\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c9528c6-48e0-4159-a2d2-a2bdfa47ce25",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3773e9b0-c09c-4ff3-a287-4e87fd5186fe",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"rsvp_intf-id\"));",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"rsvp_intf-id\"));",
											"});",
											"pm.test(\"Validate frinx-mpls-rsvp-extension:bandwidth\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"rsvp_bandwidth_create\")));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a1a8373-09d4-4ef0-975e-145c8c2d9de3",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "update rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "871b6c12-21fd-4630-8762-94424f07c7d9",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3883e8b2-5daa-45dc-9d63-819ac0bd570f",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n         {\n             \"interface-id\": \"{{rsvp_intf-id}}\",\n             \"config\": {\n                 \"interface-id\": \"{{rsvp_intf-id}}\"\n             },\n             \"subscription\": {\n                \"config\": {\n                    \"frinx-mpls-rsvp-extension:bandwidth\": {{rsvp_bandwidth_update}}\n                }\n             }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e053ba5-2a95-4cce-b385-7f39e769b858",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains no bandwidth', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no bandwidth\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/1\");",
											"    });",
											"    pm.test('dryrun - contains bandwidth 200', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"bandwidth 200\");",
											"    });",
											"    pm.test('dryrun - contains rsvp', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"rsvp\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41aad036-a904-471f-bdff-846403d29731",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02ac5f99-8998-47f4-aa56-043dc5325d4f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"rsvp_intf-id\"));",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"rsvp_intf-id\"));",
											"});",
											"pm.test(\"Validate frinx-mpls-rsvp-extension:bandwidth\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"subscription\"][\"config\"][\"frinx-mpls-rsvp-extension:bandwidth\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"rsvp_bandwidth_update\")));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3721ed9c-0d65-41de-8aa1-146e999f61fc",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "delete rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36df30b4-1f05-40d8-bab6-4b0121db4860",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05d13cbb-01bd-4cd3-b108-2b9203a6b951",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cde2c2bd-6b50-4a39-8edd-93a7a75000fd",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted rsvp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "68369996-3436-4263-97aa-6880e6b96859",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2278b7b9-c7c7-4996-9614-c5829a423190",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{rsvp_ni_name}}/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/{{rsvp_url_intf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "IFC-ACL CRUD",
					"item": [
						{
							"name": "IFC-ACL CRUD Full",
							"item": [
								{
									"name": "create acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac3b7e4e-96ff-4ddf-8cf9-7fb94fefc254",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e45e906-fc14-4b3d-b593-6ab3be017794",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fbd7b29-8f09-4c63-8bff-6e7299af6385",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89235eae-01e2-4f0c-b46e-5b49e6a95cfc",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name1\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name1\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac02827e-3b1f-4b16-8759-34c513577445",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95fc8fb4-1c72-4bf0-a3ec-dbb3a28f45a1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains no ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl2 ingress\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86134579-ce6c-4c6f-8198-fae2338e41f7",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2b77a9c-afec-4e59-8d45-927021145143",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name2\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name2\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfee9fe3-b061-458f-9733-91394bfb9478",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "432bee2e-6ee4-44ed-913b-d0d5ebc8bc4d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains no ipv4 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl2 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"} else {",
													"    console.warn(\"Dry run manager content not tested in details for \" + postman.getEnvironmentVariable(\"env_type\"))",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d3cbcb4-4af9-42ff-847b-4b05e1a0f277",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc8e461a-2e1f-4740-998e-80671e321a49",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "IFC-ACL CRUD Parts",
							"item": [
								{
									"name": "create acl ingress egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e930ea9-118c-4b1d-9728-e182fe9cb488",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"id\": \"{{iacl_intf-id}}\",\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            },\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name1}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name1}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "create dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7266ed0-c9d3-4d20-8185-c6848f988286",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "469be1cd-6b70-4fe7-a464-852ab8abaa00",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7cbdade-0f6c-4146-b80b-6f4f504ad437",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name1\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name1\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update acl egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4adaf027-a0bc-4328-b9e6-9b95d9a83300",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"egress-acl-sets\": {\n                \"egress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_out-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_out-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/egress-acl-sets"
									},
									"response": []
								},
								{
									"name": "update egress dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "498e5ae4-ac6d-41bb-af9e-5a05be4d2253",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl1 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl1 egress\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "update egress commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5c13289-5f4f-4ba3-a83d-ff2a79c8c7b4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated egress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9387476e-fb29-4ee1-bbe3-95ff7689a54c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name1\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "update acl ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18026fe9-8fea-4676-957b-aee85e97892c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"ingress-acl-sets\": {\n                \"ingress-acl-set\": [\n                    {\n                        \"set-name\": \"{{iacl_in-acl-name2}}\",\n                        \"type\": \"ACL_IPV4\",\n                        \"config\": {\n                            \"set-name\": \"{{iacl_in-acl-name2}}\",\n                            \"type\": \"ACL_IPV4\"\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/ingress-acl-sets"
									},
									"response": []
								},
								{
									"name": "update ingress dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16f2f544-06bd-4b61-8e65-1530bf327fe4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group inacl1 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl1 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"    pm.test('dryrun - contains ipv4 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"ipv4 access-group inacl2 ingress\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "update ingress commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8201ef67-23fd-4de0-8cc5-b3e5fac8bd22",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated ingress",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21261c03-6787-48fe-8e98-e80287138470",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name2\"));",
													"});",
													"pm.test(\"Validate ingress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"ingress-acl-sets\"][\"ingress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_in-acl-name2\"));",
													"});",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete ingress acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18cb720b-40a0-43f3-9663-d6ebfa0352c0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/ingress-acl-sets"
									},
									"response": []
								},
								{
									"name": "delete ingress dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c33d211-e126-46a6-9964-739ecc35b80c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group inacl2 ingress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group inacl2 ingress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "delete ingress commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58d7ec25-8412-4738-b352-1d70d576a576",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted ingress acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3df0db56-81f3-4fc8-b1b1-1af078b09b9e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.not.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.have.property(\"egress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate config egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"config\"][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													"pm.test(\"Validate egress acl\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"egress-acl-sets\"][\"egress-acl-set\"][0][\"set-name\"]).to.eql(postman.getEnvironmentVariable(\"iacl_out-acl-name2\"));",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete egress acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18cb720b-40a0-43f3-9663-d6ebfa0352c0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}/egress-acl-sets"
									},
									"response": []
								},
								{
									"name": "delete egress dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8e90195-73e1-476e-9ff7-b2814011e65d",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"    pm.test('dryrun - contains no ipv4 access-group outacl2 egress', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no ipv4 access-group outacl2 egress\");",
													"    });",
													"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/0', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/0\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "delete egress commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58d7ec25-8412-4738-b352-1d70d576a576",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted egress acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "210f3f9a-be3c-448e-a9b4-4764543d5d50",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.not.have.property(\"ingress-acl-sets\")",
													"});",
													"",
													"pm.test(\"Validate id\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"iacl_intf-id\"));",
													"});",
													"",
													"pm.test(\"Validate egress presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-acl:interface\"][0]).to.not.have.property(\"egress-acl-sets\")",
													"});",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18cb720b-40a0-43f3-9663-d6ebfa0352c0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58d7ec25-8412-4738-b352-1d70d576a576",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted acl",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77e3aaf7-5e7a-489d-bcb8-ee81cec0b9bf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 404\", function () {",
													"  pm.response.to.have.status(404);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-acl:acl/interfaces/interface/{{iacl_url_intf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LAG-FULL CRUD",
					"item": [
						{
							"name": "create lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9ea4ddb-d762-4252-9490-a8084d94dec8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b90f2b90-bc98-4499-b00f-b7eaa204828a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0204d7c0-9440-43b6-89c8-7a667c2ab777",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
											"});",
											"pm.test(\"Validate prefix-length\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
											"});",
											"",
											"pm.test(\"Validate suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_suppress\")));",
											"});",
											"pm.test(\"Validate max-suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_max-supress\")));",
											"});",
											"pm.test(\"Validate half-life\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_half-life\")));",
											"});",
											"pm.test(\"Validate damp enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_enabled\")));",
											"});",
											"pm.test(\"Validate reuse\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_reuse\")));",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
											"});",
											"pm.test(\"Validate min-links\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
											"});",
											"",
											"pm.test(\"Validate statistics presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "update lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27db9835-27cb-49da-9cca-a6644acfb54d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description_upd}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": \"{{lag_prefix-length}}\"\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n            \"frinx-damping:damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress_upd}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            },\n            \"frinx-openconfig-if-aggregate:aggregation\": {\n                \"config\": {\n                    \"min-links\": {{lag_min-links}}\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
								"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49e70578-9971-42d2-98ac-47a8851f824a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67bcb501-64ae-4e09-9e68-de8583d53ec1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
											"});",
											"pm.test(\"Validate ip\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
											"});",
											"pm.test(\"Validate prefix-length\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
											"});",
											"",
											"pm.test(\"Validate suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_suppress_upd\")));",
											"});",
											"pm.test(\"Validate max-suppress\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_max-supress\")));",
											"});",
											"pm.test(\"Validate half-life\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_half-life\")));",
											"});",
											"pm.test(\"Validate damp enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_enabled\")));",
											"});",
											"pm.test(\"Validate reuse\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_reuse\")));",
											"});",
											"pm.test(\"Validate enabled\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
											"});",
											"pm.test(\"Validate description\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description_upd\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
											"});",
											"pm.test(\"Validate mtu\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
											"});",
											"pm.test(\"Validate min-links\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
											"});",
											"",
											"pm.test(\"Validate statistics presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "delete lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49e88d63-c0d6-44a4-9558-df3b58b3c4cc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "delete lag commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1317bb7b-fe31-41ae-b0a0-3f5ec08e35ce",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted lag interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8edc2e5f-95ae-47f8-8344-023b7a14fdf4",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
							},
							"response": []
						},
						{
							"name": "show deleted lag interface from interface list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6e1b032-ad0f-4bab-9e6b-0406be3dd1f0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Lag not in interfaces\", function () {",
											"  pm.expect(pm.response.text()).not.to.include(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"))",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LAG CRUD",
					"item": [
						{
							"name": "LAG CRUD Config",
							"item": [
								{
									"name": "update lag config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c52b181-54b3-4efb-89af-958d79532529",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description_upd}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            }\n        }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}",
										"description": "At first we try to update all values via openconfig - no change in comparing with previous values."
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7a95dd8-6e8a-431d-8626-9db732c365f4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ec47133-0e28-498c-9870-e5b7db5b3296",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description_upd\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Subinterface",
							"item": [
								{
									"name": "create interface ip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d10d1a1-ea2b-4683-8ecc-8c2982dcc879",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": {{lag_prefix-length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8436bd0-4372-492b-8999-ded11c8f0f55",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "127002c6-5483-4799-9052-edc4298db10f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate config ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a56fdb0-e6ad-48f7-ba5a-ee53fba50c23",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/subinterfaces"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6530b8c1-450c-439d-9a59-02eed01e675f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show removed lag subinterface",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d41127d0-0492-4251-85f8-c342366dc56c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Damping",
							"item": [
								{
									"name": "create lag damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b3dda59-e6bb-41f0-94ce-e8f64a8b2353",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n           \"damping\": {\n                \"config\": {\n                    \"enabled\": {{lag_damp_enabled}},\n                    \"half-life\": {{lag_damp_half-life}},\n                    \"reuse\": {{lag_damp_reuse}},\n                    \"suppress\": {{lag_damp_suppress}},\n                    \"max-suppress\": {{lag_damp_max-supress}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/damping"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20c4f6c9-0df3-4e51-ba64-a84da308e317",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "326c6e67-4bc1-4bf5-bf8f-7bd9afdef4cd",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"",
													"pm.test(\"Validate suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_suppress\")));",
													"});",
													"pm.test(\"Validate max-suppress\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"max-suppress\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_max-supress\")));",
													"});",
													"pm.test(\"Validate half-life\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"half-life\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_half-life\")));",
													"});",
													"pm.test(\"Validate damp enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_enabled\")));",
													"});",
													"pm.test(\"Validate reuse\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-damping:damping\"][\"config\"][\"reuse\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_damp_reuse\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7c4a7a6-e770-436f-a5a1-5a73719a7e1f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/damping"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d661ba1-5b4e-4d3c-a1f6-70101ea78677",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted lag damping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "491c1b57-7e48-438c-9081-c7a23daf0d9c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD Statistics",
							"item": [
								{
									"name": "create statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "304bd9fb-f7d4-4e79-896c-abcc2d8f7d39",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n            \"statistics\": {\n                \"config\": {\n                \t\"load-interval\": {{lag_load-interval}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/statistics"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acc4b520-89a0-4de9-855a-c200c59f3e60",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42e18e81-a029-47f9-8945-e171894c6b6f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-cisco-if-extension:statistics\"][\"config\"][\"load-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_load-interval\")))",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag statistics",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "108066cb-6d60-451d-87f6-929e25c606fb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/statistics"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e18b0885-47c8-43a4-884d-7ded0a51b9f3",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show LAG interface without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "651954bc-5bfd-4d14-8ae9-15d1488ba03f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationNoBfd",
							"item": [
								{
									"name": "create aggregation without bfd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7366c77-47ca-49fc-b205-f8149d150336",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        }\n    }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "898cb395-fb38-4fad-9300-c57880f3ba25",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show aggregation without BFD",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcd0ba56-e3ef-4a1a-946e-d1ec284427d4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c66f8d80-32e8-431b-a0ef-4c7172dacc83",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "416743ce-bbd6-4655-b2c3-0a22346e1c73",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface without aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d6abba6-ff84-4ca8-a1bd-0fe5d047e605",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationBfd",
							"item": [
								{
									"name": "create aggregation with bgd",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09a10f97-a0a3-4310-8e37-5eff6086456f",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"aggregation\": {\n    \t\"config\": {\n            \"min-links\": {{lag_min-links}}\n        },\n        \"bfd\": {\n            \"config\": {\n                \"destination-address\": \"{{lag_bfd_destination-address}}\",\n                \"multiplier\": {{lag_bfd_multiplier}},\n                \"min-interval\": {{lag_bfd_min-interval}}\n            }\n        }\n    }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e44a7aed-5301-4367-a685-b1ba91981e9a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show aggregation with bgf",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "828ca479-89b9-4b1f-ad8e-f30ea56b86bf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});",
													"",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													"",
													"pm.test(\"Validate bfd destination address\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"bfd\"][\"config\"][\"destination-address\"]).to.eql(postman.getEnvironmentVariable(\"lag_bfd_destination-address\"));",
													"});",
													"pm.test(\"Validate bfd multiplier\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"bfd\"][\"config\"][\"multiplier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_multiplier\")));",
													"});",
													"pm.test(\"Validate bfd min-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"bfd\"][\"config\"][\"min-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_min-interval\")));",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag aggregation config",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37c75311-7ab0-44a5-997a-20da4eb5e3d5",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69ae5ccb-4455-4641-9364-ba117898448b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface without aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd6418cb-d38b-4706-a321-9bf8fc360771",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "LAG CRUD AggegationBfdLinkSpeed",
							"item": [
								{
									"name": "create aggregation with link-speed",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "882e4cc4-85a4-45e6-ba70-68162166e14a",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"interface\": [\n        {\n            \"name\": \"{{lag_prefix}}{{lag_inf-id}}\",\n            \"config\": {\n                \"type\": \"iana-if-type:ieee8023adLag\",\n                \"enabled\": {{lag_enabled}},\n                \"mtu\": {{lag_mtu}},\n                \"description\": \"{{lag_description}}\",\n                \"name\": \"{{lag_prefix}}{{lag_inf-id}}\"\n            },\n            \"subinterfaces\": {\n                \"subinterface\": [\n                    {\n                        \"index\": 0,\n                        \"config\": {\n                            \"index\": 0\n                        },\n                        \"frinx-openconfig-if-ip:ipv4\": {\n                            \"addresses\": {\n                                \"address\": [\n                                    {\n                                        \"ip\": \"{{lag_ip}}\",\n                                        \"config\": {\n                                            \"ip\": \"{{lag_ip}}\",\n                                            \"prefix-length\": {{lag_prefix-length}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    }\n                ]\n            },\n    \t\t\"aggregation\": {\n    \t\t\t\"config\": {\n            \t\t\"min-links\": {{lag_min-links}},\n            \t\t\"frinx-juniper-if-aggregate-extension:link-speed\": \"{{lag_link_speed}}\"\n        \t\t},\n        \t\t\"bfd\": {\n            \t\t\"config\": {\n            \t\t\t\"local-address\": \"{{lag_ip}}\",\n                \t\t\"destination-address\": \"{{lag_bfd_destination-address}}\",\n                \t\t\"multiplier\": {{lag_bfd_multiplier}},\n                \t\t\"min-interval\": {{lag_bfd_min-interval}}\n            \t\t}\n        \t\t}\n    \t\t}\n        }\n    ]\n}\n"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "create commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a2deda7-8e70-4131-9d99-e684d8980e72",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface with aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2354bbd2-2c3a-48d3-8f00-7252f3ce9308",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													"",
													"pm.test(\"Validate link-speed\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"frinx-juniper-if-aggregate-extension:link-speed\"]).to.eql(postman.getEnvironmentVariable(\"lag_link_speed\"));",
													"});",
													"",
													"",
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate ip\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"ip\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate prefix-length\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"subinterfaces\"][\"subinterface\"][0][\"frinx-openconfig-if-ip:ipv4\"][\"addresses\"][\"address\"][0][\"config\"][\"prefix-length\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_prefix-length\")));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"pm.test(\"Validate min-interval\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"min-interval\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_min-interval\")));",
													"});",
													"pm.test(\"Validate local-address\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"local-address\"]).to.eql(postman.getEnvironmentVariable(\"lag_ip\"));",
													"});",
													"pm.test(\"Validate destination-address\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"destination-address\"]).to.eql(postman.getEnvironmentVariable(\"lag_bfd_destination-address\"));",
													"});",
													"pm.test(\"Validate multiplier\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"frinx-bfd:bfd\"][\"config\"][\"multiplier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_bfd_multiplier\")));",
													"});",
													"pm.test(\"Validate frinx-juniper-if-aggregate-extension:link-speed\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"frinx-juniper-if-aggregate-extension:link-speed\"]).to.eql(postman.getEnvironmentVariable(\"lag_link_speed\"));",
													"});",
													"pm.test(\"Validate min-links\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-aggregate:aggregation\"][\"config\"][\"min-links\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_min-links\")));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								},
								{
									"name": "delete lag aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16d70797-ed42-497a-b4d6-8282774cde3c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}/aggregation"
									},
									"response": []
								},
								{
									"name": "delete commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56d2bcbf-d5a5-4b80-82d8-426c26ab9646",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show lag interface without aggregation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e9efc47-e9c8-4dab-8d70-c48801920125",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate enabled\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"enabled\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_enabled\")));",
													"});",
													"",
													"pm.test(\"Validate description\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"description\"]).to.eql(postman.getEnvironmentVariable(\"lag_description\"));",
													"});",
													"",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lag_prefix\")+postman.getEnvironmentVariable(\"lag_inf-id\"));",
													"});",
													"",
													"pm.test(\"Validate mtu\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"mtu\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"lag_mtu\")));",
													"});",
													"",
													"pm.test(\"Validate frinx-damping:damping presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
													"});",
													"",
													"pm.test(\"Validate subinterfaces presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"subinterfaces\");",
													"});",
													"",
													"pm.test(\"Validate aggregation presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-aggregate:aggregation\");",
													"});",
													"",
													"pm.test(\"Validate statistics presence\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lag_prefix}}{{lag_inf-id}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "deba3244-5b76-45e6-b2c3-35c43e122955",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "facc84fc-64fe-429a-bb16-f463b89351ba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MPLS-TE CRUD",
					"item": [
						{
							"name": "create mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7861532b-aefb-4552-a533-ea8fb46f2924",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2edf8d88-eaac-4f9e-8c4d-ae91dfc7b928",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interface\": [\n        {\n            \"interface-id\": \"{{mpls_intf_id}}\",\n            \"config\": {\n                \"interface-id\": \"{{mpls_intf_id}}\"\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "468364e0-b34c-4d48-8e6a-841084b371c7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains mpls traffic-eng', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"mpls traffic-eng\");",
											"    });",
											"    pm.test('dryrun - contains interface GigabitEthernet0/0/0/1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface GigabitEthernet0/0/0/1\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3653539d-f0f6-4634-b95e-05fde0d1b1ff",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dcd7d36-6ce8-4438-9b7c-217c10281e94",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"mpls_intf_id\"));",
											"});",
											"pm.test(\"Validate config interface-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:interface\"][0][\"config\"][\"interface-id\"]).to.eql(postman.getEnvironmentVariable(\"mpls_intf_id\"));",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e396d534-0484-4de5-ad08-528b59e53b0e",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						},
						{
							"name": "delete mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19100aac-31c2-46e6-8f8e-f28c65dc48b3",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "76957cbc-cda7-4039-b14f-4381664be99e",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e2c5004-bb71-4652-b40a-40ceb07a70ae",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    ",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains mpls traffic-eng', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"mpls traffic-eng\");",
											"    });",
											"    pm.test('dryrun - contains no interface GigabitEthernet0/0/0/1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface GigabitEthernet0/0/0/1\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69c6721d-22b0-4195-965d-6e43a31868ae",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted mpls-te",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34d8ca93-916f-45ee-975f-869f4807305e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3f7e8407-2060-4cb9-89c1-a3ee0945d209",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/te-interface-attributes/interface/{{mpls_url_intf_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MPLS-TUNNEL CRUD",
					"item": [
						{
							"name": "MPLS-TUNNEL CRUD Destination",
							"item": [
								{
									"name": "create tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b368f0d-21ed-445b-b830-d7a0b031d0d0",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2cda174c-f3fc-4254-9d91-2763ceace810",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"p2p-tunnel-attributes\": {\n                \"config\": {\n                    \"destination\": \"{{mpls_tunnel_destination}}\"\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/p2p-tunnel-attributes"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10ef9009-88c3-40de-8bd9-14182a91bc7c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1cc55a36-83c9-4d3a-a445-6b590c8deddf",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate shortcut-eligible\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\")));",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"",
													"pm.test(\"Validate destination not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.have.property(\"p2p-tunnel-attributes\")",
													"});",
													"",
													"pm.test(\"Validate cisco-mpls-te-extension not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\")",
													"});",
													"",
													"pm.test(\"Validate destination\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"p2p-tunnel-attributes\"][\"config\"][\"destination\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_destination\"));",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "update tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bd6c5f4-ce30-41a9-9e4e-ab4b32f976d9",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c41a6c5-90f6-48b9-9fb0-5fa0a385e5ac",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"p2p-tunnel-attributes\": {\n                \"config\": {\n                    \"destination\": \"{{mpls_tunnel_destination_upd}}\"\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/p2p-tunnel-attributes"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a06a0bc-d427-4b88-878f-94929709ee49",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8168ab2-113a-4774-990f-53b4d418fb93",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate shortcut-eligible\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\")));",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"",
													"pm.test(\"Validate destination not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.have.property(\"p2p-tunnel-attributes\")",
													"});",
													"",
													"pm.test(\"Validate cisco-mpls-te-extension not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\")",
													"});",
													"",
													"pm.test(\"Validate destination\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"p2p-tunnel-attributes\"][\"config\"][\"destination\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_destination_upd\"));",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "remove tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "594cc218-1c66-4607-a8e3-95d28448cdca",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c21a9b52-6737-4b09-b203-5007e2d57e4b",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/p2p-tunnel-attributes"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3895137-a107-44e0-a3cf-8eb877cf27bb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel destination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18b729c8-0bad-4393-bc72-38d5b7e566d1",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate shortcut-eligible\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\")));",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"",
													"pm.test(\"Validate destination not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"p2p-tunnel-attributes\")",
													"});",
													"",
													"pm.test(\"Validate cisco-mpls-te-extension not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\")",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "MPLS-TUNNEL CRUD Config",
							"item": [
								{
									"name": "update tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10f98496-4c1e-4ec8-bff7-471cb5639c3c",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2bccd6f5-6ddf-4c06-a774-d58e58dd799c",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "update dry-run commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dda67e93-532d-4443-8eee-21d63f51a37b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"",
													"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"    });",
													"    pm.test(\"dryrun - nodeId\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"    });",
													"    ",
													"    ",
													"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
													"    });",
													"",
													"        pm.test('dryrun - contains interface tunnel-te 100', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface tunnel-te 100\");",
													"    });",
													"    pm.test('dryrun - contains metric absolute 200', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"metric absolute 200\");",
													"    });",
													"    pm.test('dryrun - contains no interface tunnel-te 100', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface tunnel-te 100\");",
													"    });",
													"    pm.test('dryrun - contains autoroute announce', function () {",
													"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"autoroute announce\");",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
									},
									"response": []
								},
								{
									"name": "update commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89b5f842-fd73-4423-ae3d-510016eedc4e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated tunnel",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bbb5e26-555d-4bd7-bdfa-a2e87e8179aa",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate shortcut-eligible\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_200\")));",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"",
													"pm.test(\"Validate destination not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"p2p-tunnel-attributes\")",
													"});",
													"",
													"pm.test(\"Validate cisco-mpls-te-extension not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\")",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "update tunnel invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fba5a80-9d7a-4b83-b780-bc983bdabf22",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f4538e66-0b3f-4af0-85c2-d0c422552900",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_false}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             }\n         }\n    ]\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "failing commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be6d7ebf-32e6-4f3f-b8e6-a2d396128eeb",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_fail\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "replace-config-with-operational",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3be3e8d9-f8ec-4a30-9fc6-c387249407ae",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate output result\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"result\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"password": "admin",
												"username": "admin"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:replace-config-with-operational"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "MPLS-TUNNEL CRUD Loadshare",
							"item": [
								{
									"name": "create tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "432ef335-917f-40a0-9c87-19b86e3034f4",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"  pm.response.to.have.status(201);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8fea32af-00cc-4218-87fc-2e89b1fb2837",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n          \"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\": {\n                \"config\": {\n                    \"load-share\": {{mpls_load_share}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/frinx-cisco-mpls-te-extension:cisco-mpls-te-extension"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66fab94c-0702-4268-87ad-dcdf6d87e80b",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show created tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d9fa68d-a1bf-4e13-8acd-a1ea18efc037",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate shortcut-eligible\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\")));",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"",
													"pm.test(\"Validate destination not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"p2p-tunnel-attributes\")",
													"});",
													"",
													"pm.test(\"Validate cisco-mpls-te-extension not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.have.property(\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\")",
													"});",
													"",
													"pm.test(\"Validate load-share\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\"][\"config\"][\"load-share\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_load_share\")))",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "update tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d432e7c-c211-494a-8bb9-047e25ca92a6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "559c7d35-5a17-4c80-9705-aaaf585afd12",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n          \"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\": {\n                \"config\": {\n                    \"load-share\": {{mpls_load_share_upd}}\n                }\n            }\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/frinx-cisco-mpls-te-extension:cisco-mpls-te-extension"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96ab084a-3354-46f1-8270-c2e6d3185c01",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show updated tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "885c52d2-ed53-41f5-a3e3-ec659695201e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate shortcut-eligible\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\")));",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"",
													"pm.test(\"Validate destination not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"p2p-tunnel-attributes\")",
													"});",
													"",
													"pm.test(\"Validate cisco-mpls-te-extension not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.have.property(\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\")",
													"});",
													"",
													"pm.test(\"Validate load-share\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\"][\"config\"][\"load-share\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_load_share_upd\")))",
													"});",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								},
								{
									"name": "delete tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56cf6e2c-943d-4965-aabf-520281aa25b6",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e5ad14a9-2c4b-4b51-b9c6-0366fa853499",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}/frinx-cisco-mpls-te-extension:cisco-mpls-te-extension"
									},
									"response": []
								},
								{
									"name": "commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c810b7b5-efa0-4344-a33c-70e16fc9f339",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate overall-configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate configuration-status\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
													"});",
													"pm.test(\"Validate nodeId\", function() {",
													"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
													"});",
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": {
												"username": "admin",
												"password": "admin",
												"showPassword": false
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
									},
									"response": []
								},
								{
									"name": "show deleted tunnel loadshare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85a72480-0257-421d-812e-142b981fa16e",
												"type": "text/javascript",
												"exec": [
													"console.log(\"Response: \" + responseBody)",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Validate shortcut-eligible\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
													"});",
													"pm.test(\"Validate metric\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\")));",
													"});",
													"pm.test(\"Validate config name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"pm.test(\"Validate name\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
													"});",
													"",
													"pm.test(\"Validate destination not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"p2p-tunnel-attributes\")",
													"});",
													"",
													"pm.test(\"Validate cisco-mpls-te-extension not present\", function() {",
													"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0]).to.not.have.property(\"frinx-cisco-mpls-te-extension:cisco-mpls-te-extension\")",
													"});"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79a1eed4-93f2-45a8-aec5-c3b4981458ad",
												"type": "text/javascript",
												"exec": [
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic YWRtaW46YWRtaW4="
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
										},
										"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a5b6c82d-63e0-4c40-bea7-ce96b294a532",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6bfb5226-0997-4423-9e23-e25275f5e406",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "MPLS-TUNNEL-FULL CRUD",
					"item": [
						{
							"name": "create tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2479861-1131-4870-9806-040c0c172263",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6f32c0be-c913-4c66-9921-59d55bdf9785",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_100}}\n             },\n             \"p2p-tunnel-attributes\": {\n                \"config\": {\n                    \"destination\": \"{{mpls_tunnel_destination}}\"\n                }\n            }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3565a5a7-52c0-4f3c-a360-d5a428bfc7cb",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show configured tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3c64c19-83ed-4420-b2fb-ebf6ac8925b6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate destination\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"p2p-tunnel-attributes\"][\"config\"][\"destination\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_destination\"));",
											"});",
											"pm.test(\"Validate shortcut-eligible\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
											"});",
											"pm.test(\"Validate metric\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_100\")));",
											"});",
											"pm.test(\"Validate metric-type\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"]).to.eql(\"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "update tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4246f867-e05c-4035-8bc4-1cc7c8f131a1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bcd124ed-0d8c-4dc2-8729-90a71091173f",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"tunnel\": [\n         {\n             \"name\": \"{{mpls_tunnel_id}}\",\n             \"config\": {\n                 \"name\": \"{{mpls_tunnel_id}}\",\n                 \"shortcut-eligible\": {{mpls_elig_true}},\n                 \"metric-type\": \"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\",\n                 \"metric\": {{mpls_metric_200}}\n             },\n             \"p2p-tunnel-attributes\": {\n                \"config\": {\n                    \"destination\": \"{{mpls_tunnel_destination_upd}}\"\n                }\n            }\n         }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2047cc4-d8a9-49bc-bf47-af0ccd5df960",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show configured tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5cd5da15-2c35-44b7-bc6c-bbcc6c560d31",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate destination\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"p2p-tunnel-attributes\"][\"config\"][\"destination\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_destination_upd\"));",
											"});",
											"pm.test(\"Validate shortcut-eligible\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"shortcut-eligible\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_elig_true\")));",
											"});",
											"pm.test(\"Validate metric\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"mpls_metric_200\")));",
											"});",
											"pm.test(\"Validate metric-type\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"metric-type\"]).to.eql(\"frinx-openconfig-mpls-types:LSP_METRIC_ABSOLUTE\");",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:tunnel\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"mpls_tunnel_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "delete tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05c4f808-e0ad-4de8-91de-c030a32a7a40",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b08f1e14-4bbd-4e09-9244-cc822e158af3",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						},
						{
							"name": "commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfc9297a-4682-4fec-854f-b27402d19a8a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted tunnel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a97dfb3d-e599-4d6b-b3d7-231c270310fc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcfd127a-4fc5-4251-bf66-f764a00ead21",
										"type": "text/javascript",
										"exec": [
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"network-topology:node\" :\n    {\n      \"network-topology:node-id\" : \"IOS2\",\n      \n      \"cli-topology:host\" : \"{{classic_ip}}\",\n      \"cli-topology:port\" : \"22\",\n      \"cli-topology:transport-type\" : \"ssh\",\n      \n      \"cli-topology:device-type\" : \"ios\",\n      \"cli-topology:device-version\" : \"*\",\n      \n      \"cli-topology:username\" : \"cisco\",\n      \"cli-topology:password\" : \"cisco\",\n      \n      \"cli-topology:journal-size\": 150\n    }\n  }"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{mpls_ni_name}}/mpls/lsps/constrained-path/tunnels/tunnel/{{mpls_tunnel_id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "LACP CRUD",
					"item": [
						{
							"name": "create passive mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84a46527-1590-4219-9d99-6e358fc6ef43",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_passive}}\"\n\t\t\t\t}\n            }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47cda46b-b0d7-4c46-9c1d-2d16340ad9b7",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show created passive mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b95f88d3-842a-4f50-b25a-85632b1f2b5f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Validate frinx-lacp-lag-member:interval\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"]).to.not.have.property(\"frinx-lacp-lag-member:interval\");",
											"});",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lacp_bundle_id\"));",
											"});",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(postman.getEnvironmentVariable(\"lacp_mode_passive\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "update active mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31d37c10-ecbc-4466-81a6-81e300ebd8e6",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\"\n\t\t\t\t}\n            }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a8bd8a7-29c0-4499-b841-2bf7a8cba7b1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated active mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "311bd906-dc54-4bd0-a143-342bbdd2b8c1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											"",
											"",
											"",
											"pm.test(\"Validate frinx-lacp-lag-member:interval\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"]).to.not.have.property(\"frinx-lacp-lag-member:interval\");",
											"});",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lacp_bundle_id\"));",
											"});",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(postman.getEnvironmentVariable(\"lacp_mode_active\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "update period fast",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a60c33a-995f-422c-a816-b522d6707b52",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n            \"frinx-openconfig-if-ethernet:ethernet\": {\n                \"config\": {\n                    \"frinx-openconfig-if-aggregate:aggregate-id\": \"{{lacp_bundle_id}}\",\n                    \"lacp-mode\": \"{{lacp_mode_active}}\",\n                    \"interval\": \"{{lacp_interval_fast}}\"\n\t\t\t\t}\n            }\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
							},
							"response": []
						},
						{
							"name": "update period fast commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0267b431-cf6c-4de3-9df8-5936afcaa197",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated period fast",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce9b2049-456d-4c5c-97c3-adb7cffe6ca8",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											"",
											"pm.test(\"Validate frinx-lacp-lag-member:interval\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:interval\"]).to.eql(postman.getEnvironmentVariable(\"lacp_interval_fast\"));",
											"});",
											"pm.test(\"Validate frinx-openconfig-if-aggregate:aggregate-id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-openconfig-if-aggregate:aggregate-id\"]).to.eql(postman.getEnvironmentVariable(\"lacp_bundle_id\"));",
											"});",
											"pm.test(\"Validate frinx-lacp-lag-member:lacp-mode\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"frinx-openconfig-if-ethernet:ethernet\"][\"config\"][\"frinx-lacp-lag-member:lacp-mode\"]).to.eql(postman.getEnvironmentVariable(\"lacp_mode_active\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
							},
							"response": []
						},
						{
							"name": "delete ethernet",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6be846ba-b843-4fac-bb1d-24c3be2ab6fc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}/frinx-openconfig-if-ethernet:ethernet"
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e8db65d-458c-418a-88dd-d64e76ada45d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bcc627c8-a9c4-4cf3-97a7-92373e87b836",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show cleaned empty interface",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8368f361-324e-408e-9a86-f0754b6a1928",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"lacp_intf-id\"));",
											"});",
											"",
											"pm.test(\"Subinterface not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"subinterfaces\");",
											"});",
											"",
											"pm.test(\"Statistics not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-cisco-if-extension:statistics\");",
											"});",
											"",
											"pm.test(\"Ethernet not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-openconfig-if-ethernet:ethernet\");",
											"});",
											"",
											"pm.test(\"Damping not present\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"frinx-damping:damping\");",
											"});",
											"",
											"pm.test(\"Validate hold-time presence\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-interfaces:interface\"][0]).to.not.have.property(\"hold-time\");",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-interfaces:interfaces/interface/{{lacp_url_intf-id}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "BGP CRUD",
					"item": [
						{
							"name": "configure bgp native",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "891b8b93-1d71-4641-a314-5ffa481ee94f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{ip1}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{ip1}}\",\n                                \"peer-group\": \"{{bgp_group}}\",\n                                \"peer-as\": {{bgp_peer-as}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n          \n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "configure dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e8db65d-458c-418a-88dd-d64e76ada45d",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "configure commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9a0029c-4baf-47e7-9900-69cfddba7d72",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a2c1c8f-e4ae-488b-aa1c-b928b42d19bf",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"ip1\"));",
											"});",
											"pm.test(\"Validate peer-group\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(postman.getEnvironmentVariable(\"bgp_group\"));",
											"});",
											"pm.test(\"Validate peer-as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as\")));",
											"});",
											"",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"ip1\"));",
											"});",
											"pm.test(\"Validate as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_as\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "update bgp process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "97bfdeb8-198a-45f2-b996-655135342c10",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": \"{{bgp_process-name}}\",\n            \"identifier\": \"frinx-openconfig-policy-types:BGP\",\n            \"config\": {\n                \"name\": \"{{bgp_process-name}}\",\n                \"identifier\": \"frinx-openconfig-policy-types:BGP\"\n            },\n            \"bgp\": {\n                \"global\": {\n                    \"config\": {\n                        \"as\": {{bgp_as2}}\n                    }\n                },\n                \"neighbors\": {\n                    \"neighbor\": [\n                        {\n                            \"neighbor-address\": \"{{bgp_ip2}}\",\n                            \"config\": {\n                                \"neighbor-address\": \"{{bgp_ip2}}\",\n                                \"peer-group\": \"{{bgp_group2}}\",\n                                \"peer-as\": {{bgp_peer-as2}},\n                                \"enabled\": true\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddacc9b9-6836-4ed2-82f3-ffea0da95dd2",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains router bgp 666 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 666 \");",
											"    });",
											"    pm.test('dryrun - contains no neighbor 8.8.8.8', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor 8.8.8.8\");",
											"    });",
											"    pm.test('dryrun - contains neighbor 66.66.66.66', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"neighbor 66.66.66.66\");",
											"    });",
											"    pm.test('dryrun - contains no router bgp 1 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no router bgp 1 \");",
											"    });",
											"    pm.test('dryrun - contains router bgp 1 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 1 \");",
											"    });",
											"    pm.test('dryrun - contains use neighbor-group nbrgroup2', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"use neighbor-group nbrgroup2\");",
											"    });",
											"    pm.test('dryrun - contains no shutdown', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no shutdown\");",
											"    });",
											"    pm.test('dryrun - contains remote-as 56000', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"remote-as 56000\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79b946af-35b2-42dc-992d-325f4d0baead",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0192dc6e-4e5a-4d4f-9aa2-10b030119643",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"bgp_ip2\"));",
											"});",
											"pm.test(\"Validate peer-group\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-group\"]).to.eql(postman.getEnvironmentVariable(\"bgp_group2\"));",
											"});",
											"pm.test(\"Validate peer-as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"peer-as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_peer-as2\")));",
											"});",
											"",
											"pm.test(\"Validate neighbor-address\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"neighbors\"][\"neighbor\"][0][\"config\"][\"neighbor-address\"]).to.eql(postman.getEnvironmentVariable(\"bgp_ip2\"));",
											"});",
											"pm.test(\"Validate as\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"bgp\"][\"global\"][\"config\"][\"as\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"bgp_as2\")));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"bgp_process-name\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "delete previouse bgp configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbad5520-333e-4b61-99bf-c53322b9bee0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5186fa69-8a18-47f5-8546-609b7900961a",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"    pm.test('dryrun - contains no router bgp 666 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no router bgp 666 \");",
											"    });",
											"    pm.test('dryrun - contains no neighbor 66.66.66.66', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no neighbor 66.66.66.66\");",
											"    });",
											"    pm.test('dryrun - contains router bgp 666 ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router bgp 666 \");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9039c3db-fbe6-499e-9a56-5a7e8a18b701",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted bgp process type/ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a33f5579-fbcb-4688-b403-002e4d4fe241",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{bgp_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:BGP/{{bgp_process-name}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "OSPF CRUD",
					"item": [
						{
							"name": "configure ospf native",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adef84f0-0006-4ec2-9fe1-0ad4b796a54f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout}},\n                                \"include\": [ \n                                    {{ospf_include}}\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "create dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f942ceae-eb33-4238-8034-4a7c35d087c1",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains interface Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"area 1\");",
											"    });",
											"    pm.test('dryrun - contains max-metric router-lsa on-startup 60 include-stub summary-lsa external-lsa ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"max-metric router-lsa on-startup 60 include-stub summary-lsa external-lsa \");",
											"    });",
											"    pm.test('dryrun - contains router ospf 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router ospf 97\");",
											"    });",
											"    pm.test('dryrun - contains cost 77', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"cost 77\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "create commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9c61f53-0d58-4825-90d8-2235e3070a01",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b1d4a1d-6186-431b-a8b0-83e06e89b2b0",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
											"});",
											"",
											"pm.test(\"Validate timeout\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"max-metric\"][\"config\"][\"timeout\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_timeout\")));",
											"});",
											"//pm.test(\"Validate interface\", function() {",
											"//  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"interface-ref\"][\"config\"][\"interface\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
											"//});",
											"pm.test(\"Validate interface\", function() {",
											"   pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0]).to.not.have.property(\"interface-ref\");",
											"});",
											"",
											"pm.test(\"Validate metric\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_cost\")));",
											"});",
											"pm.test(\"Validate id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
											"});",
											"pm.test(\"Validate identifier\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id\")));",
											"});",
											"pm.test(\"Validate identifier\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id\")));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "update ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49e37335-c4f1-4342-abaf-b043a010bd7f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": [\n        {\n            \"name\": {{ospf}},\n            \"identifier\": \"frinx-openconfig-policy-types:OSPF\",\n            \"config\": {\n                \"name\": {{ospf}},\n                \"identifier\": \"frinx-openconfig-policy-types:OSPF\"\n            },\n            \"ospfv2\": {\n                \"global\": {\n                    \"timers\": {\n                        \"max-metric\": {\n                            \"config\": {\n                                \"set\": true,\n                                \"timeout\": {{ospf_timeout2}},\n                                \"include\": [ \n                                    {{ospf_include}}\n                                ]\n                            }\n                        }\n                    }\n                },\n                \"areas\": {\n                    \"area\": [\n                        {\n                            \"identifier\":{{ospf_area_id2}},\n                            \"config\": {\n                                \"identifier\": {{ospf_area_id2}}\n                            },\n                            \"interfaces\": {\n                                \"interface\": [\n                                    {\n                                        \"id\": \"{{test_interface}}\",\n                                        \"config\": {\n                                            \"metric\": {{ospf_cost2}}\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        }\n    ]\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "update dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32896f95-3a92-401a-b556-b2fe1363f5bc",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains cost 30', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"cost 30\");",
											"    });",
											"    pm.test('dryrun - contains router ospf 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router ospf 97\");",
											"    });",
											"    pm.test('dryrun - contains area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"area 1\");",
											"    });",
											"    pm.test('dryrun - contains no area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no area 1\");",
											"    });",
											"    pm.test('dryrun - contains interface Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"interface Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains no interface Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface Loopback97\");",
											"    });",
											"    pm.test('dryrun - contains area 99', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"area 99\");",
											"    });",
											"    pm.test('dryrun - contains max-metric router-lsa on-startup 30 include-stub summary-lsa external-lsa ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"max-metric router-lsa on-startup 30 include-stub summary-lsa external-lsa \");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "update commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23f7fdad-04c8-4af5-a387-e23c64e64033",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show updated ospf process",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2c53cf0-de92-4620-9875-36147ddae5ac",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"config\"][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
											"});",
											"pm.test(\"Validate name\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"name\"]).to.eql(postman.getEnvironmentVariable(\"ospf\"));",
											"});",
											"",
											"pm.test(\"Validate timeout\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"global\"][\"timers\"][\"max-metric\"][\"config\"][\"timeout\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_timeout2\")));",
											"});",
											"pm.test(\"Validate interface\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"interface-ref\"][\"config\"][\"interface\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
											"});",
											"pm.test(\"Validate metric\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"config\"][\"metric\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_cost2\")));",
											"});",
											"pm.test(\"Validate id\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"interfaces\"][\"interface\"][0][\"id\"]).to.eql(postman.getEnvironmentVariable(\"test_interface\"));",
											"});",
											"pm.test(\"Validate identifier\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id2\")));",
											"});",
											"pm.test(\"Validate identifier\", function() {",
											"  pm.expect(pm.response.json()[\"frinx-openconfig-network-instance:protocol\"][0][\"ospfv2\"][\"areas\"][\"area\"][0][\"config\"][\"identifier\"]).to.eql(JSON.parse(postman.getEnvironmentVariable(\"ospf_area_id2\")));",
											"});",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "delete previouse ospf configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3074e75-2d1b-4ab0-be89-1b5c6689ee37",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/config/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						},
						{
							"name": "delete dry-run commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f002c126-ba3d-44e7-9b5c-a9cd9e8b902f",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"if ( \"cisco_xr5\" === postman.getEnvironmentVariable(\"env_type\") ){",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    pm.test(\"dryrun - overall-configuration-status complete\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - nodeId\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"    });",
											"    ",
											"    pm.test(\"dryrun - not empty cli-configuration\", function() {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).not.to.eql(\"\");",
											"    });",
											"",
											"        pm.test('dryrun - contains no router ospf 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no router ospf 97\");",
											"    });",
											"    pm.test('dryrun - contains router ospf 97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"router ospf 97\");",
											"    });",
											"    pm.test('dryrun - contains area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"area 99\");",
											"    });",
											"    pm.test('dryrun - contains no area 1', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no area 99\");",
											"    });",
											"    pm.test('dryrun - contains no max-metric router-lsa on-startup 60 external-lsa include-stub summary-lsa ', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no max-metric router-lsa on-startup 30 include-stub summary-lsa external-lsa\");",
											"    });",
											"    pm.test('dryrun - contains no interface Loopback97', function () {",
											"        pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"cli-configuration\"]).to.include(\"no interface Loopback97\");",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/dryrun-manager:dryrun-commit"
							},
							"response": []
						},
						{
							"name": "delete commit",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "599ce421-1044-4455-a238-1b277ae2c3bb",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Validate overall-configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"overall-configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate configuration-status\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"configuration-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
											"});",
											"pm.test(\"Validate nodeId\", function() {",
											"  pm.expect(pm.response.json()[\"output\"][\"node-config-results\"][\"node-config-result\"][0][\"nodeId\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
											"});"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": {
										"username": "admin",
										"password": "admin",
										"showPassword": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t}\n\n\t}\n}"
								},
								"url": "http://{{odl_ip}}:8181/restconf/operations/uniconfig-manager:commit"
							},
							"response": []
						},
						{
							"name": "show deleted ospf",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2336e22c-9025-4bf6-a72a-dc012c4bd83e",
										"type": "text/javascript",
										"exec": [
											"console.log(\"Response: \" + responseBody)",
											"",
											"pm.test(\"Status code is 404\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic YWRtaW46YWRtaW4="
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": "http://{{odl_ip}}:8181/restconf/operational/network-topology:network-topology/topology/uniconfig/node/{{node_id}}/frinx-uniconfig-topology:configuration/frinx-openconfig-network-instance:network-instances/network-instance/{{ospf_ni-name}}/protocols/protocol/frinx-openconfig-policy-types:OSPF/{{ospf}}"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}