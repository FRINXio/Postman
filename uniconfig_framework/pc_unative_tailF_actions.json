{
	"info": {
		"_postman_id": "d6cece32-7920-4759-b7ea-543e6f3b6315",
		"name": "pc_unative_tailF_actions.json",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Non null output non null input",
			"item": [
				{
					"name": "add new interface",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54e4d1e6-9918-420b-8a74-2dfca299ab13",
								"exec": [
									"console.log(\"Request data: \" + request.data.toString());",
									"console.log(\"Response: \" + responseBody)",
									"pm.test(\"Success\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4="
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tvi\": [\n        {\n            \"name\": \"tvi-0/3\",\n            \"description\": \"ESP Tunnel Interface for Provider Control VR\",\n            \"type\": \"p2mp-esp\",\n            \"enable\": true,\n            \"mode\": \"ipsec\",\n            \"unit\": [\n                {\n                    \"name\": 0,\n                    \"enable\": true,\n                    \"family\": {\n                        \"inet\": {\n                            \"address\": [\n                                {\n                                    \"addr\": \"10.1.64.105/32\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/tvi=tvi-0%2F3",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"tvi=tvi-0%2F3"
							]
						}
					},
					"response": []
				},
				{
					"name": "sync from network",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c46564f5-5498-45c0-8da2-40f1373e7902",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "445d5b3c-49b5-48c3-86dc-489a9da69f40",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"  pm.test(\"Validate overall-status\", function() {",
									"  pm.expect(pm.response.json()[\"output\"][\"overall-status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"status\"]).to.eql(postman.getEnvironmentVariable(\"operations_result_complete\"));",
									"  pm.expect(pm.response.json()[\"output\"][\"node-results\"][\"node-result\"][0][\"node-id\"]).to.eql(postman.getEnvironmentVariable(\"node_id\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"input\": {\n\t\t\t\t\"target-nodes\": {\n\t\t\t\t\t\"node\": [\"{{node_id}}\"]\n\t\t}\n\n\t}\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/operations/uniconfig-manager:sync-from-network",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"operations",
								"uniconfig-manager:sync-from-network"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACTION: bring interface up",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a99fbb4a-e6e4-49f0-8890-66a9eb9e5e51",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb92128e-af5b-4394-9a26-380ad17d9ea2",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate non-null output of tailf-action with non-null input\", function() {",
									"  pm.expect(pm.response.json()[\"interfaces:output\"][\"interfaces:status\"]).to.eql(postman.getEnvironmentVariable(\"interfaces:status\"));",
									"  pm.expect(pm.response.json()[\"interfaces:output\"][\"interfaces:result\"]).to.eql(postman.getEnvironmentVariable(\"interfaces:result\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"name\": \"tvi-0/3\"\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/oper-up",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"oper-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACTION: create snapshot",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "27f3ab3f-3d64-44c2-bba7-e972def52883",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95639709-d6cf-40c0-8827-af1402b51b31",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate non-null output of tailf-action with non-null input\", function() {",
									"  pm.expect(pm.response.json()[\"system:output\"][\"system:status\"]).to.eql(postman.getEnvironmentVariable(\"system:status\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"description\": \"this is test\",\n        \"no-confirm\": [\n            null\n        ]\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/system:system/create-snapshot",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"system:system",
								"create-snapshot"
							]
						}
					},
					"response": []
				},
				{
					"name": "ACTION: traceroute",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ab5e4da9-8f6a-406a-b0c2-b20df1daafeb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea3c75ff-f7d1-416e-bcd3-ce39bc5ae056",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate non-null output of tailf-action with non-null input\", function() {",
									"  pm.expect(pm.response.json()[\"diagnostics:output\"][\"diagnostics:status\"]).to.eql(postman.getEnvironmentVariable(\"diagnostics:status\"));",
									"  pm.expect(pm.response.json()[\"diagnostics:output\"][\"diagnostics:result\"].has(\"traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets\\n\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"hostname\": \"8.8.8.8\"\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/diagnostics:diagnostics/traceroute",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"diagnostics:diagnostics",
								"traceroute"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Not null output null input",
			"item": [
				{
					"name": "ACTION: list package",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0208b6f5-5aef-4709-8d91-70f02dc9f608",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate non-null output of tailf-action with null input\", function() {",
									"",
									"            pm.expect(pm.response.json()[\"system:output\"][\"system:packages\"][0][\"name\"]).to.eql(\"versa-flexvnf-20200213-073051-47e18e0-20.2.1.deb\");",
									"            pm.expect(pm.response.json()[\"system:output\"][\"system:packages\"][1][\"name\"]).to.eql(\"versa-flexvnf-20200213-073051-47e18e0-20.2.1.bin\");",
									"        }",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/system:system/package/list",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"system:system",
								"package",
								"list"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Null output not null input",
			"item": [
				{
					"name": "ACTION: clear interface statistics",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6794d8bb-4d3f-47b3-b458-d7cf9b9cb3bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "24c8ca36-39d5-4d8b-a0ac-5f6209d7bdd9",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate null output of tailf-action with non-null input\", function() {",
									"    pm.expect(responseBody!=null && responseBody.length==0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"name\": \"tvi-0/3\"\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/clear:clear/interfaces:interfaces/statistics",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"clear:clear",
								"interfaces:interfaces",
								"statistics"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Null output null input",
			"item": [
				{
					"name": "ACTION: clear statistics lacp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5d7a093-8762-4296-8a1d-2f7659f0de26",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"    pm.test(\"Validate null output of tailf-action with null input\", function() {",
									"    pm.expect(responseBody!=null && responseBody.length==0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/clear:clear/interfaces:lacp/statistics",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"clear:clear",
								"interfaces:lacp",
								"statistics"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bad action requests",
			"item": [
				{
					"name": "non existing action",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9040e64b-076a-4661-a609-3dfa217a44c6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "491f8305-cd4b-40a8-8e8e-2170e810c7a2",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"    pm.test(\"Validate error output of tailf-action with invoking non existing action\", function() {",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-message\"]).to.include(postman.getEnvironmentVariable(\"bad-action-error-message\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(postman.getEnvironmentVariable(\"bad-action-error-tag\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-type\"]).to.eql(postman.getEnvironmentVariable(\"bad-action-error-type\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"month\": \"April\",\n        \"year\": 2018,\n        \"percentile\": 50\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/foo",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"foo"
							]
						}
					},
					"response": []
				},
				{
					"name": "action with missing mandatory field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fbbaabc5-45be-4ee4-af8e-00fd08c3fac2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ee8c2bdb-9360-4e4e-9810-2fdb09dc878a",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"    pm.test(\"Validate error output of tailf-action with invoking action with missing mandatory field\", function() {",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-message\"]).to.eql(postman.getEnvironmentVariable(\"missing-element-error-message\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(postman.getEnvironmentVariable(\"missing-element-error-tag\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-type\"]).to.eql(postman.getEnvironmentVariable(\"missing-element-error-type\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-info\"]).to.eql(postman.getEnvironmentVariable(\"missing-element-error-info\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"name\": \"tvi-0/3\"\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/oper-down",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"oper-down"
							]
						}
					},
					"response": []
				},
				{
					"name": "action with extra field",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "63b6b8c0-f164-4f80-b7bd-c77e82adb82f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b7df6a3-f282-4bbe-a3a7-41d87d0fa6bd",
								"exec": [
									"console.log(\"Response: \" + responseBody)",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"    pm.test(\"Validate error output of tailf-action with invoking action with missing mandatory field\", function() {",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-message\"].has(postman.getEnvironmentVariable(\"missing-exception-error-message\")));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-tag\"]).to.eql(postman.getEnvironmentVariable(\"missing-exception-error-tag\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-type\"]).to.eql(postman.getEnvironmentVariable(\"missing-exception-error-type\"));",
									"  pm.expect(pm.response.json()[\"errors\"][\"error\"][0][\"error-info\"].has(postman.getEnvironmentVariable(\"missing-exception-error-info\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic YWRtaW46YWRtaW4=",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"input\": {\n        \"name\": \"tvi-0/3\",\n        \"foo\" : 1\n    }\n}"
						},
						"url": {
							"raw": "http://{{odl_ip}}:8181/rests/data/network-topology:network-topology/topology={{topology_id_netconf}}/node={{node_id}}/yang-ext:mount/interfaces:interfaces/oper-up",
							"protocol": "http",
							"host": [
								"{{odl_ip}}"
							],
							"port": "8181",
							"path": [
								"rests",
								"data",
								"network-topology:network-topology",
								"topology={{topology_id_netconf}}",
								"node={{node_id}}",
								"yang-ext:mount",
								"interfaces:interfaces",
								"oper-up"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}